<refentry id="{@id}">
 <refnamediv>
  <refname>XML_Query2XML</refname>
  <refpurpose>Generating XML data from SQL queries</refpurpose>
 </refnamediv>
 <refsynopsisdiv>
  
  <author>
  	Lukas Feiler 
  	<authorblurb>
  	 {@link mailto:lukas.feiler@lukasfeiler.com lukas.feiler@lukasfeiler.com}
  	</authorblurb>
  </author>
  <copyright>Copyright 2006 by {@link http://www.empoweredmedia.com Empowered Media}</copyright>
 </refsynopsisdiv>
 {@toc}  
 <refsect1 id="{@id intro}">
  <title>Introduction</title>
  <para>
  	XML_Query2XML allows you to transform the records retrieved with one or more SQL SELECT queries into XML data.
  	Very simple to highly complex transformations are supported. Is was written with performance in mind and
  	can handle large amounts of data. No XSLT needed!
  </para>
  <para>
    Both methods {@link XML_Query2XML::getXML()} and {@link XML_Query2XML::getFlatXML()} return an instance
    of DomDocument. The class DomDocument is provided by PHP5's DOM XML extension.
  </para>
 </refsect1>
 
 <refsect1 id="{@id requirements}">
  <title>Requirements</title>
  <para>
    XML_Query2XML requires
    <itemizedlist>
     <listitem>
      <emphasis>PHP5</emphasis>: XML_Query2XML heavily uses the new exception handling and object orientation features.
     </listitem>
     <listitem>
      <emphasis>PHP5's DOM XML extension (which is complied in to PHP5 by default)</emphasis>
     </listitem>
     <listitem>
      <emphasis>{@link http://pear.php.net/package/DB PEAR DB}</emphasis>, 
      <emphasis>{@link http://pear.php.net/package/MDB2 PEAR MDB2}</emphasis> or
      <emphasis>{@link http://adodb.sourceforge.net ADOdb}</emphasis>.
     </listitem>
    </itemizedlist>
    The following packages are optional:
    <itemizedlist>
     <listitem>
      <emphasis>{@link http://pear.php.net/package/I18N_UnicodeString PEAR I18N_UnicodeString}</emphasis>:
      this is only required if you want to use XML_Query2XML's ability to 
      {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_mapper.9075mapping map SQL identifiers to XML names in accordance with ISO/IEC 9075-14:2005}.
     </listitem>
    </itemizedlist>
  </para>
 </refsect1>
 
 <refsect1 id="{@id migration}">
  <title>Migrating from v0.6.x and v0.7.x to v1.x.x</title>
  <para>
  	The release 0.8.0 of XML_Query2XML is not backward compatible!
  	Due to security considerations XML_Query2XML does not use the
  	native function eval() anymore. Therefore
  	<itemizedlist>
     <listitem>
      the "!" prefix is not supported anymore; this affects
      {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_elements.simple_element_specifications}, 
      {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_value},
      {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_idcolumn},
      {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_attributes} and
      {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql.complexqueryspecification Complex Query Specifications}
     </listitem>
     <listitem>
      the behaviour of {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_condition} was changed
     </listitem>
     <listitem>
      the new callback prefix "#" was added (use it instead of the "!" prefix)
     </listitem>
    </itemizedlist>
  </para>
  <para>
    Proposed migration strategy:
    <itemizedlist>
     <listitem>
      Wherever you currently use the "!" prefix, use the new callback prefix "#" instead.
      The first argument passed to the callback function/method is always the current record ($record).
      You can supply additional static arguments by placing them within the braces, e.g.
      'MyClass:myMethod(arg2, arg3)' will result in MyClass:myMethod() being called with the current
      record as the first, the string 'arg2' as the second and 'arg3' as the third argument. In
      most cases you will want to put whatever code you used after the "!" prefix into a
      separate function or static method. That function/method is what you call using the callback prefix "#".
     </listitem>
     <listitem>
      The migration for {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_condition} works
      similarly. Move the PHP code into a separate function/method and call it using the callback
      prefix "#".
     </listitem>
    </itemizedlist>
  </para>
 </refsect1>
 
 <refsect1 id="{@id query2xml_factory}">
  <title>XML_Query2XML::factory()</title>
  <para>
    {@link XML_Query2XML::factory() XML_Query2XML::factory}($db)
  </para>
  <para>
   This is the factory method that will return a new instance of {@link XML_Query2XML}.
   The argument passed to the factory method can be an instance of
   {@link http://pear.php.net/package/DB PEAR DB}, 
   {@link http://pear.php.net/package/MDB2 PEAR MDB2} or
   {@link http://adodb.sourceforge.net ADOdb}.
  </para>
  <para>
   Using MDB2 with XML_Query2XML works like this:
   <programlisting role="php">
   <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$mdb2 = MDB2::factory('mysql://root@localhost/Query2XML_Tests');
$query2xml = XML_Query2XML::factory($mdb2);
?>
   ]]>
   </programlisting>
  </para>
  <para>
   The same thing with PEAR DB looks like that:
   <programlisting role="php">
   <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'DB.php';
$db = DB::connect('mysql://root@localhost/Query2XML_Tests');
$query2xml = XML_Query2XML::factory($db);
?>
   ]]>
   </programlisting>
  </para>
  <para>
   And again the same thing with ADOdb:
   <programlisting role="php">
   <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'adodb/adodb.inc.php';
//require_once 'adodb/adodb-exceptions.inc.php';
//require_once 'adodb/adodb-pear.inc.php';
$adodb = ADONewConnection('mysql');
$adodb->Connect('localhost', 'root', '', 'Query2XML_Tests');
$query2xml =& XML_Query2XML::factory($adodb);
?>
   ]]>
   </programlisting>
   Note that XML_Query2XML works with ADOdb with the default error handling (no additional include file),
   error handling using exceptions (adodb-exceptions.inc.php) and error handling using PEAR_Error
   (adodb-pear.inc.php).
  </para>
  <para>
   I would recommend using MDB2 as it can be considered more advanced than DB
   and much better designed and documented than ADOdb.
   But use whichever you like - XML_Query2XML works with all of them.
   For the sake of simplicity all the examples will use PEAR DB.
  </para>
 </refsect1>
 
 <refsect1 id="{@id query2xml_getflatxml}">
  <title>XML_Query2XML::getFlatXML()</title>
  <para>
    {@link XML_Query2XML::getFlatXML() XML_Query2XML::getFlatXML}($sql, $rootTagName = 'root', $rowTagName = 'row')
  </para>
  <para>
    This method transforms the data retrieved by a single SQL query into flat XML data. Pass the SQL SELECT statement
    as first, the root tag's name as second and the row tag's name as third argument.
  </para>
    In most cases you will want to use {@tutorial XML_Query2XML.pkg#query2xml_getxml} instead.
    Please see {@tutorial XML_Query2XML.pkg#casestudies.case01} for an example usage of getFlatXML().
 </refsect1>

 <refsect1 id="{@id query2xml_getxml}">
  <title>XML_Query2XML::getXML()</title>
  <para>
    {@link XML_Query2XML::getXML() XML_Query2XML::getXML}($sql, $options)
  </para>
  <para>
  	This method is the most powerful transformation method. It returns an instance of
  	DomDocument (part of PHP5's DOM XML extension). The records returned by the query/queries will be processed
  	one after another. The $options argument is a rather complex, associative,
  	multi dimensional array. The $sql argument can be a string or as well an associative array.
  </para>
  
  <refsect2 id="{@id sql}">
   <title>$sql</title>
   <para>
    This option is exactly like {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql}: you
    can specify the query with a {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql.simplequeryspecification}
    or a {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql.complexqueryspecification}.
   </para>
   <para>
    Here is an example of a simple query specification (<emphasis>WARNING:</emphasis> to prevent SQL injection
    vulerabilities you should use a complex query specification when dealing with non-static queries like this one):
    <programlisting role="php">
    <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
if (isset($_REQUEST['artistid']) && is_numeric($_REQUEST['artistid'])) {
    $artistid =  $_REQUEST['artistid'];
} else {
    $artistid = 1;
}
$dom = $query2xml->getXML(
  "SELECT * FROM artist WHERE artistid = $artistid",
  array(
    'rootTag' => 'favorite_artist',
    'idColumn' => 'artistid',
    'rowTag' => 'artist',
    'elements' => array(
        'name',
        'birth_year',
        'music_genre' => 'genre'
    )
  )
);
header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
    ]]>
    </programlisting>
    With simple query specifications you have to prevent SQL injection yourself. Here I ensured
    that $artistid is numeric by calling is_numeric().
   </para>
   <para>
    Next we use a {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql.complexqueryspecification}
    and prevent SQL injections by using MDB2's/DB's/ADOdb's prepare() and execute() methods.
    <programlisting role="php">
    <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$artistid = $_REQUEST['artistid'];
$dom = $query2xml->getXML(
  array(
    'data' => array(
        ":$artistid"
    ),
    'query' => 'SELECT * FROM artist WHERE artistid = ?'
  ),
  array(
    'rootTag' => 'favorite_artist',
    'idColumn' => 'artistid',
    'rowTag' => 'artist',
    'elements' => array(
        'name',
        'birth_year',
        'music_genre' => 'genre'
    )
  )
);
header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
    ]]>
    </programlisting>
    The resulting XML data is identical in both cases (given that artistid was submitted as 1):
    <programlisting role="tutorial">
    <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<favorite_artist>
  <artist>
    <name>Curtis Mayfield</name>
    <birth_year>1920</birth_year>
    <music_genre>Soul</music_genre>
  </artist>
</favorite_artist>
    ]]>
    </programlisting>
   </para>
  </refsect2>
    
  <refsect2 id="{@id options_elements}">
   <title>$options['elements']</title>
   <para>
    This option is an array that basically holds column names to include in the XML data as child
    elements. There are two types of element specifications:
    <itemizedlist>
     <listitem>
      {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_elements.simple_element_specifications}
     </listitem>
     <listitem>
      {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_elements.complex_element_specifications}
     </listitem>
    </itemizedlist>
   </para>
   <refsect3 id="{@id simple_element_specifications}">
    <title>Simple Element Specifications</title>
    <para> 
      These allow you to specify elements that have only two properties: a name and a value.
      The column names are the array values. By default the XML element will be named
      after the column. If you're unhappy with that default, you can specify an other element
      name by using it as the array key. The element specification
      <programlisting role="php">
      <![CDATA[
array(
    'COLUMN1',
    'COLUMN2'
);
      ]]>
      </programlisting>
      might therefore result in XML data like this:
      <programlisting role="tutorial">
      <![CDATA[
<COLUMN1>this was the contents of COLUMN1</COLUMN1>
<COLUMN2>this was the contents of COLUMN2</COLUMN2>
      ]]>
      </programlisting>
      while the element specification
      <programlisting role="php">
      <![CDATA[
array(
    'ELEMENT1' => 'COLUMN1',
    'ELEMENT2' => 'COLUMN2'
);
      ]]>
      </programlisting>
      would make the same data appear like this:
      <programlisting role="tutorial">
      <![CDATA[
<ELEMENT1>this was the contents of COLUMN1</ELEMENT1>
<ELEMENT2>this was the contents of COLUMN2</ELEMENT2>
      ]]>
      </programlisting>
    </para>
    <para>
      If you use both, the array key and the array value to specify an element, the array value can be of the following types:
      <itemizedlist>
       <listitem>
        <emphasis>COLUMN NAME</emphasis>: this is the default if not preceeded by ':' or '#'.
        If the column does not exist, an {@link XML_Query2XML_ConfigException} will be thrown.
       </listitem>
       <listitem>
        <emphasis>STATIC TEXT with a : prefix</emphasis>: if the value is preceeded by a colon (':'), it is
        interpreted as static text.
       </listitem>
       <listitem>
        <emphasis>CALLBACK FUNCTION with a # prefix</emphasis>: if the value is preceeded by a pound sign ('#'), it
        is interpreted as a callback function. You can use a regular function (e.g. '#myFunction()') or a static
        method (e.g. '#MyClass::myFunction()'). The current record will be passed to the callback function
        as an associative array. You can also pass additional string arguments to the callback function by specifing
        them within the opening and closing brace; e.g. '#Utils::limit(12)' will result in Util::limit() being
        called with the current record as the first and '12' as the second argument. If you do not want
        to pass additional arguments to the callback function, the opening and closing brace are optional.
       </listitem>
      </itemizedlist>
      All three types can be combined with the <emphasis>CONDITIONAL prefix ?</emphasis>:
      if the value is preceeded by a question mark ('?'), the whole element will be skipped
      if the value equals (==) an empty string. The CONDITIONAL prefix can be combined with all types:
      if you do this you have to write the CONDITIONAL prefix first e.g. '?#', '?:' or '?COLUMN_NAME'.
    <para>
    </para>
      The same syntax can be use for
      {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_value},
      {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_attributes},
      {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql.complexqueryspecification} and
      {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_idcolumn} because the private method
      {@link XML_Query2XML::_applyColumnStringToRecord()} is used in all cases.
    </para>
    <para>
      Let's start out with a very simple example. It will use
      the column name as the XML element name for the first two columns but the
      custom element name 'music_genre' for the column 'genre':
      <programlisting role="php">
      <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
  "SELECT * FROM artist",
  array(
    'rootTag' => 'favorite_artists',
    'idColumn' => 'artistid',
    'rowTag' => 'artist',
    'elements' => array(
        'name',
        'birth_year',
        'music_genre' => 'genre'
    )
  )
);
header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
      ]]>
      </programlisting>
      This results in the following XML data:
      <programlisting role="tutorial">
      <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<favorite_artists>
  <artist>
    <name>Curtis Mayfield</name>
    <birth_year>1920</birth_year>
    <music_genre>Soul</music_genre>
  </artist>
  <artist>
    <name>Isaac Hayes</name>
    <birth_year>1942</birth_year>
    <music_genre>Soul</music_genre>
  </artist>
  <artist>
    <name>Ray Charles</name>
    <birth_year>1930</birth_year>
    <music_genre>Country and Soul</music_genre>
  </artist>
</favorite_artists>
      ]]>
      </programlisting>  
     </para>
     
     <para>
     The following example demonstrates the usage of all different types. The comment element will be skipped if its value == "".
     Same holds true for the genre element which uses the trim'ed version of the value stored in the genre column. 
     The published_century element gets the century calculated using floor. The element "static" has a static value of
     "some static text".
     <programlisting role="php">
     <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
  "SELECT
    *
   FROM
    album al,
    artist ar
   WHERE
    al.artist_id = ar.artistid",
  array(
    'rootTag' => 'albums',
    'idColumn' => 'albumid',
    'rowTag' => 'album',
    'elements' => array(
        'albumid',
        'title',
        'published_year',
        'published_century' => "#Utils::getPublishedYearCentury()",
        'comment' => '?comment',
        'static' => ':some static text',
        'genre' => "?#Utils::trimGenre"
    )
  )
);
header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();

class Utils
{
    function trimGenre($record)
    {
        return trim($record['genre']);
    }
    
    function getPublishedYearCentury($record)
    {
        return floor($record['published_year']/100);
    }
}
?>
      ]]>
      </programlisting>
      The resulting XML data looks like this:
      <programlisting role="tutorial">
      <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<albums>
  <album>
    <albumid>1</albumid>
    <title>New World Order</title>
    <published_year>1990</published_year>
    <published_century>19</published_century>
    <comment>the best ever!</comment>
    <static>some static text</static>
    <genre>Soul</genre>
  </album>
  <album>
    <albumid>2</albumid>
    <title>Curtis</title>
    <published_year>1970</published_year>
    <published_century>19</published_century>
    <comment>that man's got somthin' to say</comment>
    <static>some static text</static>
    <genre>Soul</genre>
  </album>
  <album>
    <albumid>3</albumid>
    <title>Shaft</title>
    <published_year>1972</published_year>
    <published_century>19</published_century>
    <comment>he's the man</comment>
    <static>some static text</static>
    <genre>Soul</genre>
  </album>
</albums>
      ]]>
      </programlisting>
     </para>
    </refsect3>
    <refsect3 id="{@id complex_element_specifications}">
     <title>Complex Element Specifications</title>
     <para>
      A complex element specification consists of an array that can have all options
      that can be present on the root level plus {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql}
      and {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql_options}.
      This allows for complete (and theoretically infinite) nesting. You will need to use it if the
      child element should have attributes or child elements.
     </para>
     <para>
      The following example is like the first one in
      {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_elements.simple_element_specifications}
      with one difference: the XML element 'name' should have the attribute 'type' set to the
      static value 'full_name'. As attributes are not supported by simple elements specifications,
      we have to use a complex element specification for the element 'name':
      <programlisting role="php">
      <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
  "SELECT * FROM artist",
  array(
    'rootTag' => 'favorite_artists',
    'idColumn' => 'artistid',
    'rowTag' => 'artist',
    'elements' => array(
        'name' => array(
            'value' => 'name',
            'attributes' => array(
                'type' => ':full_name'
            )
        ),
        'birth_year',
        'music_genre' => 'genre'
    )
  )
);
header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
      ]]>
      </programlisting>
      This results in the following XML data:
      <programlisting role="tutorial">
      <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<favorite_artists>
  <artist>
    <name type="full_name">Curtis Mayfield</name>
    <birth_year>1920</birth_year>
    <music_genre>Soul</music_genre>
  </artist>
  <artist>
    <name type="full_name">Isaac Hayes</name>
    <birth_year>1942</birth_year>
    <music_genre>Soul</music_genre>
  </artist>
  <artist>
    <name type="full_name">Ray Charles</name>
    <birth_year>1930</birth_year>
    <music_genre>Country and Soul</music_genre>
  </artist>
</favorite_artists>
      ]]>
      </programlisting>  
      </para>
      <para>
       Here is another little example:
       <programlisting role="php">
       <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
    "SELECT * FROM artist LEFT JOIN album ON album.artist_id = artist.artistid",
    array(
        'rootTag' => 'music_library',
        'rowTag' => 'artist',
        'idColumn' => 'artistid',
        'elements' => array(
            'artistid',
            'name',
            'birth_year',
            'birth_place',
            'genre',
            'albums' => array(
              'rootTag' => 'albums',
              'rowTag' => 'album',
              'idColumn' => 'albumid',
              'elements' => array('albumid', 'title', 'published_year')
            )
        )
    )
);
header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
      ]]>
      </programlisting>
      This results in the following XML data:
      <programlisting role="tutorial">
      <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<music_library>
  <artist>
    <artistid>1</artistid>
    <name>Curtis Mayfield</name>
    <birth_year>1920</birth_year>
    <birth_place>Chicago</birth_place>
    <genre>Soul</genre>
    <albums>
      <album>
        <albumid>1</albumid>
        <title>New World Order</title>
        <published_year>1990</published_year>
      </album>
      <album>
        <albumid>2</albumid>
        <title>Curtis</title>
        <published_year>1970</published_year>
      </album>
    </albums>
  </artist>
  <artist>
    <artistid>2</artistid>
    <name>Isaac Hayes</name>
    <birth_year>1942</birth_year>
    <birth_place>Tennessee</birth_place>
    <genre>Soul</genre>
    <albums>
      <album>
        <albumid>3</albumid>
        <title>Shaft</title>
        <published_year>1972</published_year>
      </album>
    </albums>
  </artist>
  <artist>
    <artistid>3</artistid>
    <name>Ray Charles</name>
    <birth_year>1930</birth_year>
    <birth_place>Mississippi</birth_place>
    <genre>Country and Soul</genre>
    <albums />
  </artist>
</music_library>
      ]]>
      </programlisting>  
     </para>
     <para>
      Let's have a closer look at how this works: the records that were retrieved from the database look
      like this (a little simplified):
      <![CDATA[
artistid  name                birth_year  albumid album_title     album_published
-------------------------------------------------------------------------------
1          Curtis Mayfield    1920        1        New World Order  1990          
1          Curtis Mayfield    1920        2        Curtis           1970          
2          Isaac Hayes        1942        3        Shaft            1972          
3          Ray Charles        1930        NULL     NULL             NULL          
      ]]>
      For every record {@link XML_Query2XML::getXML()} called the private method {@link XML_Query2XML::_getNestedXMLRecord()}.
      It did not create two artist tags for Curtis Mayfield because $options['idColumn'] was set
      to 'artistid' and _getNestedXMLRecord() therefor knew that there already was a tag for
      Curtis Mayfield.
     </para>
     <para>
      For a one more example and a detailed explanation of complex child elements that have
      child elements themselves, see {@tutorial XML_Query2XML.pkg#casestudies.case02}.
      For an advanced example, see {@tutorial XML_Query2XML.pkg#casestudies.case05}.
     </para>
    </refsect3>
    <refsect3 id="{@id asterisk_shortcut}">
     <title>Using the Asterisk Shortcut</title>
     <para>
      The asterisk shortcut only works with {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_elements.simple_element_specifications}
      (and {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_attributes.simple_attribute_specifications}).
     </para>
     <para>
      In some scenarios you will just want to use all columns found in the result set
      for {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_elements.simple_element_specifications}.
      This is where the asterisk shortcut can come in very handy. An element specification that
      contains an asterisk (an "asterisk element specification") will be duplicated for each
      column present in the result set ($record). The simplest way of using the asterisk shortcut is this:
      <programlisting role="php">
      <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
  "SELECT * FROM artist",
  array(
    'rootTag' => 'favorite_artists',
    'idColumn' => 'artistid',
    'rowTag' => 'artist',
    'elements' => array(
        '*'
    )
  )
);
header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
      ]]>
      </programlisting>
      As the result set contains the column artistid, name, birth_year, birth_place and genre the XML data will look like this:
      <programlisting role="tutorial">
      <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<favorite_artists>
  <artist>
    <artistid>1</artistid>
    <name>Curtis Mayfield</name>
    <birth_year>1920</birth_year>
    <birth_place>Chicago</birth_place>
    <genre>Soul</genre>
  </artist>
  <artist>
    <artistid>2</artistid>
    <name>Isaac Hayes</name>
    <birth_year>1942</birth_year>
    <birth_place>Tennessee</birth_place>
    <genre>Soul</genre>
  </artist>
  <artist>
    <artistid>3</artistid>
    <name>Ray Charles</name>
    <birth_year>1930</birth_year>
    <birth_place>Mississippi</birth_place>
    <genre>Country and Soul</genre>
  </artist>
</favorite_artists>      
      ]]>
      </programlisting>
      This is because internally, the array
      <programlisting role="php">
      <![CDATA[
'elements' => array(
  '*'
)
      ]]>
      </programlisting>
      is expanded to
      <programlisting role="php">
      <![CDATA[
'elements' => array(
  'artistid',
  'name',
  'birth_year',
  'birth_place',
  'genre'
)
      ]]>
      </programlisting>
     </para>
     <para>
      Think of the asterisk as a variable that will get replaced with each column name found in the relut set:
      <programlisting role="php">
      <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
  "SELECT * FROM artist",
  array(
    'rootTag' => 'favorite_artists',
    'idColumn' => 'artistid',
    'rowTag' => 'artist',
    'elements' => array(
        'TAG_*' => '!return "--" . $record["*"] . "--";'
    )
  )
);
header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
      ]]>
      </programlisting>
      The above code would result in the following data:
      <programlisting role="tutorial">
      <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<favorite_artists>
  <artist>
    <TAG_artistid>--1--</TAG_artistid>
    <TAG_name>--Curtis Mayfield--</TAG_name>
    <TAG_birth_year>--1920--</TAG_birth_year>
    <TAG_birth_place>--Chicago--</TAG_birth_place>
    <TAG_genre>--Soul--</TAG_genre>
  </artist>
  <artist>
    <TAG_artistid>--2--</TAG_artistid>
    <TAG_name>--Isaac Hayes--</TAG_name>
    <TAG_birth_year>--1942--</TAG_birth_year>
    <TAG_birth_place>--Tennessee--</TAG_birth_place>
    <TAG_genre>--Soul--</TAG_genre>
  </artist>
  <artist>
    <TAG_artistid>--3--</TAG_artistid>
    <TAG_name>--Ray Charles--</TAG_name>
    <TAG_birth_year>--1930--</TAG_birth_year>
    <TAG_birth_place>--Mississippi--</TAG_birth_place>
    <TAG_genre>--Country and Soul--</TAG_genre>
  </artist>
</favorite_artists>
      ]]>
      </programlisting>
     </para>
     <para>
      You can also combine a simple element specification containing an asterisk shortcut with other (simple and complex) element specifications.
      The additional element specifications will be treated as an exception to the general rule set up by the asterisk element specification.
      The following code will produce a tag for each column in the result set containing the column's value. The only exeption is the column
      "genre" which we want to be different: the value should be all uppercase:
      <programlisting role="php">
      <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
  "SELECT * FROM artist",
  array(
    'rootTag' => 'favorite_artists',
    'idColumn' => 'artistid',
    'rowTag' => 'artist',
    'elements' => array(
        '*' => '*',
        'genre' => '!return strtoupper($record["genre"]);'
    )
  )
);
header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
      ]]>
      </programlisting>
      The resulting XML data looks like this:
      <programlisting role="tutorial">
      <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<favorite_artists>
  <artist>
    <artistid>1</artistid>
    <name>Curtis Mayfield</name>
    <birth_year>1920</birth_year>
    <birth_place>Chicago</birth_place>
    <genre>SOUL</genre>
  </artist>
  <artist>
    <artistid>2</artistid>
    <name>Isaac Hayes</name>
    <birth_year>1942</birth_year>
    <birth_place>Tennessee</birth_place>
    <genre>SOUL</genre>
  </artist>
  <artist>
    <artistid>3</artistid>
    <name>Ray Charles</name>
    <birth_year>1930</birth_year>
    <birth_place>Mississippi</birth_place>
    <genre>COUNTRY AND SOUL</genre>
  </artist>
</favorite_artists>
      ]]>
      </programlisting>
      This is because internally, the array
      <programlisting role="php">
      <![CDATA[
'elements' => array(
  '*' => '*',
  'genre' => '!return strtoupper($record["genre"]);'
)
      ]]>
      </programlisting>
      is expanded to
      <programlisting role="php">
      <![CDATA[
'elements' => array(
  'artistid',
  'name',
  'birth_year',
  'birth_place',
  'genre' => '!return strtoupper($record["genre"]);'
)
      ]]>
      </programlisting>
      Please keep in mind that this also applies when combining an asterisk element specification with a complex element specification.
      That's way the following code would produce exactly the same XML data:
      <programlisting role="php">
      <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
  "SELECT * FROM artist",
  array(
    'rootTag' => 'favorite_artists',
    'idColumn' => 'artistid',
    'rowTag' => 'artist',
    'elements' => array(
        '*' => '*',
        'genre' => array(
            'value' => '!return strtoupper($record["genre"]);'
        )
    )
  )
);
header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
      ]]>
      </programlisting>
     </para>
     <para>
      If we wanted to include all columns in the XML output except "genre" we could use a little trick:
      <programlisting role="php">
      <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
  "SELECT * FROM artist",
  array(
    'rootTag' => 'favorite_artists',
    'idColumn' => 'artistid',
    'rowTag' => 'artist',
    'elements' => array(
        '*' => '*',
        'genre' => '?:'
    )
  )
);
header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
      ]]>
      </programlisting>
      In the resulting XML data the column "genre" is missing because we used the CONDITIONAL prefix '?' in combination with a static empty text:
      <programlisting role="tutorial">
      <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<favorite_artists>
  <artist>
    <artistid>1</artistid>
    <name>Curtis Mayfield</name>
    <birth_year>1920</birth_year>
    <birth_place>Chicago</birth_place>
  </artist>
  <artist>
    <artistid>2</artistid>
    <name>Isaac Hayes</name>
    <birth_year>1942</birth_year>
    <birth_place>Tennessee</birth_place>
  </artist>
  <artist>
    <artistid>3</artistid>
    <name>Ray Charles</name>
    <birth_year>1930</birth_year>
    <birth_place>Mississippi</birth_place>
  </artist>
</favorite_artists>
      ]]>
      </programlisting>
      The exact same result could of course also be achieved using the "condition" option:
      <programlisting role="php">
      <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
  "SELECT * FROM artist",
  array(
    'rootTag' => 'favorite_artists',
    'idColumn' => 'artistid',
    'rowTag' => 'artist',
    'elements' => array(
        '*' => '*',
        'genre' => array(
            'condition' => 'false'
        )
    )
  )
);
header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
      ]]>
      </programlisting>
     </para>
     <para>
      One final note on the asterisk shortcut: if you explicitly specify a tag name (an array element key) it has to contain an asterisk. The following code
      would cause a {@link XML_Query2XML_ConfigException} to be thrown:
      <programlisting role="php">
      <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
  "SELECT * FROM artist",
  array(
    'rootTag' => 'favorite_artists',
    'idColumn' => 'artistid',
    'rowTag' => 'artist',
    'elements' => array(
        'tag' => '*'
    )
  )
);
header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
      ]]>
      </programlisting>
      This is because expanding
      <programlisting role="php">
      <![CDATA[
'elements' => array(
  'tag' => '*'
)
      ]]>
      </programlisting>
      to
      <programlisting role="php">
      <![CDATA[
'elements' => array(
  'tag' => 'artistid',
  'tag' => 'name',
  'tag' => 'birth_year',
  'tag' => 'birth_place',
  'tag' => 'genre'
)
      ]]>
      </programlisting>
      just makes no sense and therfore "*" is treated as a regular column name - which does not exist in this case!
      The exception's message would read: The column "*" used in the option "elements" does not exist in the result set.
     </para>
    </refsect3>
  </refsect2>
  
    <refsect2 id="{@id options_idcolumn}">
   <title>$options['idColumn']</title>
   <para>
    The name of the column by which a record is identified as unique. This is especially important within a
    {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_elements.complex_element_specifications Complex Element Specification}.
    See there for an example. This option is obligatory at the root level! The idColumn specification can be
    of the following types:
    <itemizedlist>
     <listitem>
      <emphasis>COLUMN NAME</emphasis>: this is the default if not preceeded by ':' or '#'.
      If the column does not exist, an {@link XML_Query2XML_ConfigException} will be thrown.
      The current record (not the one of the parent level) will be used.
     </listitem>
     <listitem>
      <emphasis>STATIC TEXT with a : prefix</emphasis>: if the value is preceeded by a colon (':'), it is
      interpreted as static text.
     </listitem>
     <listitem>
      <emphasis>CALLBACK FUNCTION with a # prefix</emphasis>: if the value is preceeded by a pound sign ('#'), it
        is interpreted as a callback function. You can use a regular function (e.g. '#myFunction()') or a static
        method (e.g. '#MyClass::myFunction()'). The current record will be passed to the callback function
        as an associative array. You can also pass additional string arguments to the callback function by specifing
        them within the opening and closing brace; e.g. '#Utils::limit(12)' will result in Util::limit() being
        called with the current record as the first and '12' as the second argument. If you do not want
        to pass additional arguments to the callback function, the opening and closing brace are optional.
     </listitem>
    </itemizedlist>
    The same syntax (with the additional '?' prefix) can be use for
    {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_value},
    {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_attributes.simple_attribute_specifications},
    {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql.complexqueryspecification} and 
    {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_elements.simple_element_specifications} because the private method
    {@link XML_Query2XML::_applyColumnStringToRecord()} is used in all cases.
   </para>
  </refsect2>
  
  <refsect2 id="{@id options_attributes}">
   <title>$options['attributes']</title>
   <para>
    This option is an array that holds columns to include in the XML data as
    attributes. {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_attributes.simple_attribute_specifications Simple}
    and {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_attributes.complex_attribute_specifications complex} attribute
    specifications are supported.
   </para>
   <refsect3 id="{@id simple_attribute_specifications}">
    <title>Simple Attribute Specifications</title>
    <para>
     It works like
     {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_elements.simple_element_specifications}:
     the column names are the array values. By default the column's value
     will be put into an attribute named after the column. If you're
     unhappy with the default you can specify an other attribute name by using
     it as the array key. As documented for {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_elements.simple_element_specifications}
     the prefixes "?", "!" and ":" can be used.
    </para>
    <para>
     The follwing example will use
     the column name as the attribute name for the first two columns but the
     custom attribute name 'music_genre' for the column 'genre':
     <programlisting role="php">
     <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
  "SELECT * FROM artist",
  array(
    'rootTag' => 'favorite_artists',
    'idColumn' => 'artistid',
    'rowTag' => 'artist',
    'elements' => array(),
    'attributes' => array(
      'name',
      'birth_year',
      'music_genre' => 'genre'
    )
  )
);
header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
     ]]>
     </programlisting>
     This results in the following XML data:
     <programlisting role="tutorial">
     <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<favorite_artists>
  <artist name="Curtis Mayfield" birth_year="1920" music_genre="Soul"/>
  <artist name="Isaac Hayes" birth_year="1942" music_genre="Soul"/>
  <artist name="Ray Charles" birth_year="1930" music_genre="Country and Soul"/>
</favorite_artists>
    ]]>
     </programlisting>
    </para>
   </refsect3>
   <refsect3 id="{@id complex_attribute_specifications}">
    <title>Complex Attribute Specifications</title>
    <para>
     A complex attribute specification consists of an array that must contain
     <itemizedlist>
      <listitem>
      {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_value}: the attribute's value
      </listitem>
     </itemizedlist>
     and optionally can contain
     <itemizedlist>
      <listitem>
      {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_condition}: condition for the inclusion of the attribute
      </listitem>
      <listitem>
      {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql}: allows you to fetch more data
      </listitem>
      <listitem>
      {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql_options}: options for the sql option
      </listitem>
     </itemizedlist>
     The array key used to store the complex attribute specification is always used as the attribute's name.
     Unlike {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_elements.complex_element_specifications}
     complex attribute specifications cannot be nested for obvious reasons. Complex attribute specifications
     should only be used for the following reasons:
     <itemizedlist>
      <listitem>
      the attribute should only be included under a condition that cannot be expressed using the '?' prefix
      within a {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_attributes.simple_attribute_specifications simple attribute specification}
      </listitem>
      <listitem>
      additional data is needed from the database
      </listitem>
     </itemizedlist>
     In all other cases {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_attributes.simple_attribute_specifications}
     should be used as they will make your code run faster.
    </para>
    <para>
     To add a "bornBefore1940" attribute only to those artists that were born before 1940 we could write:
     <programlisting role="php">
     <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
  "SELECT * FROM artist",
  array(
    'rootTag' => 'favorite_artists',
    'idColumn' => 'artistid',
    'rowTag' => 'artist',
    'attributes' => array(
      'name',
      'birth_year',
      'bornBefore1940' => array(
        'value' => ':true',
        'condition' => '$record["birth_year"] < 1940'
      )
    )
  )
);
header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
     ]]>
     </programlisting>
     This results in the following XML data:
     <programlisting role="tutorial">
     <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<favorite_artists>
  <artist birth_year="1920" bornBefore1940="true" name="Curtis Mayfield" />
  <artist birth_year="1942" name="Isaac Hayes" />
  <artist birth_year="1930" bornBefore1940="true" name="Ray Charles" />
</favorite_artists>
    ]]>
     </programlisting>
    </para>
    <para>
     In the next example we want a "firstAlbumTitle" attribute for each artist.
     For the purpose of the example we will not use a single left join but a complex attribute specification with the "sql" option.
     As retrieving more than one record for a single attribute makes no sense 
     {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql_options.single_record} is always automatically set to true when fetching records
     for attributes.
     <programlisting role="php">
     <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
  "SELECT * FROM artist",
  array(
    'rootTag' => 'favorite_artists',
    'idColumn' => 'artistid',
    'rowTag' => 'artist',
    'attributes' => array(
      'name',
      'birth_year',
      'firstAlbumTitle' => array(
        'value' => 'title',
        'sql' => array(
          'data' => array(
            'artistid'
          ),
          'query' => "SELECT * FROM album WHERE artist_id = ? ORDER BY published_year"
        )
      )
    )
  )
);
header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
     ]]>
     </programlisting>
     This results in the following XML data:
     <programlisting role="tutorial">
     <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<favorite_artists>
  <artist birth_year="1920" firstAlbumTitle="Curtis" name="Curtis Mayfield" />
  <artist birth_year="1942" firstAlbumTitle="Shaft" name="Isaac Hayes" />
  <artist birth_year="1930" name="Ray Charles" />
</favorite_artists>
    ]]>
     </programlisting>
     As you can see, the firstAlbumTitle attribute is missing for Ray Charles.
     This is because he does not have any albums in our test database and processing
     the "value" option without any records just makes no sense.
    </para>
    <para>
     In the last example I'd like to demonstrate the use of {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql_options} within
     a complex attribute specification. As stated before, {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql_options.single_record}
     is always automatically set to true - no matter what you assign to it.
     This time, we want a "firstAlbum" attribute that has a value of "TITLE (GENRE)" - remember that
     "genre" is a colum of the artist table while "title" is a column of the album table.
     <programlisting role="php">
     <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
  "SELECT * FROM artist",
  array(
    'rootTag' => 'favorite_artists',
    'idColumn' => 'artistid',
    'rowTag' => 'artist',
    'attributes' => array(
      'name',
      'birth_year',
      'firstAlbum' => array(
        'value' => 'title',
        'value' => '!return $record["title"] . " (" . $record["genre"] . ")";',
        'sql' => array(
          'data' => array(
            'artistid'
          ),
          'query' => "SELECT * FROM album WHERE artist_id = ? ORDER BY published_year"
        ),
        'sql_options' => array(
          'merge_selective' => array('genre')
        )
      )
    )
  )
);
header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
     ]]>
     </programlisting>
     This results in the following XML data:
     <programlisting role="tutorial">
     <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<favorite_artists>
  <artist birth_year="1920" firstAlbum="Curtis (Soul)" name="Curtis Mayfield" />
  <artist birth_year="1942" firstAlbum="Shaft (Soul)" name="Isaac Hayes" />
  <artist birth_year="1930" name="Ray Charles" />
</favorite_artists>
    ]]>
     </programlisting>
    </para>
   </refsect3>
   <refsect3 id="{@id asterisk_shortcut}">
    <title>Using the Asterisk Shortcut</title>
    <para>
     The asterisk shortcut only works with {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_attributes.simple_attribute_specifications}
     (and {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_elements.simple_element_specifications}).
    </para>
    <para>
     Everything said about
     {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_elements.asterisk_shortcut Using the Asterisk Shortcut with simple element specifications}
     applies here to!
     The simplest example of using the asterisk shortcut with the attributes option is as follows:
     <programlisting role="php">
    <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
  "SELECT * FROM artist",
  array(
    'rootTag' => 'favorite_artists',
    'idColumn' => 'artistid',
    'rowTag' => 'artist',
    'attributes' => array(
      '*'
    )
  )
);
header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
    ]]>
    </programlisting>
    This produces this XML data:
    <programlisting role="tutorial">
    <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<favorite_artists>
  <artist artistid="1" birth_place="Chicago" birth_year="1920" genre="Soul" name="Curtis Mayfield" />
  <artist artistid="2" birth_place="Tennessee" birth_year="1942" genre="Soul" name="Isaac Hayes" />
  <artist artistid="3" birth_place="Mississippi" birth_year="1930" genre="Country and Soul" name="Ray Charles" />
</favorite_artists>
    ]]>
    </programlisting>
    </para>
   </refsect3> 
  </refsect2>

  <refsect2 id="{@id options_rowtag}">
   <title>$options['rowTag']</title>
   <para>
    The name of the tag that encloses each record. The default is 'row'.
   </para>
   <para>
    Here goes an example of 'rowTag' being used at the root level:
    <programlisting role="php">
    <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
  "SELECT * FROM artist",
  array(
    'rootTag' => 'favorite_artists',
    'idColumn' => 'artistid',
    'rowTag' => 'artist',
    'elements' => array(
        'name',
        'birth_year',
        'genre'
    )
  )
);
header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
    ]]>
    </programlisting>
    'rowTag' was set to 'artist' therefore the resulting XML data is:
    <programlisting role="tutorial">
    <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<favorite_artists>
  <artist>
    <name>Curtis Mayfield</name>
    <birth_year>1920</birth_year>
    <genre>Soul</genre>
  </artist>
  <artist>
    <name>Isaac Hayes</name>
    <birth_year>1942</birth_year>
    <genre>Soul</genre>
  </artist>
  <artist>
    <name>Ray Charles</name>
    <birth_year>1930</birth_year>
    <genre>Country and Soul</genre>
  </artist>
</favorite_artists>
    ]]>
    </programlisting>
   </para>
   <para>
    Now let's have a look at a more advanced example:
    <programlisting role="php">
    <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
    "SELECT
        *
     FROM
        artist
        LEFT JOIN album ON album.artist_id = artist.artistid",
    array(
        'rootTag' => 'music_library',
        'rowTag' => 'artist',
        'idColumn' => 'artistid',
        'elements' => array(
            'artistid',
            'name',
            'birth_year',
            'birth_place',
            'genre',
            'albums' => array(
                'rootTag' => 'albums',
                'rowTag' => 'album',
                'idColumn' => 'albumid',
                'elements' => array(
                    'albumid',
                    'title',
                    'published_year',
                    'comment'
                )
            )
        )
    )
);

header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
    ]]>
    </programlisting>
    Here 'rowTag' on the root level is set to 'artist' while ['elements']['albums']['rowTag']
    is set to 'album'. This example is taken from {@tutorial XML_Query2XML.pkg#casestudies.case02},
    so please see there for the resulting XML data.
   </para>
   <para>
    In some situations, 'rowTag' can be omitted at all:
    <programlisting role="php">
    <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
  "SELECT * FROM artist",
  array(
    'rootTag' => 'favorite_artists',
    'idColumn' => 'artistid',
    'rowTag' => 'artist',
    'elements' => array(
        'name' => array(
            'value' => 'name',
            'attributes' => array(
                'type' => ':full_name'
            )
        ),
        'birth_year',
        'music_genre' => 'genre'
    )
  )
);
header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
    ]]>
    </programlisting>
    Here the complex element definition ['elements']['name'] has no 'rowTag' option. This is alright
    because the specification's array key ('name' in this case) is used by default.
   </para>
  </refsect2>
  
  <refsect2 id="{@id options_mapper}">
   <title>$options['mapper']</title>
   <para>
    This option allows you to specifiy a function for mapping SQL identifiers to XML names.
    Whenever you use a {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_elements.simple_element_specifications Simple Element Specification}
    or a {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_attributes.simple_attribute_specifications Simple Attribute Specification}
    only with a column name and without a tag/attribute name, the specified column name will be used for the
    tag/attribute name. Please note that mapping is also performed when the
    {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_elements.asterisk_shortcut} is used.
    Per default $options['mapper'] is set to false which means that no special mapping is used.
    $options['mapper'] can have one of the following formats:
    <itemizedlist>
      <listitem>
       <emphasis>'CLASS::STATIC_METHOD'</emphasis>: this syntax allows you to use a static method
       for mapping:
       <programlisting role="php">
       <![CDATA[
'mapper' => 'MyMapper::map'
       ]]>
       </programlisting>
      </listitem>
      <listitem>
       <emphasis>array('CLASS', 'STATIC_METHOD')</emphasis>: this syntax also allows you to use a static
       method for mapping:
       <programlisting role="php">
       <![CDATA[
'mapper' => array('MyMapper', 'map')
       ]]>
       </programlisting>
      </listitem>
      <listitem>
       <emphasis>array($instance, 'METHOD')</emphasis>: this syntax allows you to use a non-static
       method for mapping:
       <programlisting role="php">
       <![CDATA[
'mapper' => array($myMap, 'map')
       ]]>
       </programlisting>
      </listitem>
      <listitem>
       <emphasis>'FUNCTION'</emphasis>: this syntax allows you to use a regular function
       for mapping:
       <programlisting role="php">
       <![CDATA[
'mapper' => 'myUppercaseMapper'
       ]]>
       </programlisting>
      </listitem>
      <listitem>
       <emphasis>false</emphasis>: use the boolean value false (or any other value that == false) to
       deactivate any special mapping:
       <programlisting role="php">
       <![CDATA[
'mapper' => false
       ]]>
       </programlisting>
      </listitem>
    </itemizedlist>
    Remember that the mapping only applies to
    {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_elements.simple_element_specifications}
    and {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_attributes.simple_attribute_specifications}
    that do not explicitly have a tag/attribute name or those that have a tag/attribute name that contains
    an {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_elements.asterisk_shortcut asterisk shortcut}.
    The following example will also show that a mapper defined at the root level is also used at all lower levels
    (unless it gets overwritten, see
    {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_mapper.multiple_mappers}):
    <programlisting role="php">
     <![CDATA[
<?php
class SomeMapper
{
    public function map($str)
    {
        //do something with $str
        return $str;
    }
}

require_once 'XML/Query2XML.php';
require_once 'XML/Query2XML/ISO9075Mapper.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(           //
  "SELECT * FROM artist",            //
  array(                             //
    'rootTag' => 'favorite_artists', //no mapping
    'idColumn' => 'artistid',        //nothing to map
    'rowTag' => 'artist',            //no mapping
    'mapper' => 'SomeMapper::map',   //
    'elements' => array(             //
      'artistid',                 //mapping
      'NAME' => 'name',           //no mapping as the tag name is specified
      '*',                        //mapping
      'TAG_*' => '*',             //does a mapping too!
      'albums' => array(          //nothing to map
        'sql' => array(           //
          'data' => array(        //
            'artistid'            //nothing to map
          ),                      //
          'query' => 'SELECT * FROM album WHERE artist_id = ?'      //
        ),                      //
        'rootTag' => 'albums',  //no mapping
        'rowTag' => 'album',    //no mapping
        'idColumn' => 'albumid',//nothing to map
        'elements' => array(    //
          'albumid',          //mapping using the mapper specified at the root level
          'title',            //mapping using the mapper specified at the root level
          'published_year',   //mapping using the mapper specified at the root level
          'comment'           //mapping using the mapper specified at the root level
        )                     //
      )                       //
    ),                        //
    'attributes' => array(        //
      'artistid',                 //mapping
      'NAME' => 'name',           //no mapping as the tag name is specified
      '*',                        //mapping
      'TAG_*' => '*'              //does a mapping too!
    )                             //
  )                               //
);                                //
header('Content-Type: application/xml');    //
print $dom->saveXML();                      //
?>
     ]]>
     </programlisting>
     
   </para>
   
   <refsect3 id="{@id 9075mapping}">
    <title>Mapping SQL identifiers to XML names in accordance with ISO/IEC 9075-14:2005</title>
    <para>
     The package XML_Query2XML also implements the Final Committee Draft for ISO/IEC 9075-14:2005,
     section "9.1 Mapping SQL &lt;identifier&gt;s to XML Names". ISO/IEC 9075-14:2005 is available
     online at {@link http://www.sqlx.org/SQL-XML-documents/5FCD-14-XML-2004-07.pdf}.
    </para>
    <para>
     A lot of characters are legal in SQL identifiers but cannot be used within
     XML names. To begin with, SQL identifiers can contain any Unicode character
     while XML names are limited to a certain set of characters. E.g the
     SQL identifier "&lt;21yrs in age" obviously is not a valid XML name.
     '#', '{', and '}' are also not allowed. Fully escaped SQL identifiers
     also must not contain a column (':') or start with "xml" (in any case
     combination). Illegal characters are mapped to a string of the form
     _xUUUU_ where UUUU is the Unicode value of the character.
    </para>
    <para>
     The following is a table of example mappings:
     <![CDATA[
+----------------+------------------------+------------------------------------+
| SQL-Identifier | Fully escaped XML name | Comment                            |
+----------------+------------------------+------------------------------------+
| dept:id        | dept_x003A_id          | ":" is illegal                     |
| xml_name       | _x0078_ml_name         | must not start with [Xx][Mm][Ll]   |
| XML_name       | _x0058_ML_name         | must not start with [Xx][Mm][Ll]   |
| hire date      | hire_x0020_date        | space is illegal too               |
| Works@home     | Works_x0040_home       | "@" is illegal                     |
| file_xls       | file_x005F_xls         | "_" gets mapped if followed by "x" |
| FIRST_NAME     | FIRST_NAME             | no problem here                    |
+----------------+------------------------+------------------------------------+
     ]]>
    </para>
    <para>
     The ISO 9075-mapping does produce some overhead which might not be needed in
     a lot of situations. Therefore it is not the default mapper. In most cases
     it will be sufficient to validate your XML schema once using tools like the free
     {@link http://www.altova.com/download_spy_home.html XMLSpy Home Edition}.
    </para>
    <para>
     To use the ISO 9075-mapper that comes with XML_Query2XML you have to:
     <itemizedlist>
      <listitem>
       make sure that {@link http://pear.php.net/package/I18N_UnicodeString PEAR I18N_UnicodeString}
       is installed - see {@tutorial XML_Query2XML.pkg#requirements}.
      </listitem>
      <listitem>
       require XML/Query2XML/ISO9075Mapper.php
      </listitem>
      <listitem>
       set the option "mapper" to "XML_Query2XML_ISO9075Mapper::map"
      </listitem>
     </itemizedlist>
     Here goes an example:
     <programlisting role="php">
     <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'XML/Query2XML/ISO9075Mapper.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
  "SELECT * FROM artist",
  array(
    'rootTag' => 'favorite_artists',
    'idColumn' => 'artistid',
    'rowTag' => 'artist',
    'mapper' => 'XML_Query2XML_ISO9075Mapper::map',
    'elements' => array(
        '*'
    )
  )
);
header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
     ]]>
     </programlisting>
    </para>
   </refsect3>
   <refsect3 id="{@id own_mappers}">
    <title>Building your own mappers</title>
    <para>
     There are cases when you will want the tag and attribute names to be somehow different from
     the column names. Let's say you want to use the column names as tag and attribute names
     but make them all uppercase. Certainly you could write code like this:
     <programlisting role="php">
     <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'XML/Query2XML/ISO9075Mapper.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
  "SELECT * FROM artist",
  array(
    'rootTag' => 'favorite_artists',
    'idColumn' => 'artistid',
    'rowTag' => 'artist',
    'elements' => array(
        'NAME' => 'name',
        'BIRTH_YEAR' => 'birth_year',
        'BIRTH_PLACE' => 'birth_place',
        'GENRE' => 'genre',
    ),
    'attributes' => array(
        'ARTISTID' => 'artistid'
    )
  )
);
header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
     ]]>
     </programlisting>
     But that seems a little redundant, doesn't it? In cases like these it is recommended
     to write your own mapper. As we want to write OO code we don't implement our mapper
     as a function but as a static public method of the new class UppercaseMapper. The
     mapper must take a string as an argument and must return a string:
     <programlisting role="php">
     <![CDATA[
<?php
class UppercaseMapper
{
    public function map($str)
    {
        return strtoupper($str);
    }
}

require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
  "SELECT * FROM artist",
  array(
    'rootTag' => 'favorite_artists',
    'idColumn' => 'artistid',
    'rowTag' => 'artist',
    'mapper' => 'UppercaseMapper::map',
    'elements' => array(
        'name',
        'birth_year',
        'birth_place',
        'genre',
    ),
    'attributes' => array(
        'artistid'
    )
  )
);
header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
     ]]>
     </programlisting>
     The resulting XML data looks like this:
     <programlisting role="tutorial">
     <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<favorite_artists>
  <artist ARTISTID="1">
    <NAME>Curtis Mayfield</NAME>
    <BIRTH_YEAR>1920</BIRTH_YEAR>
    <BIRTH_PLACE>Chicago</BIRTH_PLACE>
    <GENRE>Soul</GENRE>
  </artist>
  <artist ARTISTID="2">
    <NAME>Isaac Hayes</NAME>
    <BIRTH_YEAR>1942</BIRTH_YEAR>
    <BIRTH_PLACE>Tennessee</BIRTH_PLACE>
    <GENRE>Soul</GENRE>
  </artist>
  <artist ARTISTID="3">
    <NAME>Ray Charles</NAME>
    <BIRTH_YEAR>1930</BIRTH_YEAR>
    <BIRTH_PLACE>Mississippi</BIRTH_PLACE>
    <GENRE>Country and Soul</GENRE>
  </artist>
</favorite_artists>
     ]]>
     </programlisting>
    </para>
   </refsect3>
   <refsect3 id="{@id multiple_mappers}">
    <title>Using multiple mappers</title>
    <para>
     Let's say we want to force all tags corresponding to columns of the artist table to be uppercase
     and all tags corresponding to columns of the album table to be lowercase. This can be done
     using two mappers:
     <programlisting role="php">
     <![CDATA[
<?php
class MyMappers
{
    public function uppercaseMapper($str)
    {
        return strtoupper($str);
    }
    
    public function lowercaseMapper($str)
    {
        return strtolower($str);
    }
}

require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
    "SELECT
        *
     FROM
        artist",
    array(
        'rootTag' => 'music_library',
        'rowTag' => 'artist',
        'idColumn' => 'artistid',
        'mapper' => 'MyMappers::uppercaseMapper',
        'elements' => array(
            '*',
            'albums' => array(
                'sql' => array(
                    'data' => array(
                        'artistid'
                    ),
                    'query' => 'SELECT * FROM album WHERE artist_id = ?'
                ),
                'rootTag' => 'albums',
                'rowTag' => 'album',
                'idColumn' => 'albumid',
                'mapper' => 'MyMappers::lowercaseMapper',
                'elements' => array(
                    '*',
                    'artist_id' => '?:'
                )
            )
        )
    )
);
header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
     ]]>
     </programlisting>
     As we know that the columns of the album table already are lowercase we could as well
     use one mapper and just deactivate that for the complex element "albums':
     <programlisting role="php">
     <![CDATA[
<?php
class MyMappers
{
    public function uppercaseMapper($str)
    {
        return strtoupper($str);
    }
}

require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
    "SELECT
        *
     FROM
        artist",
    array(
        'rootTag' => 'music_library',
        'rowTag' => 'artist',
        'idColumn' => 'artistid',
        'mapper' => 'MyMappers::uppercaseMapper',
        'elements' => array(
            '*',
            'albums' => array(
                'sql' => array(
                    'data' => array(
                        'artistid'
                    ),
                    'query' => 'SELECT * FROM album WHERE artist_id = ?'
                ),
                'rootTag' => 'albums',
                'rowTag' => 'album',
                'idColumn' => 'albumid',
                'mapper' => false,
                'elements' => array(
                    '*',
                    'artist_id' => '?:'
                )
            )
        )
    )
);
header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
     ]]>
     </programlisting>
     In both cases the resulting XML data will look like this:
     <programlisting role="tutorial">
     <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<music_library>
  <artist>
    <ARTISTID>1</ARTISTID>
    <NAME>Curtis Mayfield</NAME>
    <BIRTH_YEAR>1920</BIRTH_YEAR>
    <BIRTH_PLACE>Chicago</BIRTH_PLACE>
    <GENRE>Soul</GENRE>
    <albums>
      <album>
        <albumid>1</albumid>
        <title>New World Order</title>
        <published_year>1990</published_year>
        <comment>the best ever!</comment>
      </album>
      <album>
        <albumid>2</albumid>
        <title>Curtis</title>
        <published_year>1970</published_year>
        <comment>that man's got somthin' to say</comment>
      </album>
    </albums>
  </artist>
  <artist>
    <ARTISTID>2</ARTISTID>
    <NAME>Isaac Hayes</NAME>
    <BIRTH_YEAR>1942</BIRTH_YEAR>
    <BIRTH_PLACE>Tennessee</BIRTH_PLACE>
    <GENRE>Soul</GENRE>
    <albums>
      <album>
        <albumid>3</albumid>
        <title>Shaft</title>
        <published_year>1972</published_year>
        <comment>he's the man</comment>
      </album>
    </albums>
  </artist>
  <artist>
    <ARTISTID>3</ARTISTID>
    <NAME>Ray Charles</NAME>
    <BIRTH_YEAR>1930</BIRTH_YEAR>
    <BIRTH_PLACE>Mississippi</BIRTH_PLACE>
    <GENRE>Country and Soul</GENRE>
    <albums />
  </artist>
</music_library>
     ]]>
     </programlisting>
    </para>
   </refsect3>
  </refsect2>
  
  <refsect2 id="{@id options_roottag}">
   <title>$options['rootTag']</title>
   <para>
    The name of the root tag that encloses all other tags. On the root level, the default is 'root'.
    On all other levels omitting the rootTag option means that the row tags will not be enclosed by
    a root tag but will directly be placed inside the parent tag.
   </para>
   <para>
    Here goes an example of 'rootTag' being used at the root level:
    <programlisting role="php">
    <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
  "SELECT * FROM artist",
  array(
    'rootTag' => 'favorite_artists',
    'idColumn' => 'artistid',
    'rowTag' => 'artist',
    'elements' => array(
        'name',
        'birth_year',
        'genre'
    )
  )
);
header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
    ]]>
    </programlisting>
    'rootTag' was set to 'favorite_artists'. The resulting XML data therefore is:
    <programlisting role="tutorial">
    <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<favorite_artists>
    <artist>
        <name>Curtis Mayfield</name>
        <birth_year>1920</birth_year>
        <genre>Soul</genre>
    </artist>
    <artist>
        <name>Isaac Hayes</name>
        <birth_year>1942</birth_year>
        <genre>Soul</genre>
    </artist>
    <artist>
        <name>Ray Charles</name>
        <birth_year>1930</birth_year>
        <genre>Country and Soul</genre>
    </artist>
</favorite_artists>
    ]]>
    </programlisting>
   </para>
   <para>
    Here goes an example with the rootTag being used at a lower level:
    <programlisting role="php">
    <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
    "SELECT
        *
     FROM
        artist
        LEFT JOIN album ON album.artist_id = artist.artistid",
    array(
        'rootTag' => 'music_library',
        'rowTag' => 'artist',
        'idColumn' => 'artistid',
        'elements' => array(
            'artistid',
            'name',
            'birth_year',
            'birth_place',
            'genre',
            'albums' => array(
                'rootTag' => 'albums',
                'rowTag' => 'album',
                'idColumn' => 'albumid',
                'elements' => array(
                    'albumid',
                    'title',
                    'published_year',
                    'comment'
                )
            )
        )
    )
);

header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
    ]]>
    </programlisting>
    ['elements']['albums']['rootTag'] is set to 'albums'. Therefore all 'album' tags of a single
    artist will be enclosed by a singel 'albums' tag. This example is actually taken from
    {@tutorial XML_Query2XML.pkg#casestudies.case02}, so please see there for the resulting XML data.
   </para>
   <para>
    As shown in {@tutorial XML_Query2XML.pkg#casestudies.case04} is is also possible to assign
    an empty string to the rootTag option or to omit it at all. In our case this results in
    all the album tags not being surrounded by a single 'albums' tag but being directly placed
    inside the 'artist' tag:
    <programlisting role="php">
    <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
    "SELECT
        *
     FROM
        artist
        LEFT JOIN album ON album.artist_id = artist.artistid",
    array(
        'rootTag' => 'music_library',
        'rowTag' => 'artist',
        'idColumn' => 'artistid',
        'elements' => array(
            'artistid',
            'name',
            'birth_year',
            'birth_place',
            'genre',
            'albums' => array(
                'rowTag' => 'album',
                'idColumn' => 'albumid',
                'elements' => array(
                    'albumid',
                    'title',
                    'published_year',
                    'comment'
                )
            )
        )
    )
);

header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
    ]]>
    </programlisting>
    The resulting XML looks like this:
    <programlisting role="tutorial">
    <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<music_library>
  <artist>
    <artistid>1</artistid>
    <name>Curtis Mayfield</name>
    <birth_year>1920</birth_year>
    <birth_place>Chicago</birth_place>
    <genre>Soul</genre>
    <album>
      <albumid>1</albumid>
      <title>New World Order</title>
      <published_year>1990</published_year>
      <comment>the best ever!</comment>
    </album>
    <album>
      <albumid>2</albumid>
      <title>Curtis</title>
      <published_year>1970</published_year>
      <comment>that man's got somthin' to say</comment>
    </album>
  </artist>
  <artist>
    <artistid>2</artistid>
    <name>Isaac Hayes</name>
    <birth_year>1942</birth_year>
    <birth_place>Tennessee</birth_place>
    <genre>Soul</genre>
    <album>
      <albumid>3</albumid>
      <title>Shaft</title>
      <published_year>1972</published_year>
      <comment>he's the man</comment>
    </album>
  </artist>
  <artist>
    <artistid>3</artistid>
    <name>Ray Charles</name>
    <birth_year>1930</birth_year>
    <birth_place>Mississippi</birth_place>
    <genre>Country and Soul</genre>
  </artist>
</music_library>
    ]]>
    </programlisting>
   <para>
   </para>
    Note however that a hidden child element is used as a container
    to ensure the order of the generated XML elements. Internally all elements with a name
    that starts with '__' are hidden. An explicit definition of the hidden complex element would look
    like this:
    <programlisting role="php">
    <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
    "SELECT
        *
     FROM
        artist
        LEFT JOIN album ON album.artist_id = artist.artistid",
    array(
        'rootTag' => 'music_library',
        'rowTag' => 'artist',
        'idColumn' => 'artistid',
        'elements' => array(
            'artistid',
            'name',
            'birth_year',
            'birth_place',
            'genre',
            'albums' => array(
                'rootTag' => '__albums',
                'rowTag' => 'album',
                'idColumn' => 'albumid',
                'elements' => array(
                    'albumid',
                    'title',
                    'published_year',
                    'comment'
                )
            )
        )
    )
);

header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
    ]]>
    </programlisting>
   </para>
  </refsect2>
  
  <refsect2 id="{@id options_value}">
   <title>$options['value']</title>
   <para>
    The value of the XML element. The specification can be of the following types:
     <itemizedlist>
      <listitem>
       <emphasis>COLUMN NAME</emphasis>: this is the default if not preceeded by ':' or '#'.
       If the column does not exist, an {@link XML_Query2XML_ConfigException} will be thrown.
      </listitem>
      <listitem>
       <emphasis>STATIC TEXT with a : prefix</emphasis>: if the value is preceeded by a colon (':'), it is
       interpreted as static text.
      </listitem>
      <listitem>
       <emphasis>CALLBACK FUNCTION with a # prefix</emphasis>: if the value is preceeded by a pound sign ('#'), it
        is interpreted as a callback function. You can use a regular function (e.g. '#myFunction()') or a static
        method (e.g. '#MyClass::myFunction()'). The current record will be passed to the callback function
        as an associative array. You can also pass additional string arguments to the callback function by specifing
        them within the opening and closing brace; e.g. '#Utils::limit(12)' will result in Util::limit() being
        called with the current record as the first and '12' as the second argument. If you do not want
        to pass additional arguments to the callback function, the opening and closing brace are optional.
      </listitem>
     </itemizedlist>
     All three types can be combined with the <emphasis>CONDITIONAL prefix ?</emphasis>:
     if the value is preceeded by a question mark ('?'), the whole element will be skipped
     if the value equals (==) an empty string. The CONDITIONAL prefix can be combined with all types:
     if you do this you have to write the CONDITIONAL prefix first e.g. '?#', '?:' or '?COLUMN_NAME'.
     
     The same syntax can be use for
     {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_elements.simple_element_specifications},
     {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_attributes.simple_attribute_specifications},
     {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql.complexqueryspecification} and
     {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_idcolumn} because the private method
     {@link XML_Query2XML::_applyColumnStringToRecord()} is used in all cases.
   </para>
   <para>
     The following example demonstrates the usage of all types. The comment element will be skipped if its value == "".
     Same holds true for the genre element which uses the trim'ed version of the value stored in the genre column. The comment
     tag has an attribute named type with a static value of "short text". The published_century element gets the century
     calculated using floor and has the attribute digitCount with a static value of 2.

     <programlisting role="php">
     <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
  "SELECT
    *
   FROM
    album al,
    artist ar
   WHERE
    al.artist_id = ar.artistid",
  array(
    'rootTag' => 'albums',
    'idColumn' => 'albumid',
    'rowTag' => 'album',
    'elements' => array(
        'albumid',
        'title',
        'published_year',
        'published_century' => array(
            'value' => "#Utils::getPublishedYearCentury()",
            'attributes' => array(
                'digitCount' => ':2'
            )
        ),
        'comment' => array(
            'value' => '?comment',
            'attributes' => array(
                'type' => ':short text'
            )
        ),
        'genre' => array(
            'value' => "?#Utils::trimGenre()"
        )
    )
  )
);
header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();

class Utils
{
    function trimGenre($record)
    {
        return trim($record['genre']);
    }
    
    function getPublishedYearCentury($record)
    {
        return floor($record['published_year']/100);
    }
}
?>
     ]]>
     </programlisting>
     The resulting XML data looks like this:
     <programlisting role="tutorial">
     <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<albums>
  <album>
    <albumid>1</albumid>
    <title>New World Order</title>
    <published_year>1990</published_year>
    <published_century digitCount="2">19</published_century>
    <comment type="short text">the best ever!</comment>
    <genre>Soul</genre>
  </album>
  <album>
    <albumid>2</albumid>
    <title>Curtis</title>
    <published_year>1970</published_year>
    <published_century digitCount="2">19</published_century>
    <comment type="short text">that man's got somthin' to say</comment>
    <genre>Soul</genre>
  </album>
  <album>
    <albumid>3</albumid>
    <title>Shaft</title>
    <published_year>1972</published_year>
    <published_century digitCount="2">19</published_century>
    <comment type="short text">he's the man</comment>
    <genre>Soul</genre>
  </album>
</albums>
     ]]>
     </programlisting>
   </para>
  </refsect2>
  
  <refsect2 id="{@id options_condition}">
   <title>$options['condition']</title>
   <para>
    This option allows you to specify a condition for the element to be included.
    The string assigned to the condition option can be of the following types:
      <itemizedlist>
       <listitem>
        <emphasis>COLUMN NAME</emphasis>: this is the default if not preceeded by ':' or '#'.
        If the column does not exist, an {@link XML_Query2XML_ConfigException} will be thrown.
        Remember that the string '0' or '' will both evaluate to false which
        means that the element would be skipped. Note: in most cases you will be much
        better off changing your WHERE clause than using this type of condition.
       </listitem>
       <listitem>
        <emphasis>STATIC TEXT with a : prefix</emphasis>: if the value is preceeded by a colon (':'), it is
        interpreted as static text. Remember that the string '0' or '' will both evaluate to false which
        means that the element would be skipped.
       </listitem>
       <listitem>
        <emphasis>CALLBACK FUNCTION with a # prefix</emphasis>: if the value is preceeded by a pound sign ('#'), it
        is interpreted as a callback function. You can use a regular function (e.g. '#myFunction()') or a static
        method (e.g. '#MyClass::myFunction()'). The current record will be passed to the callback function
        as an associative array. You can also pass additional string arguments to the callback function by specifing
        them within the opening and closing brace; e.g. '#Utils::limit(12)' will result in Util::limit() being
        called with the current record as the first and '12' as the second argument. If you do not want
        to pass additional arguments to the callback function, the opening and closing brace are optional.
       </listitem>
      </itemizedlist>
    
    This option provides a similar function as the "?" prefix for column specifications - see 
    {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_elements.simple_element_specifications},
    {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_attributes.simple_attribute_specifications} and {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_value}.
    The difference is that $options['condition'] is more powerful: you can call any external function you like
    to determin whether the element shall be included.
    Here goes a little example:
    <programlisting role="php">
    <![CDATA[
<?php
if (isset($_REQUEST['includeCondition'])) {
    $includeCondition = ($_REQUEST['includeCondition'] == '1');
} else {
    $includeCondition = false;
}
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom =& $query2xml->getXML(
    "SELECT
        *
     FROM
        artist
        LEFT JOIN album ON album.artist_id = artist.artistid",
    array(
        'rootTag' => 'music_library',
        'rowTag' => 'artist',
        'idColumn' => 'artistid',
        'elements' => array(
            'artistid',
            'name',
            'birth_year',
            'birth_place',
            'genre',
            'albums' => array(
                'rootTag' => 'albums',
                'rowTag' => 'album',
                'idColumn' => 'albumid',
                'condition' => '#isSpecialPublishedYear()',
                'elements' => array(
                    'albumid',
                    'title',
                    'published_year',
                    'comment' => array(
                        'value' => 'comment',
                        'condition' => ':' . ($includeCondition ? '1' : '0')
                    )
                )
            )
        )
    )
);
header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();

/**Returns whether $year is 1970 or 1972.
*/
function isSpecialPublishedYear($record)
{
    //do some highly complex calculations ...
    return $record['published_year'] == 1970 || $record['published_year'] == 1972;
}
?>
    ]]>
    </programlisting>
    The resulting XML data is:
    <programlisting role="tutorial">
    <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<music_library>
  <artist>
    <artistid>1</artistid>
    <name>Curtis Mayfield</name>
    <birth_year>1920</birth_year>
    <birth_place>Chicago</birth_place>
    <genre>Soul</genre>
    <albums>
      <album>
        <albumid>2</albumid>
        <title>Curtis</title>
        <published_year>1970</published_year>
      </album>
    </albums>
  </artist>
  <artist>
    <artistid>2</artistid>
    <name>Isaac Hayes</name>
    <birth_year>1942</birth_year>
    <birth_place>Tennessee</birth_place>
    <genre>Soul</genre>
    <albums>
      <album>
        <albumid>3</albumid>
        <title>Shaft</title>
        <published_year>1972</published_year>
      </album>
    </albums>
  </artist>
  <artist>
    <artistid>3</artistid>
    <name>Ray Charles</name>
    <birth_year>1930</birth_year>
    <birth_place>Mississippi</birth_place>
    <genre>Country and Soul</genre>
    <albums />
  </artist>
</music_library>
    ]]>
    </programlisting>
   </para>
   <para>
    Note that (if present) {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql} will
    get processed *before* evaluating the condition. This allows you to wirte code
    like the following:
    <programlisting role="php">
    <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
  "SELECT
    *
   FROM
    artist",
  array(
    'rootTag' => 'artists',
    'idColumn' => 'artistid',
    'rowTag' => 'artist',
    'elements' => array(
        'artistid',
        'name',
        'albums' => array(
            'idColumn' => 'albumid',
            'sql' => array(
                'data' => array(
                    'artistid'
                ),
                'query' => "SELECT * FROM album WHERE artist_id = ?",
            ),
            'condition' => '#isGT1980()',
            'elements' => array(
                'title',
                'published_year'
            )
        )
    )
  )
);
header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();

function isGT1980($record)
{
    return $record['published_year'] > 1980;
}
?>
    ]]>
    </programlisting>
    "published_year" is a column of the table album but as the "sql" option is processed before evaluating
    the "condition" option everything works just fine:
    <programlisting role="tutorial">
    <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<artists>
  <artist>
    <artistid>1</artistid>
    <name>Curtis Mayfield</name>
    <albums>
      <title>New World Order</title>
      <published_year>1990</published_year>
    </albums>
  </artist>
  <artist>
    <artistid>2</artistid>
    <name>Isaac Hayes</name>
  </artist>
  <artist>
    <artistid>3</artistid>
    <name>Ray Charles</name>
  </artist>
</artists>
    ]]>
    </programlisting>
   </para>
  </refsect2>
   
  <refsect2 id="{@id options_sql}">
   <title>$options['sql']</title>
   <para>
    This and {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql_options} are the only options
    that can only be present within
    {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_elements.complex_element_specifications}.
    If given at the root level, it would be just ignored. $options['sql'] allows you to split
    up one huge JOIN into multiple smaller queries. You might want (or have) to do this in
    several scenarios:
    <itemizedlist>
     <listitem>
      Your RDBMS has a maximum number of fields it can return in a single query and you've reached it.
     </listitem>
     <listitem>
      You are short on memory: let's say your big JOIN returns 100 fields and you have 10 000 records.
      It might turn out that the memory consumption is lower if you split up the single big JOIN into
      multiple quieres that have smaller result sets. As all the data won't be in memory at once,
      it might even run faster.
     </listitem>
     <listitem>
      You are too lazy to think about how to best join these 8 tables :)
     </listitem>
    </itemizedlist>
    You will definitively want to do some {@tutorial XML_Query2XML.pkg#profiling} before deciding whether
    or not to split up one big JOIN into multiple smaller JOINs.
   </para>
   <para>
    There are two ways of specifying $options['sql']:
    <itemizedlist>
     <listitem>
      {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql.simplequeryspecification}: uses DB::query/MDB2::query - use it with care
     </listitem>
     <listitem>
      {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql.complexqueryspecification}: uses
      {@link http://pear.php.net/manual/en/package.database.db.intro-execute.php DB::prepare and DB::execute}
      or MDB2::prepare and MDB2::execute and
      therefore can prevent SQL injection and is also faster in most scenarios
     </listitem>
    </itemizedlist>
   </para>
   <refsect3 id="{@id simplequeryspecification}">
    <title>Simple Query Specification</title>
    <para>
     Since v0.8.0 a simple query specifications are purely static strings (in most cases
     you will want to use a {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql.complexqueryspecification}):
     <programlisting role="php">
     <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
    "SELECT
        *
     FROM
        artist
     WHERE
        artistid = 1",
    array(
        'rootTag' => 'music_library',
        'rowTag' => 'artist',
        'idColumn' => 'artistid',
        'elements' => array(
            'artistid',
            'name',
            'birth_year',
            'birth_place',
            'genre',
            'albums' => array(
                'sql' => 'SELECT * FROM album WHERE artist_id = 1',
                'rootTag' => 'albums',
                'rowTag' => 'album',
                'idColumn' => 'albumid',
                'elements' => array(
                    'albumid',
                    'title',
                    'published_year',
                    'comment'
                )
            )
        )
    )
);

header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
     ]]>
    </programlisting>
    </para>
    <para>
     To understand how $options['sql'] really works, some knowledge of XML_Query2XML's internals might be helpful:
     {@link XML_Query2XML::getXML()} calls the private method {@link XML_Query2XML::_getNestedXMLRecord()} for
     every record retrieved from the database using the SQL statement passed to getXML() as first
     argument. XML_Query2XML::_getNestedXMLRecord() will then process the current record according
     to the settings specified in $options. The processing of all
     {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_elements.complex_element_specifications}
     is handed off to the private method {@link XML_Query2XML::_processComplexElementSpecification()}.
     XML_Query2XML::_processComplexElementSpecification() in turn will call the private method
     {@link XML_Query2XML::_applySqlOptionsToRecord()} to interpret $options['sql'] and {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql_options}.
     XML_Query2XML::_processComplexElementSpecification() will then call again {@link XML_Query2XML::_getNestedXMLRecord()} for
     every record retrieved using the query specified in the 'sql' option.
    </para>
   </refsect3>
   <refsect3 id="{@id complexqueryspecification}">
    <title>Complex Query Specification</title>
    <para>
    A Complex Query Specification uses
    {@link http://pear.php.net/manual/en/package.database.db.intro-execute.php DB::prepare and DB::execute}
    or MDB2::prepare and MDB2::execute
    and therefore prevents SQL injection and is also faster
    than a {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql.simplequeryspecification} in most scenarios. It consists of
    two parts:
    <itemizedlist>
     <listitem>
      <emphasis>$options['sql']['data']</emphasis>: an indexed array of values. The specification can be of the following types:
      <itemizedlist>
       <listitem>
        <emphasis>COLUMN NAME</emphasis>: this is the default if not preceeded by ':' or '#'.
        If the column does not exist, an {@link XML_Query2XML_ConfigException} will be thrown. Note
        that the parent record will be used! This is quite logic as this SQL statement has not been executed yet :)
       </listitem>
       <listitem>
        <emphasis>STATIC TEXT with a : prefix</emphasis>: if the value is preceeded by a colon (':'), it is
        interpreted as static text.
       </listitem>
       <listitem>
        <emphasis>CALLBACK FUNCTION with a # prefix</emphasis>: if the value is preceeded by a pound sign ('#'), it
        is interpreted as a callback function. You can use a regular function (e.g. '#myFunction()') or a static
        method (e.g. '#MyClass::myFunction()'). The current record will be passed to the callback function
        as an associative array. You can also pass additional string arguments to the callback function by specifing
        them within the opening and closing brace; e.g. '#Utils::limit(12)' will result in Util::limit() being
        called with the current record as the first and '12' as the second argument. If you do not want
        to pass additional arguments to the callback function, the opening and closing brace are optional.
       </listitem>
      </itemizedlist>
      The same syntax (with the additional '?' prefix) can be use for
      {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_elements.simple_element_specifications},
      {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_value},
      {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_attributes.simple_attribute_specifications} and
      {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_idcolumn} because the private method
      {@link XML_Query2XML::_applyColumnStringToRecord()} is used in all cases.
      <emphasis>Note:</emphasis> $options['sql']['data'] is optional!
     </listitem>
     <listitem>
      <emphasis>$options['sql']['query']</emphasis>: the SQL query as a string that contains a placeholder
      for each element of $options['sql']['data'].
     </listitem>
    </itemizedlist>
    Here is a simple example similar to {@tutorial XML_Query2XML.pkg#casestudies.case03}:
    </para>
    <para>
     <programlisting role="php">
    <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
    "SELECT
        *
     FROM
        artist",
    array(
        'rootTag' => 'music_library',
        'rowTag' => 'artist',
        'idColumn' => 'artistid',
        'elements' => array(
            'artistid',
            'name',
            'birth_year',
            'birth_place',
            'genre',
            'albums' => array(
                'sql' => array(
                    'data' => array(
                        'artistid'
                    ),
                    'query' => "SELECT * FROM album WHERE artist_id = ?"
                ),
                'rootTag' => 'albums',
                'rowTag' => 'album',
                'idColumn' => 'albumid',
                'elements' => array(
                    'albumid',
                    'title',
                    'published_year',
                    'comment'
                )
            )
        )
    )
);

header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
     ]]>
    </programlisting>
    </para>
   </refsect3>
  </refsect2>
  
  <refsect2 id="{@id options_sql_options}">
   <title>$options['sql_options']</title>
   <para>
    This allows you to specify how {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql} is
    handled. $options['sql_options'] is an associative array that can have the following fileds:
    <itemizedlist>
     <listitem>
      {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql_options.uncached}
     </listitem>
     <listitem>
      {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql_options.single_record}
     </listitem>
     <listitem>
      {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql_options.merge}
     </listitem>
     <listitem>
      {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql_options.merge_selective}
     </listitem>
     <listitem>
      {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql_options.merge_master}
     </listitem>
    </itemizedlist>
    Per default all options are set to the boolean value false.
   </para>
   <refsect3 id="{@id uncached}">
    <title>$options['sql_options']['uncached']</title>
    <para>
     Caching is activated by default. That means that the result of a query (that is represented
     by an associative array) is stored in the private associative array {@link XML_Query2XML::$_recordCache}
     using the SQL query string as key. If the exact same query needs to be executed a second time,
     it can be retrieved from cache.
    </para>
    <para>
     Before setting $options['sql_options']['uncached'] to true, do some
     {@tutorial XML_Query2XML.pkg#profiling}. As documented in
     {@tutorial XML_Query2XML.pkg#profiling.getprofile} the CACHED column in the profile output will
     show 'true!' if caching is performed without being necessary.
    </para>
    <para>
     Please see {@tutorial XML_Query2XML.pkg#casestudies.case03} for an example where caching is not
     necessary and $options['sql_options']['uncached'] therefore set to true.
    </para>
   </refsect3>
   <refsect3 id="{@id single_record}">
    <title>$options['sql_options']['single_record']</title>
    <para>
     Use this option to make sure that the SQL query you specified in
     {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql} returns only a single record.
     This option is, in fact of limited use.
    </para>
   </refsect3>
   <refsect3 id="{@id merge}">
    <title>$options['sql_options']['merge']</title>
    <para>
     By default no merging is done so that less memory is used. This means that the data of the record
     present on the parent level will not be available at this level. Only the data returned by
     {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql} will be available (and therefore
     use up memory). If you also need the data of the record present on the parent level the two arrays
     have to be merged using {@link http://www.php.net/array_merge array_merge()}. If
     {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql} returned multiple records, each of them
     has to be merged with the one of the parent level separatly:
     <programlisting role="php">
     <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
    "SELECT
        *
     FROM
        artist",
    array(
        'rootTag' => 'MUSIC_LIBRARY',
        'rowTag' => 'ARTIST',
        'idColumn' => 'artistid',
        'elements' => array(
            'NAME' => 'name',
            'BIRTH_YEAR' => 'birth_year',
            'GENRE' => 'genre',
            'albums' => array(
                'sql' => array(
                    'data' => array('artistid'),
                    'query' => "SELECT * FROM album WHERE artist_id = ?"
                ),
                'sql_options' => array(
                    'merge' => true
                ),
                'rootTag' => '',
                'rowTag' => 'ALBUM',
                'idColumn' => 'albumid',
                'elements' => array(
                    'TITLE' => 'title',
                    'PUBLISHED_YEAR' => 'published_year',
                    'COMMENT' => 'comment',
                    'GENRE' => 'genre'
                )
            )
        )
    )
);

header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
     ]]>
     </programlisting>
    </para>
    <para>
     As this produces quite some overhead you might be tempted to do something like this:
     <programlisting role="php">
     <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
    "SELECT
        *
     FROM
        artist",
    array(
        'rootTag' => 'MUSIC_LIBRARY',
        'rowTag' => 'ARTIST',
        'idColumn' => 'artistid',
        'elements' => array(
            'NAME' => 'name',
            'BIRTH_YEAR' => 'birth_year',
            'GENRE' => 'genre',
            'albums' => array(
                'sql' => array(
                    'data' => array('artistid'),
                    'query' => "SELECT a.*, '{\$record['genre']}' AS genre FROM album a WHERE artist_id = ?"
                ),
                'rootTag' => '',
                'rowTag' => 'ALBUM',
                'idColumn' => 'albumid',
                'elements' => array(
                    'TITLE' => 'title',
                    'PUBLISHED_YEAR' => 'published_year',
                    'COMMENT' => 'comment',
                    'GENRE' => 'genre'
                )
            )
        )
    )
);

header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
     ]]>
     </programlisting>
     Here the value of the genre column had to be available on the lower level. To circumvent the merging,
     the required value was included the the lover level's sql query. ATTENTION: if you include a column
     value in another query like this you have to make sure that no SQL injection is possible. Therefore it is
     strongly recommended to use {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql_options.merge_selective}
     instead.
    </para>
   </refsect3>
   <refsect3 id="{@id merge_selective}">
    <title>$options['sql_options']['merge_selective']</title>
    <para>
     As a full merge with the parent record might severly affect the performance, the sql option
     merge_selective allows you to only merge the current record with specific columns of the
     parent record. This will also eliminate any SQL injection vulnerabilities. Just place
     the names of all columns of the parent record you want to be available in the current record
     in an array and assign it to the merge_selective option. Here goes an example:
     <programlisting role="php">
     <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
    "SELECT
        *
     FROM
        artist",
    array(
        'rootTag' => 'MUSIC_LIBRARY',
        'rowTag' => 'ARTIST',
        'idColumn' => 'artistid',
        'elements' => array(
            'NAME' => 'name',
            'BIRTH_YEAR' => 'birth_year',
            'GENRE' => 'genre',
            'albums' => array(
                'sql' => array(
                    'data' => array('artistid'),
                    'query' => "SELECT * FROM album WHERE artist_id = ?"
                ),
                'sql_options' => array(
                    'merge_selective' => array('genre')
                ),
                'rootTag' => '',
                'rowTag' => 'ALBUM',
                'idColumn' => 'albumid',
                'elements' => array(
                    'TITLE' => 'title',
                    'PUBLISHED_YEAR' => 'published_year',
                    'COMMENT' => 'comment',
                    'GENRE' => 'genre'
                )
            )
        )
    )
);

header('Content-Type: application/xml');
$dom->formatOutput = true;
print $dom->saveXML();
?>
     ]]>
     </programlisting>
    </para>
   </refsect3>
   <refsect3 id="{@id merge_master}">
    <title>$options['sql_options']['merge_master']</title>
    <para>
     If (selective) merging is performed, it might become important which record overwrites the data of the other.
     As soon as both result sets have a column with the same name, there is a confilict that has to
     be resolved. By default, the record of the parent level is the master and overwrites the
     record(s) returned by {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql}. If you want
     the new records to overwrite the record of the parent level, set
     $options['sql_options']['merge_master'] to true. Note that is option only has an effect if
     {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql_options.merge} is set to true or
     {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql_options.merge_selective} is used.
    </para>
   </refsect3>
  </refsect2>
 
  <refsect2 id="{@id final_notes}">
   <title>Final Notes on XML_Query2XML::getXML()</title>
   <para>
    You might also want to read the API docs: {@link XML_Query2XML}.
   </para>
  </refsect2>
 </refsect1>

 <refsect1 id="{@id exception_handling}">
  <title>Exception Handling</title>
  <para>
   The public methods {@link XML_Query2XML::factory()}, {@link XML_Query2XML::getFlatXML()}
   and {@link XML_Query2XML::getXML()} all may throw exceptions. For production use you will
   have to implement the security principle "secure failure". This means that you will have to
   catch exceptions and deal with them. XML_Query2XML makes this task easy as all exceptions this
   package will ever throw extend {@link XML_Query2XML_Exception}. Therefore it is possible to catch all
   exceptions by catching {@link XML_Query2XML_Exception}:
  </para>
  <para>
   <programlisting role="php">
   <![CDATA[
<?php
require_once 'XML/Query2XML.php';
try {
    require_once 'MDB2.php';
    $query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
    $dom = $query2xml->getXML(
      "SELECT * FROM artist",
      array(
        'rootTag' => 'favorite_artist',
        'idColumn' => 'artistid',
        'rowTag' => 'artist',
        'elements' => array(
            'name',
            'birth_year',
            'genre'
        )
      )
    );
    echo $dom->saveXML();
} catch(XML_Query2XML_Exception $e) {
    /*
    * log this exceptions
    * display some error message that does not disclose sensitive information
    */
}
?>
   ]]>
   </programlisting>
  </para>
  <para>
   Here is a list of the exceptions the public methods of XML_Query2XML will throw:
   <itemizedlist>
    <listitem>
     {@link XML_Query2XML::factory()}: {@link XML_Query2XML_DBException} and {@link XML_Query2XML_ConfigException}
    </listitem>
    <listitem>
     {@link XML_Query2XML::getFlatXML()}: {@link XML_Query2XML_DBException} and
     {@link XML_Query2XML_XMLException}
    </listitem>
    <listitem>
     {@link XML_Query2XML::getXML()}: {@link XML_Query2XML_DBException},
     {@link XML_Query2XML_XMLException} and {@link XML_Query2XML_ConfigException}
    </listitem>
   </itemizedlist>
   As you can see, XML_Query2XML_Exception itself is never thrown.
  </para>
  <para>
   To treat different exceptions differently you would write code like this:
<programlisting role="php">
   <![CDATA[
<?php
require_once 'XML/Query2XML.php';
try {
    require_once 'MDB2.php';
    $query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
    $dom = $query2xml->getXML(
      "SELECT * FROM artist",
      array(
        'rootTag' => 'favorite_artist',
        'idColumn' => 'artistid',
        'rowTag' => 'artist',
        'elements' => array(
            'name',
            'birth_year',
            'genre'
        )
      )
    );
    echo $dom->saveXML();
} catch(XML_Query2XML_DBException $e) {
    //handle DB error
} catch(XML_Query2XML_XMLException $e) {
    //handle XML error
} catch(XML_Query2XML_Exception $e) {
    /*
    * Handle all other errors/exceptions; this will not only catch
    * XML_Query2XML_ConfigException but also all other exceptions that might be
    * added in future releases of XML_Query2XML.
    */
}
?>
   ]]>
   </programlisting>
   Bottom line: make sure you at least have a catch block for XML_Query2XML_Exception.
  </para>
 </refsect1>
 
 <refsect1 id="{@id formatting}">
  <title>Output formatting</title>
  <para>
   Before calling the saveXML() method on your DomDocument instance set its public property
   {@link http://at.php.net/manual/en/ref.dom.php#dom.class.domdocument.properties formatOutput} to true!
   Here goes an example:
   <programlisting role="php">
   <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
  "SELECT * FROM artist",
  array(
    'rootTag' => 'favorite_artist',
    'idColumn' => 'artistid',
    'rowTag' => 'artist',
    'elements' => array(
        'name',
        'birth_year',
        'genre'
    )
  )
);
header('Content-Type: application/xml');

$dom->formatOutput = true;
print $dom->saveXML();
?>
   ]]>
   </programlisting>
  </para>
  <para>
   Alternatively you could also use {@link http://pear.php.net/package/XML_Beautifier PEAR XML_Beautifier}.
   Here goes an example:
   <programlisting role="php">
   <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
  "SELECT * FROM artist",
  array(
    'rootTag' => 'favorite_artist',
    'idColumn' => 'artistid',
    'rowTag' => 'artist',
    'elements' => array(
        'name',
        'birth_year',
        'genre'
    )
  )
);
header('Content-Type: application/xml');
print '<?xml version="1.0" encoding="UTF-8"?>' . "\n";

require_once('XML/Beautifier.php');
$beautifier = new XML_Beautifier();
print $beautifier->formatString($dom->saveXML());
?>
   ]]>
   </programlisting>
  </para>
 </refsect1>
 
 <refsect1 id="{@id debugging}">
  <title>Debugging XML_Query2XML</title>
  <para>
  	If you need to debug your XML_Query2XML or an application using it, use {@link XML_Query2XML::enableDebugLog()}
  	and {@link XML_Query2XML::disableDebugLog()}. It is recommended to use
  	{@link http://pear.php.net/package/Log PEAR Log}.
  </para>
  <para>
  	The following information is logged:
     <itemizedlist>
      <listitem>
       the beginning of the execution of a SQL query in the database
      </listitem>
      <listitem>
       the end of the execution of a SQL query in the database
      </listitem>
      <listitem>
       caching of a query's result
      </listitem>
      <listitem>
       retrieving previously cached data
      </listitem>
     </itemizedlist>
     When using PEAR::Log, the date, time, a custom string and '[info]' will preceed every
     entry. For a better readability SQL queries are not converted into a single line but may be
     multi line.
  </para>
  
  <refsect2 id="{@id example}">
   <title>Example</title>
   <para>
   <programlisting role="php">
   <![CDATA[
<?php
require_once 'XML/Query2XML.php';
$query2xml = XML_Query2XML::factory($db);

//create a new instance of PEAR::Log
require_once 'Log.php';
$debugLogger = &Log::factory('file', 'debug.log', 'XML_Query2XML');

//start debugging
$query2xml->enableDebugLog($debugLogger);

$dom = $query2xml->getXML(...);
print $dom->saveXML();
?>
     ]]>
     </programlisting>
   </para>
  </refsect2>
  
  <refsect2 id="{@id enabledebuglog}">
   <title>XML_Query2XML::enableDebugLog()</title>
   <para>
    Please see the API docs at {@link XML_Query2XML::enableDebugLog()}.
   </para>
  </refsect2>
  
  <refsect2 id="{@id disabledebuglog}">
   <title>XML_Query2XML::disableDebugLog()</title>
   <para>
    Please see the API docs at {@link XML_Query2XML::disableDebugLog()}.
   </para>
  </refsect2>
    
 </refsect1>
 
 <refsect1 id="{@id profiling}">
  <title>Profiling and Performance Tuning</title>
  <para>
  	When the amount of data you have to deal with is getting bigger and bigger you will start to ask yourself
  	questions like:
  	<itemizedlist>
     <listitem>
  	  Are two smaller joins faster than a single huge one?
  	 </listitem>
  	 <listitem>
  	  Should I use {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql} with or without caching?
  	 </listitem>
  	 <listitem>
  	  How often does a certain query get executed and how long does it take?
  	 </listitem>
  	</itemizedlist>
  	XML_Query2XML's profiling provides help on giving answers to these questions.
  </para>
  
  <refsect2 id="{@id example}">
   <title>Example</title>
   <para>
     {@tutorial XML_Query2XML.pkg#profiling.startprofiling} should be the first and
     {@tutorial XML_Query2XML.pkg#profiling.getprofile} the last method you call on your XML_Query2XML instance.
     <programlisting role="php">
     <![CDATA[
<?php
require_once 'XML/Query2XML.php';
$query2xml = XML_Query2XML::factory($db);

//start the profiling as soon as possible
$query2xml->startProfiling();

//do the real work
$dom = $query2xml->getXML(...);
print $dom->saveXML();

//save the profile in a separate file
require_once 'File.php';
$fp = new File();
$fp->write('/tmp/query2xml_profile.txt', $query2xml->getProfile(), FILE_MODE_WRITE);
?>
     ]]>
     </programlisting>
   </para>
  </refsect2>
  
  <refsect2 id="{@id startprofiling}">
   <title>XML_Query2XML::startProfiling()</title>
   <para>
     {@link XML_Query2XML::startProfiling()} will start the profiling by
     initializing the private variable {@link XML_Query2XML::$_profile}. See
     {@tutorial XML_Query2XML.pkg#profiling.getrawprofile} for details on its data format.
   </para>
  </refsect2>
  
  <refsect2 id="{@id stopprofiling}">
   <title>XML_Query2XML::stopProfiling()</title>
   <para>
     {@link XML_Query2XML::stopProfiling()} will stop the profiling. In most cases you will not
     need to call this method as {@tutorial XML_Query2XML.pkg#profiling.getprofile} will do so implicitly.
   </para>
  </refsect2>
  
  <refsect2 id="{@id getprofile}">
   <title>XML_Query2XML::getProfile()</title>
   <para>
     {@link XML_Query2XML::getProfile()} will return the profile as a multiline string.
     It is a table with the following columns:
     <itemizedlist>
      <listitem>
       FROM_DB: number of times this type of query executed in the database
      </listitem>
      <listitem>
       FROM_CACHE: number of times the results could be retrieved from cache
      </listitem>
      <listitem>
       CACHED: whether caching was performed (true or false); if caching was performed but FROM_CACHE
       is 0, the value will be "true!" to indicate that no caching is necessary
      </listitem>
      <listitem>
       AVG_DURATION: average duration of executing the query and getting it's results
      </listitem>
      <listitem>
       DURATION_SUM: total duration for all queries of this type
      </listitem>
      <listitem>
       SQL: the query itself
      </listitem>
     </itemizedlist>
     Additionally there will be a summary at the end of the file. It will contain two fields:
     <itemizedlist>
      <listitem>
       TOTAL_DURATION: number of seconds the whole operation took (including outputting everything).
       Whether you output the generated XML data will only affect TOTAL_DURATION but not DB_DURATION.
      </listitem>
      <listitem>
       DB_DURATION: number of seconds spent executing SQL queries and retrieving their results.
      </listitem>
     </itemizedlist>
   </para>
  </refsect2>
  
  <refsect2 id="{@id getrawprofile}">
   <title>XML_Query2XML::getRawProfile()</title>
   <para>
     {@link XML_Query2XML::getRawProfile()} will return the raw profile data as a multi dimensional associative array.
     It has the following format:

     <programlisting role="php">
     <![CDATA[
$this->_profile = array(
    'queries'    => array(),
    'start'      => microtime(1),
    'stop'       => 0,
    'duration'   => 0,
    'dbStop'     => 0,
    'dbDuration' => 0
);
     ]]>
     </programlisting>
     The element 'queries' is itself an associative array that
     uses $sql as the array key;:
     <programlisting role="php">
     <![CDATA[
$this->_profile['queries'][$sql] = array(
    'fromDB' => 0,
    'fromCache' => 0,
    'cached' => false,
    'runTimes' => array()
);
     ]]>
     </programlisting>
     The element 'runTimes' is an indexed array that stores multiple
     arrays that have the following format:
     <programlisting role="php">
     <![CDATA[
array('start' => microtime(true), 'stop' => 0);
     ]]>
     </programlisting>
   </para>
  </refsect2>
  
  <refsect2 id="{@id clearprofile}">
   <title>XML_Query2XML::clearProfile()</title>
   <para>
    Please see the API docs at {@link XML_Query2XML::clearProfile()}.
   </para>
  </refsect2>
  
 </refsect1>
  
 <refsect1 id="{@id casestudies}">
  <title>Case Studies</title>
  <para>
  	Now let's have a look at some of XML_Query2XML's features in action. We'll start out with simple cases.
  	We'll turn to rather complex ones as we proceed. All cases are included in the source distribution.
  	Each case has its own directory cases/caseXX and will consist of 5 files (Case 01 contains only
  	the first 2):
  	<itemizedlist>
  	 <listitem>
  	  <emphasis>caseXX.php</emphasis>: generates the XML data.
  	 </listitem>
  	 <listitem>
  	  <emphasis>caseXX.xml</emphasis>: the generated the XML data saved to a file.
  	 </listitem>
  	 <listitem>
  	  <emphasis>caseXX_debug.php</emphasis>: does debugging and profiling and generates
  	  caseXX.log and caseXX.profile.
  	 </listitem>
  	 <listitem>
  	  <emphasis>caseXX.log</emphasis>: the generated debug log
  	 </listitem>
  	 <listitem>
  	  <emphasis>caseXX.profile</emphasis>: the generated profile
  	 </listitem>
  	</itemizedlist>
  </para>
  <para>
   The SQL DDL used in all cases can be found in tests/Query2XML_Tests.sql and
   {@tutorial XML_Query2XML.pkg#sqlddl}.
  </para>
  <refsect2 id="{@id case01}">
    <title>Case 01: simple SELECT with getFlatXML</title>
    <para>
    Case 01 is as simple as it can get. We use {@link XML_Query2XML::getFlatXML()} to generate
    flat XML data.
    </para>
    
    <refsect3 id="{@id case01_php}">
     <title>case01.php</title>
     <para>
     <programlisting role="php">
     <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getFlatXML(
    "SELECT
        *
     FROM
        artist",
    'music_library',
    'artist');

header('Content-Type: application/xml');

$dom->formatOutput = true;
print $dom->saveXML();
?>
    ]]>
     </programlisting>
     </para>
    </refsect3>
    <refsect3 id="{@id case01_xml}">
     <title>case01.xml</title>
     <para>
     The result looks like this:
     <programlisting role="tutorial">
     <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<music_library>
  <artist>
    <artistid>1</artistid>
    <name>Curtis Mayfield</name>
    <birth_year>1920</birth_year>
    <birth_place>Chicago</birth_place>
    <genre>Soul</genre>
  </artist>
  <artist>
    <artistid>2</artistid>
    <name>Isaac Hayes</name>
    <birth_year>1942</birth_year>
    <birth_place>Tennessee</birth_place>
    <genre>Soul</genre>
  </artist>
  <artist>
    <artistid>3</artistid>
    <name>Ray Charles</name>
    <birth_year>1930</birth_year>
    <birth_place>Mississippi</birth_place>
    <genre>Country and Soul</genre>
  </artist>
</music_library>
     ]]>
     </programlisting>
     </para>
    </refsect3>
   </refsect2>
   
   <refsect2 id="{@id case02}">
    <title>Case 02: LEFT JOIN</title>
    <para>
     Once you have to deal with LEFT JOINs and similar "complex" SQL queries, you have to use
     {@link XML_Query2XML::getXML()}. The challenge is to get the $options array
     (getXML's second argument) right:
    </para>
    <refsect3 id="{@id case02_php}">
     <title>case02.php</title>
     <para>
     case02.php looks like this:
     <programlisting role="php">
     <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
    "SELECT
        *
     FROM
        artist
        LEFT JOIN album ON album.artist_id = artist.artistid",
    array(
        'rootTag' => 'music_library',
        'rowTag' => 'artist',
        'idColumn' => 'artistid',
        'elements' => array(
            'artistid',
            'name',
            'birth_year',
            'birth_place',
            'genre',
            'albums' => array(
                'rootTag' => 'albums',
                'rowTag' => 'album',
                'idColumn' => 'albumid',
                'elements' => array(
                    'albumid',
                    'title',
                    'published_year',
                    'comment'
                )
            )
        )
    )
);

header('Content-Type: application/xml');

$dom->formatOutput = true;
print $dom->saveXML();
?>
      ]]>
      </programlisting>
      getXML's first argument is the SQL query as a string. The second is the $options array.
      Let's go through all options step by step:
      <itemizedlist>
       <listitem>
  	    <emphasis>'rootTag'</emphasis>: we use 'music_library' as the name for the root tag.
  	   </listitem>
  	   <listitem>
  	    <emphasis>'rowTag'</emphasis>: all tags on the first level will represent an artis; therefore we name it 'artis'.
  	   </listitem>
  	   <listitem>
  	    <emphasis>'idColumn'</emphasis>: we set this to 'artistid' because this is the primary key column of the table
  	    artis. At least at this point it should be clear why this option is essential: our LEFT JOIN
  	    returns something like this:
        <![CDATA[
artistid  name                birth_year  albumid album_title     album_published
-------------------------------------------------------------------------------
1          Curtis Mayfield    1920        1        New World Order  1990          
1          Curtis Mayfield    1920        2        Curtis           1970          
2          Isaac Hayes        1942        3        Shaft            1972          
3          Ray Charles        1930        NULL     NULL             NULL          
        ]]>
        As we want artists to have only a single tag we need to identify them by their primary key.
  	   </listitem>
  	   <listitem>
  	    <emphasis>'elements'</emphasis>: this is a (not necessarily associative) array of child elements.
  	    <itemizedlist>
  	     <listitem>
  	      <emphasis>'artistid', 'name', 'birth_year', 'birth_place', 'genre'</emphasis>: These are simple element
  	      specifications. The column name will be used as the element name and the element will only
  	      contain the column's value.
  	     </listitem>
  	     <listitem>
  	      <emphasis>'artists'</emphasis>: here we use a complex element specification. It is an array
  	      that can have all the options that can be present on the root level.
  	      <itemizedlist>
  	       <listitem>
  	        <emphasis>'rootTag'</emphasis>: we want all albums to be contained in a singel element named
  	        'albums'.
  	       </listitem>
  	       <listitem>
  	        <emphasis>'rowTag'</emphasis>: each album should be contained in an element named 'album'.
  	       </listitem>
  	       <listitem>
  	        <emphasis>'idColumn'</emphasis>: here we have to use 'albumid' for the ID column as this
  	        is the primary key column for our albums.
  	       </listitem>
  	       <listitem>
  	        <emphasis>'elements'</emphasis>: this time, a simple element specification is all we need:
  	        'albumid', 'title', 'published_year', 'comment'
  	       </listitem>
  	      </itemizedlist>
  	     </listitem>
  	    </itemizedlist>
  	   </listitem>
  	  </itemizedlist>
     </para>
    </refsect3>
    <refsect3 id="{@id case02_xml}">
     <title>case02.xml</title>
     <para>
     The resulting XML data looks like this:
     <programlisting role="tutorial">
     <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<music_library>
  <artist>
    <artistid>1</artistid>
    <name>Curtis Mayfield</name>
    <birth_year>1920</birth_year>
    <birth_place>Chicago</birth_place>
    <genre>Soul</genre>
    <albums>
      <album>
        <albumid>1</albumid>
        <title>New World Order</title>
        <published_year>1990</published_year>
        <comment>the best ever!</comment>
      </album>
      <album>
        <albumid>2</albumid>
        <title>Curtis</title>
        <published_year>1970</published_year>
        <comment>that man's got somthin' to say</comment>
      </album>
    </albums>
  </artist>
  <artist>
    <artistid>2</artistid>
    <name>Isaac Hayes</name>
    <birth_year>1942</birth_year>
    <birth_place>Tennessee</birth_place>
    <genre>Soul</genre>
    <albums>
      <album>
        <albumid>3</albumid>
        <title>Shaft</title>
        <published_year>1972</published_year>
        <comment>he's the man</comment>
      </album>
    </albums>
  </artist>
  <artist>
    <artistid>3</artistid>
    <name>Ray Charles</name>
    <birth_year>1930</birth_year>
    <birth_place>Mississippi</birth_place>
    <genre>Country and Soul</genre>
    <albums />
  </artist>
</music_library>
     ]]>
     </programlisting>
     </para>
    </refsect3>
    <refsect3 id="{@id case02_debug_php}">
     <title>case02_debug.php</title>
     <para>
     {@link XML_Query2XML::getXML()} allows us to debug and to profile the operation.
     <programlisting role="php">
     <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));

require_once 'Log.php';
$debugLogger = &Log::factory('file', 'case02.log', 'Query2XML');
$query2xml->enableDebugLog($debugLogger);

$query2xml->startProfiling();


$dom = $query2xml->getXML(
    "SELECT
        *
     FROM
        artist
        LEFT JOIN album ON album.artist_id = artist.artistid",
    array(
        'rootTag' => 'music_library',
        'rowTag' => 'artist',
        'idColumn' => 'artistid',
        'elements' => array(
            'artistid',
            'name',
            'birth_year',
            'birth_place',
            'genre',
            'albums' => array(
                'rootTag' => 'albums',
                'rowTag' => 'album',
                'idColumn' => 'albumid',
                'elements' => array(
                    'albumid',
                    'title',
                    'published_year',
                    'comment'
                )
            )
        )
    )
);

header('Content-Type: application/xml');

$dom->formatOutput = true;
print $dom->saveXML();

require_once 'File.php';
$fp = new File();
$fp->write('case02.profile', $query2xml->getProfile(), FILE_MODE_WRITE);
?>
     ]]>
     </programlisting>
     The lines 5-7 do the debugging, line 9 and 50-52 the profiling. This will create
     case02.log and case02.profile.
     </para>
    </refsect3>
    <refsect3 id="{@id case02_log}">
     <title>case02.log</title>
     <para>
     The format of a debug log file is documented at {@tutorial XML_Query2XML.pkg#debugging}.
     Our debug log shows that the query runs once.
     <![CDATA[
Feb 11 16:10:36 Query2XML [info] QUERY: SELECT
        *
     FROM
        artist
        LEFT JOIN album ON album.artist_id = artist.artistid
Feb 11 16:10:36 Query2XML [info] DONE
     ]]>
     </para>
    </refsect3>
    <refsect3 id="{@id case02_profile}">
     <title>case02.profile</title>
     <para>
     Profiling is essential for performance tuning. The format of the output is documented under
     {@tutorial XML_Query2XML.pkg#profiling.getprofile}. Our profile looks like this:
     <![CDATA[
FROM_DB FROM_CACHE CACHED AVG_DURATION DURATION_SUM SQL
1       0          false  0.0056409835 0.0056409835 SELECT
        *
     FROM
        artist
        LEFT JOIN album ON album.artist_id = artist.artistid

TOTAL_DURATION: 0.06843900680542
DB_DURATION:    0.015194892883301
     ]]>
     </para>
    </refsect3>
    The value "false" in the CACHED column tells us that no caching was performed. As we can see
    in the FROM_DB column, the query ran once.
   </refsect2>
   
   <refsect2 id="{@id case03}">
    <title>Case 03: Two SELECTs instead of a LEFT JOIN</title>
    <para>
     When your query is getting bigger and bigger (6 or more JOINs) you might want to (or have
     to, if the maximum number of fields has been reached) split up the big join into multiple
     smaller joins. Here we will just do exactly the same as in
     {@tutorial XML_Query2XML.pkg#casestudies.case02}, but with two separate SELECT queries.
    </para>
    <refsect3 id="{@id case03_php}">
     <title>case03.php</title>
     <para>
     case03.php looks like this:
     <programlisting role="php">
     <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
    "SELECT
        *
     FROM
        artist",
    array(
        'rootTag' => 'music_library',
        'rowTag' => 'artist',
        'idColumn' => 'artistid',
        'elements' => array(
            'artistid',
            'name',
            'birth_year',
            'birth_place',
            'genre',
            'albums' => array(
                'sql' => array(
                    'data' => array(
                        'artistid'
                    ),
                    'query' => 'SELECT * FROM album WHERE artist_id = ?'
                ),
                'sql_options' => array(
                    'uncached'      => true,
                    'single_record' => false,
                    'merge'         => false,
                    'merge_master'  => false
                ),
                'rootTag' => 'albums',
                'rowTag' => 'album',
                'idColumn' => 'albumid',
                'elements' => array(
                    'albumid',
                    'title',
                    'published_year',
                    'comment'
                )
            )
        )
    )
);

header('Content-Type: application/xml');

$dom->formatOutput = true;
print $dom->saveXML();
?>
      ]]>
      </programlisting>
      We won't go over every option as we did for {@tutorial XML_Query2XML.pkg#casestudies.case02.case02_php}.
      We will only focus on the differences. The first argument to {@link XML_Query2XML::getXML()}
      is a simple SELECT query over one table. What also changed in the complex element
      specification of 'albums'. It has two new options:
      <itemizedlist>
  	   <listitem>
  	    <emphasis>'sql'</emphasis>: ['sql']['query'] will be executed for every record retrieved with
  	    the first SELECT query. In our case, we want all albums for the current artist record.
  	    We use a {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_sql.complexqueryspecification} here:
  	    ['sql']['data'] contains an array of values that will first be passed to the private method
  	    {@link XML_Query2XML::_applyColumnStringToRecord()} and then be use in a call to
  	    {@link http://pear.php.net/manual/en/package.database.db.intro-execute.php DB::execute}.
  	    As we do not prefix 'artistid' with anything it is interpreted as a column name (of the parent
  	    record) - which is just what we want. This completely prevents SQL injection attacks.
  	   </listitem>
  	   <listitem>
  	    <emphasis>'sql_options'</emphasis>: this (optional) option allows you to overwrite a couple
  	    of default settings (per default all are set to false) stored in an associative array.
  	    Here we only overwrite 'uncached' by setting it to true. This is because our query
  	    specified in 'sql' will only be executed once for every record. These things can be
  	    easily revealed by doing some {@tutorial XML_Query2XML.pkg#profiling}.
  	   </listitem>
      </itemizedlist>
     </para>
    </refsect3>
    <refsect3 id="{@id case03_xml}">
     <title>case03.xml</title>
     <para>
     The resulting XML data looks exactly like {@tutorial XML_Query2XML.pkg#casestudies.case02.case02_xml}:
     <programlisting role="tutorial">
     <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<music_library>
  <artist>
    <artistid>1</artistid>
    <name>Curtis Mayfield</name>
    <birth_year>1920</birth_year>
    <birth_place>Chicago</birth_place>
    <genre>Soul</genre>
    <albums>
      <album>
        <albumid>1</albumid>
        <title>New World Order</title>
        <published_year>1990</published_year>
        <comment>the best ever!</comment>
      </album>
      <album>
        <albumid>2</albumid>
        <title>Curtis</title>
        <published_year>1970</published_year>
        <comment>that man's got somthin' to say</comment>
      </album>
    </albums>
  </artist>
  <artist>
    <artistid>2</artistid>
    <name>Isaac Hayes</name>
    <birth_year>1942</birth_year>
    <birth_place>Tennessee</birth_place>
    <genre>Soul</genre>
    <albums>
      <album>
        <albumid>3</albumid>
        <title>Shaft</title>
        <published_year>1972</published_year>
        <comment>he's the man</comment>
      </album>
    </albums>
  </artist>
  <artist>
    <artistid>3</artistid>
    <name>Ray Charles</name>
    <birth_year>1930</birth_year>
    <birth_place>Mississippi</birth_place>
    <genre>Country and Soul</genre>
    <albums />
  </artist>
</music_library>
     ]]>
     </programlisting>
     </para>
    </refsect3>
    <refsect3 id="{@id case03_debug_php}">
     <title>case03_debug.php</title>
     <para>
     case03_debug.php is similar to {@tutorial XML_Query2XML.pkg#casestudies.case02.case02_debug_php}:
     <programlisting role="php">
     <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));

require_once 'Log.php';
$debugLogger = &Log::factory('file', 'case03.log', 'Query2XML');
$query2xml->enableDebugLog($debugLogger);

$query2xml->startProfiling();


$dom = $query2xml->getXML(
    "SELECT
        *
     FROM
        artist",
    array(
        'rootTag' => 'music_library',
        'rowTag' => 'artist',
        'idColumn' => 'artistid',
        'elements' => array(
            'artistid',
            'name',
            'birth_year',
            'birth_place',
            'genre',
            'albums' => array(
                'sql' => array(
                    'data' => array(
                        'artistid'
                    ),
                    'query' => 'SELECT * FROM album WHERE artist_id = ?'
                ),
                'sql_options' => array(
                    'uncached'      => true,
                    'single_record' => false,
                    'merge'         => false,
                    'merge_master'  => false
                ),
                'rootTag' => 'albums',
                'rowTag' => 'album',
                'idColumn' => 'albumid',
                'elements' => array(
                    'albumid',
                    'title',
                    'published_year',
                    'comment'
                )
            )
        )
    )
);

header('Content-Type: application/xml');

$dom->formatOutput = true;
print $dom->saveXML();

require_once 'File.php';
$fp = new File();
$fp->write('case03.profile', $query2xml->getProfile(), FILE_MODE_WRITE);
?>
     ]]>
     </programlisting>
     The lines 5-7 do the debugging, line 9 and 61-63 the profiling. This will create
     case03.log and case03.profile.
     </para>
    </refsect3>
    <refsect3 id="{@id case03_log}">
     <title>case03.log</title>
     <para>
     The format of a debug log file is documented at {@tutorial XML_Query2XML.pkg#debugging}.
     Our debug log now contains 4 queries:
     <![CDATA[
Feb 11 16:08:45 Query2XML [info] QUERY: SELECT
        *
     FROM
        artist
Feb 11 16:08:45 Query2XML [info] DONE
Feb 11 16:08:45 Query2XML [info] QUERY: SELECT * FROM album WHERE artist_id = ?
Feb 11 16:08:45 Query2XML [info] DONE
Feb 11 16:08:45 Query2XML [info] QUERY: SELECT * FROM album WHERE artist_id = ?
Feb 11 16:08:45 Query2XML [info] DONE
Feb 11 16:08:45 Query2XML [info] QUERY: SELECT * FROM album WHERE artist_id = ?
Feb 11 16:08:45 Query2XML [info] DONE
     ]]>
     </para>
     The debug log shows what we expected: the first SELECT over the artist table runs once
     and the SELECT over the album table runs three times (once for every record found in
     the artist table). As the log shows no 'CACHING' entries we also know that no cashing
     was performed (remember: we set the sql option uncached to true).
    </refsect3>
    <refsect3 id="{@id case03_profile}">
     <title>case03.profile</title>
     <para>
     Profiling is essential for performance tuning. The format of the output is documented under
     {@tutorial XML_Query2XML.pkg#profiling.getprofile}. Our profile looks like this:
     <![CDATA[
FROM_DB FROM_CACHE CACHED AVG_DURATION DURATION_SUM SQL
1       0          false  0.0030851364 0.0030851364 SELECT
        *
     FROM
        artist
3       0          false  0.0035093625 0.0105280876 SELECT * FROM album WHERE artist_id = ?

TOTAL_DURATION: 0.090610980987549
DB_DURATION:    0.024358034133911
     ]]>
     If you compare our DB_DURATION value to the one in
     {@tutorial XML_Query2XML.pkg#casestudies.case02.case02_profile} you will see that the single LEFT JOIN
     was faster than the four separate queries.
     </para>
    </refsect3>
   </refsect2>
   <refsect2 id="{@id case04}">
    <title>Case 04: Case 03 with all the bells and whistles</title>
    <para>
     This is very much like {@tutorial XML_Query2XML.pkg#casestudies.case03}, but with a demonstration
     of some splecial features.
    </para>
    <para>
     In contrast to Case 03 we want:
     <itemizedlist>
      <listitem>
       all tag names should be uppercase
      </listitem>
      <listitem>
       an additional child tag for ARTIST: BIRTH_YEAR_TWO_DIGIT that will contain
       only the last two digets of BIRTH_YERAR
      </listitem>
      <listitem>
       the ARTIST tag should have two attributes: ARTISTID and MAINTAINER set to the static value
       'Lukas Feiler'.
      </listitem>
      <listitem>
       the ALBUM tags should not be contained in an ALBUMS tag but should be directly within the
       ARTIST tag
      </listitem>
      <listitem>
       the ALBUM tag should have one attribute: ALBUMID
      </listitem>
      <listitem>
       the ALBUM tag should have an additional child tag: GENRE; note that this is a column of
       the table artist!
      </listitem>
     </itemizedlist>
    </para>
    <refsect3 id="{@id case04_php}">
     <title>case04.php</title>
     <para>
     case04.php looks like this:
     <programlisting role="php">
     <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
    "SELECT
        *
     FROM
        artist",
    array(
        'rootTag' => 'MUSIC_LIBRARY',
        'rowTag' => 'ARTIST',
        'idColumn' => 'artistid',
        'elements' => array(
            'NAME' => 'name',
            'BIRTH_YEAR' => 'birth_year',
            'BIRTH_YEAR_TWO_DIGIT' => "#firstTwoChars()",
            'BIRTH_PLACE' => 'birth_place',
            'GENRE' => 'genre',
            'albums' => array(
                'sql' => array(
                    'data' => array(
                        'artistid'
                    ),
                    'query' => 'SELECT * FROM album WHERE artist_id = ?'
                ),
                'sql_options' => array(
                    'uncached'        => true,
                    'merge_selective' => array('genre')
                ),
                'rootTag' => '',
                'rowTag' => 'ALBUM',
                'idColumn' => 'albumid',
                'elements' => array(
                    'TITLE' => 'title',
                    'PUBLISHED_YEAR' => 'published_year',
                    'COMMENT' => 'comment',
                    'GENRE' => 'genre'
                ),
                'attributes' => array(
                    'ALBUMID' => 'albumid'
                )
            )
        ),
        'attributes' => array(
            'ARTISTID' => 'artistid',
            'MAINTAINER' => ':Lukas Feiler'
        )
    )
);

header('Content-Type: application/xml');

$dom->formatOutput = true;
print $dom->saveXML();

function firstTwoChars($record)
{
    return substr($record['birth_year'], 2);
}
?>
     ]]>
     </programlisting>
     Let's go over the changes:
     <itemizedlist>
      <listitem>
       as we wanted all tag names uppercased, all elements were specified like
       <![CDATA[
       'TAG_NAME' => 'column_name'
       ]]>
       This is because XML_Query2XML will use the array key as the tag name if it is not
       numeric.
      </listitem>
      <listitem>
       BIRTH_YEAR_TWO_DIGIT was specified as
       <![CDATA[
       'BIRTH_YEAR_TWO_DIGIT' => "#firstTwoChars()",
       ]]>
       The prefix '#' tells XML_Query2XML that the following string is a function to call.
       The current record is passed as argument to that function. firstTwoChars in our case
       returns the first two characters of the string stored in $record['birth_year'].
      </listitem>
      <listitem>
       the ARTIST tag now has two attributes: they are specified in an array using the
       'attributes' option. The ARTISTID attribute is simple. In the MAINTAINER attribute
       we specify a static value. This is done by prefixing it by a colon (':'). Without the
       colon, XML_Query2XML would treat it as a column name.
      </listitem>
      <listitem>
       the ALBUM tags are now not contained in an ALBUMS tag anymore but directly within the
       ARTIST tag; this is done by setting 'rootTag' to an empty string. Alternatively we just could
       have omitted the rootTag option.
      </listitem>
      <listitem>
       ALBUM's new attribute ALBUMID is again specified using the 'attribute' option.
      </listitem>
      <listitem>
       ALBUM's new child tag GENRE contains the value of a column of the table artist.
       If we had been using the sql default options we would have seen a
       XML_Query2XML_ConfigException with the following message:
       <![CDATA[
[elements][albums]: The column "genre" used in the option "elements" does not exist in the result set.
       ]]>
       This is because the result of the first SQL query is not available at this level. It got
       overwritten with the result of our second query. But as we need both to be present, we
       selectively merger them using {@link http://www.php.net/array_merge array_merge()}.
       This is specified by setting the sql_option 'merge_selective' to an array that contains
       all columns of the parent record that should also be available on the current level.
       As we do not have any confilicting column names, we just leave 'merge_master' set to
       false which means that the results of the first query is 'master'.
      </listitem>
     </itemizedlist>
     </para>
    </refsect3>
    <refsect3 id="{@id case04_xml}">
     <title>case04.xml</title>
     <para>
     The resulting XML data looks like this:
     <programlisting role="tutorial">
     <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<MUSIC_LIBRARY>
  <ARTIST ARTISTID="1" MAINTAINER="Lukas Feiler">
    <NAME>Curtis Mayfield</NAME>
    <BIRTH_YEAR>1920</BIRTH_YEAR>
    <BIRTH_YEAR_TWO_DIGIT>20</BIRTH_YEAR_TWO_DIGIT>
    <BIRTH_PLACE>Chicago</BIRTH_PLACE>
    <GENRE>Soul</GENRE>
    <ALBUM ALBUMID="1">
      <TITLE>New World Order</TITLE>
      <PUBLISHED_YEAR>1990</PUBLISHED_YEAR>
      <COMMENT>the best ever!</COMMENT>
      <GENRE>Soul</GENRE>
    </ALBUM>
    <ALBUM ALBUMID="2">
      <TITLE>Curtis</TITLE>
      <PUBLISHED_YEAR>1970</PUBLISHED_YEAR>
      <COMMENT>that man's got somthin' to say</COMMENT>
      <GENRE>Soul</GENRE>
    </ALBUM>
  </ARTIST>
  <ARTIST ARTISTID="2" MAINTAINER="Lukas Feiler">
    <NAME>Isaac Hayes</NAME>
    <BIRTH_YEAR>1942</BIRTH_YEAR>
    <BIRTH_YEAR_TWO_DIGIT>42</BIRTH_YEAR_TWO_DIGIT>
    <BIRTH_PLACE>Tennessee</BIRTH_PLACE>
    <GENRE>Soul</GENRE>
    <ALBUM ALBUMID="3">
      <TITLE>Shaft</TITLE>
      <PUBLISHED_YEAR>1972</PUBLISHED_YEAR>
      <COMMENT>he's the man</COMMENT>
      <GENRE>Soul</GENRE>
    </ALBUM>
  </ARTIST>
  <ARTIST ARTISTID="3" MAINTAINER="Lukas Feiler">
    <NAME>Ray Charles</NAME>
    <BIRTH_YEAR>1930</BIRTH_YEAR>
    <BIRTH_YEAR_TWO_DIGIT>30</BIRTH_YEAR_TWO_DIGIT>
    <BIRTH_PLACE>Mississippi</BIRTH_PLACE>
    <GENRE>Country and Soul</GENRE>
  </ARTIST>
</MUSIC_LIBRARY>
     ]]>
     </programlisting>
     </para>
    </refsect3>
    <refsect3 id="{@id case04_debug_php}">
     <title>case04_debug.php</title>
     <para>
     case04_debug.php reveals nothing new compared to
     {@tutorial XML_Query2XML.pkg#casestudies.case03.case03_debug_php} but it's included for
     completeness.
     <programlisting role="php">
     <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));

require_once 'Log.php';
$debugLogger = &Log::factory('file', 'case04.log', 'Query2XML');
$query2xml->enableDebugLog($debugLogger);

$query2xml->startProfiling();


$dom = $query2xml->getXML(
    "SELECT
        *
     FROM
        artist",
    array(
        'rootTag' => 'MUSIC_LIBRARY',
        'rowTag' => 'ARTIST',
        'idColumn' => 'artistid',
        'elements' => array(
            'NAME' => 'name',
            'BIRTH_YEAR' => 'birth_year',
            'BIRTH_YEAR_TWO_DIGIT' => "!return substr(\$record['birth_year'], 2);",
            'BIRTH_PLACE' => 'birth_place',
            'GENRE' => 'genre',
            'albums' => array(
                'sql' => array(
                    'data' => array(
                        'artistid'
                    ),
                    'query' => 'SELECT * FROM album WHERE artist_id = ?'
                ),
                'sql_options' => array(
                    'uncached'        => true,
                    'merge_selective' => array('genre')
                ),
                'rootTag' => '',
                'rowTag' => 'ALBUM',
                'idColumn' => 'albumid',
                'elements' => array(
                    'TITLE' => 'title',
                    'PUBLISHED_YEAR' => 'published_year',
                    'COMMENT' => 'comment',
                    'GENRE' => 'genre'
                ),
                'attributes' => array(
                    'ALBUMID' => 'albumid'
                )
            )
        ),
        'attributes' => array(
            'ARTISTID' => 'artistid',
            'MAINTAINER' => ':Lukas Feiler'
        )
    )
);

header('Content-Type: application/xml');

$dom->formatOutput = true;
print $dom->saveXML();

require_once 'File.php';
$fp = new File();
$fp->write('case04.profile', $query2xml->getProfile(), FILE_MODE_WRITE);
?>
     ]]>
     </programlisting>
     The lines 5-7 do the debugging, line 9 and 66-68 the profiling. This will create
     case04.log and case04.profile.
     </para>
    </refsect3>
    <refsect3 id="{@id case04_log}">
     <title>case04.log</title>
     <para>
     The format of a debug log file is documented at {@tutorial XML_Query2XML.pkg#debugging}.
     Our debug log now contains 4 queries and is exactly the same as
     {@tutorial XML_Query2XML.pkg#casestudies.case03.case03_log}:
     <![CDATA[
Feb 11 17:05:03 Query2XML [info] QUERY: SELECT
        *
     FROM
        artist
Feb 11 17:05:03 Query2XML [info] DONE
Feb 11 17:05:03 Query2XML [info] QUERY: SELECT * FROM album WHERE artist_id = ?
Feb 11 17:05:03 Query2XML [info] DONE
Feb 11 17:05:03 Query2XML [info] QUERY: SELECT * FROM album WHERE artist_id = ?
Feb 11 17:05:03 Query2XML [info] DONE
Feb 11 17:05:03 Query2XML [info] QUERY: SELECT * FROM album WHERE artist_id = ?
Feb 11 17:05:03 Query2XML [info] DONE
     ]]>
     </para>
    </refsect3>
    <refsect3 id="{@id case04_profile}">
     <title>case04.profile</title>
     <para>
     Profiling is essential for performance tuning. The format of the output is documented under
     {@tutorial XML_Query2XML.pkg#profiling.getprofile}. Our profile looks exactly like
     {@tutorial XML_Query2XML.pkg#casestudies.case03.case03_profile}:
     <![CDATA[
FROM_DB FROM_CACHE CACHED AVG_DURATION DURATION_SUM SQL
1       0          false  0.0034000873 0.0034000873 SELECT
        *
     FROM
        artist
3       0          false  0.0035278797 0.0105836391 SELECT * FROM album WHERE artist_id = ?

TOTAL_DURATION: 0.081415891647339
DB_DURATION:    0.026465892791748
     ]]>
     </para>
    </refsect3>
   </refsect2>
   <refsect2 id="{@id case05}">
    <title>Case 05: three LEFT JOINs</title>
    <para>
     Case 05 is a demonstration of complex element specifications.
    </para>
    <refsect3 id="{@id case05_php}">
     <title>case05.php</title>
     <para>
     case05.php looks like this:
     <programlisting role="php">
     <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
    "SELECT
         *
     FROM
         customer c
         LEFT JOIN sale s ON c.customerid = s.customer_id
         LEFT JOIN album al ON s.album_id = al.albumid
         LEFT JOIN artist ar ON al.artist_id = ar.artistid",
    array(
        'rootTag' => 'music_store',
        'rowTag' => 'customer',
        'idColumn' => 'customerid',
        'elements' => array(
            'customerid',
            'first_name',
            'last_name',
            'email',
            'sales' => array(
                'rootTag' => 'sales',
                'rowTag' => 'sale',
                'idColumn' => 'saleid',
                'elements' => array(
                    'saleid',
                    'timestamp',
                    'date' => '#Callbacks::getFirstWord()',
                    'time' => '#Callbacks::getSecondWord()',
                    'album' => array(
                        'rootTag' => '',
                        'rowTag' => 'album',
                        'idColumn' => 'albumid',
                        'elements' => array(
                            'albumid',
                            'title',
                            'published_year',
                            'comment',
                            'artist' => array(
                                'rootTag' => '',
                                'rowTag' => 'artist',
                                'idColumn' => 'artistid',
                                'elements' => array(
                                    'artistid',
                                    'name',
                                    'birth_year',
                                    'birth_place',
                                    'genre'
                                ) //artist elements
                            ) //artist array
                        ) //album elements
                    ) //album array
                ) //sales elements
            ) //sales array
        ) //root elements
    ) //root
); //getXML method call

$root = $dom->firstChild;
$root->setAttribute('date_generated', date("Y-m-d\TH:i:s", 1124801570));

header('Content-Type: application/xml');

$dom->formatOutput = true;
print $dom->saveXML();

class Callbacks
{
    function getFirstWord($record)
    {
        return substr($record['timestamp'], 0, strpos($record['timestamp'], ' '));
    }
    
    function getSecondWord($record)
    {
        return substr($record['timestamp'], strpos($record['timestamp'], ' ') + 1);
    }
}
?>
     ]]>
     </programlisting>
     ['elements']['sales']['elements']['date'] and ['time'] contain portions of the timestamp column.
     Also note that a separate call to DomNode::setAttribute() is used to
     set the attribute date_generated in the root element.
     </para>
    </refsect3>
    <refsect3 id="{@id case05_xml}">
     <title>case05.xml</title>
     <para>
     The resulting XML data looks like this:
     <programlisting role="tutorial">
     <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<music_store date_generated="2005-08-23T14:52:50">
  <customer>
    <customerid>1</customerid>
    <first_name>Jane</first_name>
    <last_name>Doe</last_name>
    <email>jane.doe@example.com</email>
    <sales>
      <sale>
        <saleid>1</saleid>
        <timestamp>2005-05-25 16:32:00</timestamp>
        <date>2005-05-25</date>
        <time>16:32:00</time>
        <album>
          <albumid>1</albumid>
          <title>New World Order</title>
          <published_year>1990</published_year>
          <comment>the best ever!</comment>
          <artist>
            <artistid>1</artistid>
            <name>Curtis Mayfield</name>
            <birth_year>1920</birth_year>
            <birth_place>Chicago</birth_place>
            <genre>Soul</genre>
          </artist>
        </album>
      </sale>
      <sale>
        <saleid>11</saleid>
        <timestamp>2005-05-25 16:23:00</timestamp>
        <date>2005-05-25</date>
        <time>16:23:00</time>
        <album>
          <albumid>2</albumid>
          <title>Curtis</title>
          <published_year>1970</published_year>
          <comment>that man's got somthin' to say</comment>
          <artist>
            <artistid>1</artistid>
            <name>Curtis Mayfield</name>
            <birth_year>1920</birth_year>
            <birth_place>Chicago</birth_place>
            <genre>Soul</genre>
          </artist>
        </album>
      </sale>
    </sales>
  </customer>
  <customer>
    <customerid>2</customerid>
    <first_name>John</first_name>
    <last_name>Doe</last_name>
    <email>john.doe@example.com</email>
    <sales>
      <sale>
        <saleid>2</saleid>
        <timestamp>2005-06-05 12:56:00</timestamp>
        <date>2005-06-05</date>
        <time>12:56:00</time>
        <album>
          <albumid>1</albumid>
          <title>New World Order</title>
          <published_year>1990</published_year>
          <comment>the best ever!</comment>
          <artist>
            <artistid>1</artistid>
            <name>Curtis Mayfield</name>
            <birth_year>1920</birth_year>
            <birth_place>Chicago</birth_place>
            <genre>Soul</genre>
          </artist>
        </album>
      </sale>
      <sale>
        <saleid>16</saleid>
        <timestamp>2005-06-05 12:56:12</timestamp>
        <date>2005-06-05</date>
        <time>12:56:12</time>
        <album>
          <albumid>3</albumid>
          <title>Shaft</title>
          <published_year>1972</published_year>
          <comment>he's the man</comment>
          <artist>
            <artistid>2</artistid>
            <name>Isaac Hayes</name>
            <birth_year>1942</birth_year>
            <birth_place>Tennessee</birth_place>
            <genre>Soul</genre>
          </artist>
        </album>
      </sale>
    </sales>
  </customer>
  <customer>
    <customerid>3</customerid>
    <first_name>Susan</first_name>
    <last_name>Green</last_name>
    <email>susan.green@example.com</email>
    <sales>
      <sale>
        <saleid>3</saleid>
        <timestamp>2005-07-10 11:03:00</timestamp>
        <date>2005-07-10</date>
        <time>11:03:00</time>
        <album>
          <albumid>1</albumid>
          <title>New World Order</title>
          <published_year>1990</published_year>
          <comment>the best ever!</comment>
          <artist>
            <artistid>1</artistid>
            <name>Curtis Mayfield</name>
            <birth_year>1920</birth_year>
            <birth_place>Chicago</birth_place>
            <genre>Soul</genre>
          </artist>
        </album>
      </sale>
      <sale>
        <saleid>12</saleid>
        <timestamp>2005-07-10 11:56:00</timestamp>
        <date>2005-07-10</date>
        <time>11:56:00</time>
        <album>
          <albumid>2</albumid>
          <title>Curtis</title>
          <published_year>1970</published_year>
          <comment>that man's got somthin' to say</comment>
          <artist>
            <artistid>1</artistid>
            <name>Curtis Mayfield</name>
            <birth_year>1920</birth_year>
            <birth_place>Chicago</birth_place>
            <genre>Soul</genre>
          </artist>
        </album>
      </sale>
    </sales>
  </customer>
  <customer>
    <customerid>4</customerid>
    <first_name>Victoria</first_name>
    <last_name>Alt</last_name>
    <email>victory.alt@example.com</email>
    <sales>
      <sale>
        <saleid>4</saleid>
        <timestamp>2005-07-10 10:03:00</timestamp>
        <date>2005-07-10</date>
        <time>10:03:00</time>
        <album>
          <albumid>1</albumid>
          <title>New World Order</title>
          <published_year>1990</published_year>
          <comment>the best ever!</comment>
          <artist>
            <artistid>1</artistid>
            <name>Curtis Mayfield</name>
            <birth_year>1920</birth_year>
            <birth_place>Chicago</birth_place>
            <genre>Soul</genre>
          </artist>
        </album>
      </sale>
      <sale>
        <saleid>17</saleid>
        <timestamp>2005-07-10 10:03:32</timestamp>
        <date>2005-07-10</date>
        <time>10:03:32</time>
        <album>
          <albumid>3</albumid>
          <title>Shaft</title>
          <published_year>1972</published_year>
          <comment>he's the man</comment>
          <artist>
            <artistid>2</artistid>
            <name>Isaac Hayes</name>
            <birth_year>1942</birth_year>
            <birth_place>Tennessee</birth_place>
            <genre>Soul</genre>
          </artist>
        </album>
      </sale>
    </sales>
  </customer>
  <customer>
    <customerid>5</customerid>
    <first_name>Will</first_name>
    <last_name>Rippy</last_name>
    <email>will.wippy@example.com</email>
    <sales>
      <sale>
        <saleid>5</saleid>
        <timestamp>2005-07-10 13:03:00</timestamp>
        <date>2005-07-10</date>
        <time>13:03:00</time>
        <album>
          <albumid>1</albumid>
          <title>New World Order</title>
          <published_year>1990</published_year>
          <comment>the best ever!</comment>
          <artist>
            <artistid>1</artistid>
            <name>Curtis Mayfield</name>
            <birth_year>1920</birth_year>
            <birth_place>Chicago</birth_place>
            <genre>Soul</genre>
          </artist>
        </album>
      </sale>
      <sale>
        <saleid>13</saleid>
        <timestamp>2005-07-10 13:12:00</timestamp>
        <date>2005-07-10</date>
        <time>13:12:00</time>
        <album>
          <albumid>2</albumid>
          <title>Curtis</title>
          <published_year>1970</published_year>
          <comment>that man's got somthin' to say</comment>
          <artist>
            <artistid>1</artistid>
            <name>Curtis Mayfield</name>
            <birth_year>1920</birth_year>
            <birth_place>Chicago</birth_place>
            <genre>Soul</genre>
          </artist>
        </album>
      </sale>
    </sales>
  </customer>
  <customer>
    <customerid>6</customerid>
    <first_name>Tim</first_name>
    <last_name>Raw</last_name>
    <email>tim.raw@example.com</email>
    <sales>
      <sale>
        <saleid>6</saleid>
        <timestamp>2005-07-10 14:03:00</timestamp>
        <date>2005-07-10</date>
        <time>14:03:00</time>
        <album>
          <albumid>1</albumid>
          <title>New World Order</title>
          <published_year>1990</published_year>
          <comment>the best ever!</comment>
          <artist>
            <artistid>1</artistid>
            <name>Curtis Mayfield</name>
            <birth_year>1920</birth_year>
            <birth_place>Chicago</birth_place>
            <genre>Soul</genre>
          </artist>
        </album>
      </sale>
      <sale>
        <saleid>18</saleid>
        <timestamp>2005-07-10 14:03:52</timestamp>
        <date>2005-07-10</date>
        <time>14:03:52</time>
        <album>
          <albumid>3</albumid>
          <title>Shaft</title>
          <published_year>1972</published_year>
          <comment>he's the man</comment>
          <artist>
            <artistid>2</artistid>
            <name>Isaac Hayes</name>
            <birth_year>1942</birth_year>
            <birth_place>Tennessee</birth_place>
            <genre>Soul</genre>
          </artist>
        </album>
      </sale>
    </sales>
  </customer>
  <customer>
    <customerid>7</customerid>
    <first_name>Nick</first_name>
    <last_name>Fallow</last_name>
    <email>nick.fallow@example.com</email>
    <sales>
      <sale>
        <saleid>7</saleid>
        <timestamp>2005-07-10 15:03:00</timestamp>
        <date>2005-07-10</date>
        <time>15:03:00</time>
        <album>
          <albumid>1</albumid>
          <title>New World Order</title>
          <published_year>1990</published_year>
          <comment>the best ever!</comment>
          <artist>
            <artistid>1</artistid>
            <name>Curtis Mayfield</name>
            <birth_year>1920</birth_year>
            <birth_place>Chicago</birth_place>
            <genre>Soul</genre>
          </artist>
        </album>
      </sale>
      <sale>
        <saleid>14</saleid>
        <timestamp>2005-07-10 15:09:00</timestamp>
        <date>2005-07-10</date>
        <time>15:09:00</time>
        <album>
          <albumid>2</albumid>
          <title>Curtis</title>
          <published_year>1970</published_year>
          <comment>that man's got somthin' to say</comment>
          <artist>
            <artistid>1</artistid>
            <name>Curtis Mayfield</name>
            <birth_year>1920</birth_year>
            <birth_place>Chicago</birth_place>
            <genre>Soul</genre>
          </artist>
        </album>
      </sale>
    </sales>
  </customer>
  <customer>
    <customerid>8</customerid>
    <first_name>Ed</first_name>
    <last_name>Burton</last_name>
    <email>ed.burton@example.com</email>
    <sales>
      <sale>
        <saleid>8</saleid>
        <timestamp>2005-07-10 16:03:00</timestamp>
        <date>2005-07-10</date>
        <time>16:03:00</time>
        <album>
          <albumid>1</albumid>
          <title>New World Order</title>
          <published_year>1990</published_year>
          <comment>the best ever!</comment>
          <artist>
            <artistid>1</artistid>
            <name>Curtis Mayfield</name>
            <birth_year>1920</birth_year>
            <birth_place>Chicago</birth_place>
            <genre>Soul</genre>
          </artist>
        </album>
      </sale>
      <sale>
        <saleid>19</saleid>
        <timestamp>2005-07-10 16:03:01</timestamp>
        <date>2005-07-10</date>
        <time>16:03:01</time>
        <album>
          <albumid>3</albumid>
          <title>Shaft</title>
          <published_year>1972</published_year>
          <comment>he's the man</comment>
          <artist>
            <artistid>2</artistid>
            <name>Isaac Hayes</name>
            <birth_year>1942</birth_year>
            <birth_place>Tennessee</birth_place>
            <genre>Soul</genre>
          </artist>
        </album>
      </sale>
    </sales>
  </customer>
  <customer>
    <customerid>9</customerid>
    <first_name>Jack</first_name>
    <last_name>Woo</last_name>
    <email>jack.woo@example.com</email>
    <sales>
      <sale>
        <saleid>9</saleid>
        <timestamp>2005-07-10 18:03:00</timestamp>
        <date>2005-07-10</date>
        <time>18:03:00</time>
        <album>
          <albumid>1</albumid>
          <title>New World Order</title>
          <published_year>1990</published_year>
          <comment>the best ever!</comment>
          <artist>
            <artistid>1</artistid>
            <name>Curtis Mayfield</name>
            <birth_year>1920</birth_year>
            <birth_place>Chicago</birth_place>
            <genre>Soul</genre>
          </artist>
        </album>
      </sale>
      <sale>
        <saleid>15</saleid>
        <timestamp>2005-07-10 18:49:00</timestamp>
        <date>2005-07-10</date>
        <time>18:49:00</time>
        <album>
          <albumid>2</albumid>
          <title>Curtis</title>
          <published_year>1970</published_year>
          <comment>that man's got somthin' to say</comment>
          <artist>
            <artistid>1</artistid>
            <name>Curtis Mayfield</name>
            <birth_year>1920</birth_year>
            <birth_place>Chicago</birth_place>
            <genre>Soul</genre>
          </artist>
        </album>
      </sale>
    </sales>
  </customer>
  <customer>
    <customerid>10</customerid>
    <first_name>Maria</first_name>
    <last_name>Gonzales</last_name>
    <email>maria.gonzales@example.com</email>
    <sales>
      <sale>
        <saleid>10</saleid>
        <timestamp>2005-07-10 19:03:00</timestamp>
        <date>2005-07-10</date>
        <time>19:03:00</time>
        <album>
          <albumid>1</albumid>
          <title>New World Order</title>
          <published_year>1990</published_year>
          <comment>the best ever!</comment>
          <artist>
            <artistid>1</artistid>
            <name>Curtis Mayfield</name>
            <birth_year>1920</birth_year>
            <birth_place>Chicago</birth_place>
            <genre>Soul</genre>
          </artist>
        </album>
      </sale>
      <sale>
        <saleid>20</saleid>
        <timestamp>2005-07-10 19:03:50</timestamp>
        <date>2005-07-10</date>
        <time>19:03:50</time>
        <album>
          <albumid>3</albumid>
          <title>Shaft</title>
          <published_year>1972</published_year>
          <comment>he's the man</comment>
          <artist>
            <artistid>2</artistid>
            <name>Isaac Hayes</name>
            <birth_year>1942</birth_year>
            <birth_place>Tennessee</birth_place>
            <genre>Soul</genre>
          </artist>
        </album>
      </sale>
    </sales>
  </customer>
</music_store>
     ]]>
     </programlisting>
     </para>
    </refsect3>
    <refsect3 id="{@id case05_debug_php}">
     <title>case05_debug.php</title>
     <para>
     case05_debug.php:
     <programlisting role="php">
     <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));

require_once 'Log.php';
$debugLogger = &Log::factory('file', 'case05.log', 'Query2XML');
$query2xml->enableDebugLog($debugLogger);

$query2xml->startProfiling();


$dom = $query2xml->getXML(
    "SELECT
         *
     FROM
         customer c
         LEFT JOIN sale s ON c.customerid = s.customer_id
         LEFT JOIN album al ON s.album_id = al.albumid
         LEFT JOIN artist ar ON al.artist_id = ar.artistid",
    array(
        'rootTag' => 'music_store',
        'rowTag' => 'customer',
        'idColumn' => 'customerid',
        'elements' => array(
            'customerid',
            'first_name',
            'last_name',
            'email',
            'sales' => array(
                'rootTag' => 'sales',
                'rowTag' => 'sale',
                'idColumn' => 'saleid',
                'elements' => array(
                    'saleid',
                    'timestamp',
                    'date' => "!return substr(\$record['timestamp'], 0, strpos(\$record['timestamp'], ' '));",
                    'time' => "!return substr(\$record['timestamp'], strpos(\$record['timestamp'], ' ') + 1);",
                    'album' => array(
                        'rootTag' => '',
                        'rowTag' => 'album',
                        'idColumn' => 'albumid',
                        'elements' => array(
                            'albumid',
                            'title',
                            'published_year',
                            'comment',
                            'artist' => array(
                                'rootTag' => '',
                                'rowTag' => 'artist',
                                'idColumn' => 'artistid',
                                'elements' => array(
                                    'artistid',
                                    'name',
                                    'birth_year',
                                    'birth_place',
                                    'genre'
                                ) //artist elements
                            ) //artist array
                        ) //album elements
                    ) //album array
                ) //sales elements
            ) //sales array
        ) //root elements
    ) //root
); //getXML method call

$root = $dom->firstChild;
$root->setAttribute('date_generated', date("Y-m-d\TH:i:s", 1124801570));

header('Content-Type: application/xml');

$dom->formatOutput = true;
print $dom->saveXML();

require_once 'File.php';
$fp = new File();
$fp->write('case05.profile', $query2xml->getProfile(), FILE_MODE_WRITE);
?>
     ]]>
     </programlisting>
     The lines 5-7 do the debugging, line 9 and 77-79 the profiling. This will create
     case05.log and case05.profile.
     </para>
    </refsect3>
    <refsect3 id="{@id case05_log}">
     <title>case05.log</title>
     <para>
     The format of a debug log file is documented at {@tutorial XML_Query2XML.pkg#debugging}.
     Our debug log now contains a single query:
     <![CDATA[
Feb 11 17:27:19 Query2XML [info] QUERY: SELECT
         *
     FROM
         customer c
         LEFT JOIN sale s ON c.customerid = s.customer_id
         LEFT JOIN album al ON s.album_id = al.albumid
         LEFT JOIN artist ar ON al.artist_id = ar.artistid
Feb 11 17:27:19 Query2XML [info] DONE
     ]]>
     </para>
    </refsect3>
    <refsect3 id="{@id case05_profile}">
     <title>case05.profile</title>
     <para>
     The format of the output is documented under
     {@tutorial XML_Query2XML.pkg#profiling.getprofile}:
     <![CDATA[
FROM_DB FROM_CACHE CACHED AVG_DURATION DURATION_SUM SQL
1       0          false  0.0074028968 0.0074028968 SELECT
         *
     FROM
         customer c
         LEFT JOIN sale s ON c.customerid = s.customer_id
         LEFT JOIN album al ON s.album_id = al.albumid
         LEFT JOIN artist ar ON al.artist_id = ar.artistid

TOTAL_DURATION: 0.22688508033752
DB_DURATION:    0.050441980361938
     ]]>
     </para>
    </refsect3>
   </refsect2>
   
   <refsect2 id="{@id case06}">
    <title>Case 06: BIG join over 10 tables</title>
    <para>
     Case 06 demonstrates how complex things can get :) First have a look at the
     {@link http://query2xml.sourceforge.net/docs/Query2XML_Tests.jpg ER diagram}.
     It shows a company that sells records. The basic structure is as follows:
     <itemizedlist>
      <listitem>
       for each store we want a list of all departments that are located in this store
      </listitem>
      <listitem>
       for each department we want we want a list of all employees that work in this department
      </listitem>
      <listitem>
       for each employee we want a list of all his sales
      </listitem>
      <listitem>
       for each sale we want to know the customer and the album sold
      </listitem>
      <listitem>
       for each album we want to know the artist that performed the music
      </listitem>
     </itemizedlist>
    </para>
    <refsect3 id="{@id case06_php}">
     <title>case06.php</title>
     <para>
     case06.php looks like this:
     <programlisting role="php">
     <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
    "SELECT
         s.*,
         manager.employeeid AS manager_employeeid,
         manager.employeename AS manager_employeename,
         d.*,
         department_head.employeeid AS department_head_employeeid,
         department_head.employeename AS department_head_employeename,
         e.*,
         sa.*,
         c.*,
         al.*,
         ar.*,
         (SELECT COUNT(*) FROM sale WHERE sale.store_id = s.storeid) AS store_sales,
         (SELECT
            COUNT(*)
          FROM
            sale, employee, employee_department
          WHERE
            sale.employee_id = employee.employeeid
            AND
            employee_department.employee_id = employee.employeeid
            AND
            employee_department.department_id = d.departmentid
         ) AS department_sales,
         (SELECT
            COUNT(*)
          FROM
            employee, employee_department, department
          WHERE
            employee_department.employee_id = employee.employeeid
            AND
            employee_department.department_id = department.departmentid
            AND
            department.store_id = s.storeid
         ) AS store_employees,
         (SELECT
            COUNT(*)
          FROM
            employee, employee_department
          WHERE
            employee_department.employee_id = employee.employeeid
            AND
            employee_department.department_id = d.departmentid
         ) AS department_employees
     FROM
         store s
          LEFT JOIN employee manager ON s.manager = manager.employeeid
         LEFT JOIN department d ON d.store_id = s.storeid
          LEFT JOIN employee department_head ON department_head.employeeid = d.department_head
          LEFT JOIN employee_department ed ON ed.department_id = d.departmentid
           LEFT JOIN employee e ON e.employeeid = ed.employee_id
            LEFT JOIN sale sa ON sa.employee_id = e.employeeid
             LEFT JOIN customer c ON c.customerid = sa.customer_id
             LEFT JOIN album al ON al.albumid = sa.album_id
              LEFT JOIN artist ar ON ar.artistid = al.artist_id",
    array(
        'rootTag' => 'music_company',
        'rowTag' => 'store',
        'idColumn' => 'storeid',
        'attributes' => array(
            'storeid'
        ),
        'elements' => array(
            'store_sales',
            'store_employees',
            'manager' => array(
                'idColumn' => 'manager_employeeid',
                'attributes' => array(
                    'manager_employeeid'
                ),
                'elements' => array(
                    'manager_employeename'
                )
            ),
            'address' => array(
                'elements' => array(
                    'country',
                    'state' => '#Helper::getStatePostalCode()',
                    'city',
                    'street',
                    'phone'
                )
            ),
            'department' => array(
                'idColumn' => 'departmentid',
                'attributes' => array(
                    'departmentid'
                ),
                'elements' => array(
                    'department_sales',
                    'department_employees',
                    'departmentname',
                    'department_head' => array(
                        'idColumn' => 'department_head_employeeid',
                        'attributes' => array(
                            'department_head_employeeid'
                        ),
                        'elements' => array(
                            'department_head_employeename'
                        )
                    ),
                    'employees' => array(
                        'rootTag' => 'employees',
                        'rowTag' => 'employee',
                        'idColumn' => 'employeeid',
                        'attributes' => array(
                            'employeeid'
                        ),
                        'elements' => array(
                            'employeename',
                            'sales' => array(
                                'rootTag' => 'sales',
                                'rowTag' => 'sale',
                                'idColumn' => 'saleid',
                                'attributes' => array(
                                    'saleid'
                                ),
                                'elements' => array(
                                    'timestamp',
                                    'customer' => array(
                                        'idColumn' => 'customerid',
                                        'attributes' => array(
                                            'customerid'
                                        ),
                                        'elements' => array(
                                            'first_name',
                                            'last_name',
                                            'email'
                                        )
                                    ),
                                    'album' => array(
                                        'idColumn' => 'albumid',
                                        'attributes' => array(
                                            'albumid'
                                        ),
                                        'elements' => array(
                                            'title',
                                            'published_year',
                                            'comment' => '?#Helper::summarizeComment(12)',
                                            'artist' => array(
                                                'idColumn' => 'artistid',
                                                'attributes' => array(
                                                    'artistid'
                                                ),
                                                'elements' => array(
                                                    'name',
                                                    'birth_year',
                                                    'birth_place',
                                                    'genre'
                                                )
                                            )
                                        ) // album elements
                                    ) //album array
                                ) //sales elements
                            ) //sales array
                        ) //employees elements
                    ) //employees array
                ) //department elements
            ) // department array
        ) //root elements
    ) //root
); //getXML method call

$root = $dom->firstChild;
$root->setAttribute('date_generated', date("Y-m-d\TH:i:s", 1124801570));

header('Content-Type: application/xml');

$dom->formatOutput = true;
print $dom->saveXML();



/**Static class that provides validation and parsing methods for
* generating XML.
*
* It is static so that we can easyly call its methods from inside
* Query2XML using eval'd code.
*/
class Helper
{
    /**Associative array of US postal state codes*/
    public static $statePostalCodes = array(
        'ALABAMA' => 'AL', 'ALASKA' => 'AK', 'AMERICAN SAMOA' => 'AS', 'ARIZONA' => 'AZ', 'ARKANSAS' => 'AR', 'CALIFORNIA' => 'CA',
        'COLORADO' => 'CO', 'CONNECTICUT' => 'CT', 'DELAWARE' => 'DE', 'DISTRICT OF COLUMBIA' => 'DC', 'FEDERATED STATES OF MICRONESIA' => 'FM',
        'FLORIDA' => 'FL', 'GEORGIA' => 'GA', 'GUAM' => 'GU', 'HAWAII' => 'HI', 'IDAHO' => 'ID', 'ILLINOIS' => 'IL', 'INDIANA' => 'IN',
        'IOWA' => 'IA', 'KANSAS' => 'KS', 'KENTUCKY' => 'KY', 'LOUISIANA' => 'LA', 'MAINE' => 'ME', 'MARSHALL ISLANDS' => 'MH', 'MARYLAND' => 'MD',
        'MASSACHUSETTS' => 'MA', 'MICHIGAN' => 'MI', 'MINNESOTA' => 'MN', 'MISSISSIPPI' => 'MS', 'MISSOURI' => 'MO', 'MONTANA' => 'MT',
        'NEBRASKA' => 'NE', 'NEVADA' => 'NV', 'NEW HAMPSHIRE' => 'NH', 'NEW JERSEY' => 'NJ', 'NEW JESEY' => 'NJ', 'NEW MEXICO' => 'NM', 'NEW YORK' => 'NY',
        'NORTH CAROLINA' => 'NC', 'NORTH DAKOTA' => 'ND', 'NORTHERN MARIANA ISLANDS' => 'MP', 'OHIO' => 'OH', 'OKLAHOMA' => 'OK', 'OREGON' => 'OR',
        'PALAU' => 'PW', 'PENNSYLVANIA' => 'PA', 'PUERTO RICO' => 'PR', 'RHODE ISLAND' => 'RI', 'SOUTH CAROLINA' => 'SC', 'SOUTH DAKOTA' => 'SD',
        'TENNESSEE' => 'TN', 'TEXAS' => 'TX', 'UTAH' => 'UT', 'VERMONT' => 'VT', 'VIRGIN ISLANDS' => 'VI', 'VIRGINIA' => 'VA', 'WASHINGTON' => 'WA',
        'WEST VIRGINIA' => 'WV', 'WISCONSIN' => 'WI', 'WYOMING' => 'WY'
    );
            
    /**Translates a US state name into its two-letter postal code.
    * If the translation fails, $state is returned unchanged
    * @param $record The record
    */
    public static function getStatePostalCode($record)
    {
        $state = $record["state"];
        $s = str_replace("  ", " ", trim(strtoupper($state)));
        if (isset(self::$statePostalCodes[$s])) {
            return self::$statePostalCodes[$s];
        } else {
            return $state;
        }
    }
      
    function summarize($str, $limit=50, $appendString=' ...')
    {
        if (strlen($str) > $limit) {
            $str = substr($str, 0, $limit - strlen($appendString)) . $appendString;
        }
        return $str;
    }
    
    function summarizeComment($record, $limit)
    {
        return self::summarize($record["comment"], $limit);
    }
}
?>
     ]]>
     </programlisting>
     We use a static class called Helper here. Note how Helper::summarizeComment() is called with a second argument.
     The current record is always passed as first argument to the callback function. So we specify the "comment"
     element as
     <programlisting role="php">
     <![CDATA[
     'comment' => '?#Helper::summarizeComment(12)',
     ]]>
     </programlisting>
     which means that the string '12' will be passed as second argument to Helper::summarizeComment().
     </para>
    </refsect3>
    <refsect3 id="{@id case06_xml}">
     <title>case06.xml</title>
     <para>
     The resulting XML data looks like this:
     <programlisting role="tutorial">
     <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<music_company date_generated="2005-08-23T14:52:50">
  <store storeid="1">
    <store_sales>10</store_sales>
    <store_employees>6</store_employees>
    <manager manager_employeeid="1">
      <manager_employeename>Michael Jones</manager_employeename>
    </manager>
    <address>
      <country>US</country>
      <state>NY</state>
      <city>New York</city>
      <street>Broadway &amp; 72nd Str</street>
      <phone>123 456 7890</phone>
    </address>
    <department departmentid="1">
      <department_sales>10</department_sales>
      <department_employees>3</department_employees>
      <departmentname>Sales</departmentname>
      <department_head department_head_employeeid="1">
        <department_head_employeename>Michael Jones</department_head_employeename>
      </department_head>
      <employees>
        <employee employeeid="1">
          <employeename>Michael Jones</employeename>
          <sales>
            <sale saleid="1">
              <timestamp>2005-05-25 16:32:00</timestamp>
              <customer customerid="1">
                <first_name>Jane</first_name>
                <last_name>Doe</last_name>
                <email>jane.doe@example.com</email>
              </customer>
              <album albumid="1">
                <title>New World Order</title>
                <published_year>1990</published_year>
                <comment>the best ...</comment>
                <artist artistid="1">
                  <name>Curtis Mayfield</name>
                  <birth_year>1920</birth_year>
                  <birth_place>Chicago</birth_place>
                  <genre>Soul</genre>
                </artist>
              </album>
            </sale>
            <sale saleid="7">
              <timestamp>2005-07-10 15:03:00</timestamp>
              <customer customerid="7">
                <first_name>Nick</first_name>
                <last_name>Fallow</last_name>
                <email>nick.fallow@example.com</email>
              </customer>
              <album albumid="1">
                <title>New World Order</title>
                <published_year>1990</published_year>
                <comment>the best ...</comment>
                <artist artistid="1">
                  <name>Curtis Mayfield</name>
                  <birth_year>1920</birth_year>
                  <birth_place>Chicago</birth_place>
                  <genre>Soul</genre>
                </artist>
              </album>
            </sale>
            <sale saleid="16">
              <timestamp>2005-06-05 12:56:12</timestamp>
              <customer customerid="2">
                <first_name>John</first_name>
                <last_name>Doe</last_name>
                <email>john.doe@example.com</email>
              </customer>
              <album albumid="3">
                <title>Shaft</title>
                <published_year>1972</published_year>
                <comment>he's the man</comment>
                <artist artistid="2">
                  <name>Isaac Hayes</name>
                  <birth_year>1942</birth_year>
                  <birth_place>Tennessee</birth_place>
                  <genre>Soul</genre>
                </artist>
              </album>
            </sale>
            <sale saleid="19">
              <timestamp>2005-07-10 16:03:01</timestamp>
              <customer customerid="8">
                <first_name>Ed</first_name>
                <last_name>Burton</last_name>
                <email>ed.burton@example.com</email>
              </customer>
              <album albumid="3">
                <title>Shaft</title>
                <published_year>1972</published_year>
                <comment>he's the man</comment>
                <artist artistid="2">
                  <name>Isaac Hayes</name>
                  <birth_year>1942</birth_year>
                  <birth_place>Tennessee</birth_place>
                  <genre>Soul</genre>
                </artist>
              </album>
            </sale>
          </sales>
        </employee>
        <employee employeeid="2">
          <employeename>Susi Weintraub</employeename>
          <sales>
            <sale saleid="3">
              <timestamp>2005-07-10 11:03:00</timestamp>
              <customer customerid="3">
                <first_name>Susan</first_name>
                <last_name>Green</last_name>
                <email>susan.green@example.com</email>
              </customer>
              <album albumid="1">
                <title>New World Order</title>
                <published_year>1990</published_year>
                <comment>the best ...</comment>
                <artist artistid="1">
                  <name>Curtis Mayfield</name>
                  <birth_year>1920</birth_year>
                  <birth_place>Chicago</birth_place>
                  <genre>Soul</genre>
                </artist>
              </album>
            </sale>
            <sale saleid="9">
              <timestamp>2005-07-10 18:03:00</timestamp>
              <customer customerid="9">
                <first_name>Jack</first_name>
                <last_name>Woo</last_name>
                <email>jack.woo@example.com</email>
              </customer>
              <album albumid="1">
                <title>New World Order</title>
                <published_year>1990</published_year>
                <comment>the best ...</comment>
                <artist artistid="1">
                  <name>Curtis Mayfield</name>
                  <birth_year>1920</birth_year>
                  <birth_place>Chicago</birth_place>
                  <genre>Soul</genre>
                </artist>
              </album>
            </sale>
            <sale saleid="17">
              <timestamp>2005-07-10 10:03:32</timestamp>
              <customer customerid="4">
                <first_name>Victoria</first_name>
                <last_name>Alt</last_name>
                <email>victory.alt@example.com</email>
              </customer>
              <album albumid="3">
                <title>Shaft</title>
                <published_year>1972</published_year>
                <comment>he's the man</comment>
                <artist artistid="2">
                  <name>Isaac Hayes</name>
                  <birth_year>1942</birth_year>
                  <birth_place>Tennessee</birth_place>
                  <genre>Soul</genre>
                </artist>
              </album>
            </sale>
            <sale saleid="20">
              <timestamp>2005-07-10 19:03:50</timestamp>
              <customer customerid="10">
                <first_name>Maria</first_name>
                <last_name>Gonzales</last_name>
                <email>maria.gonzales@example.com</email>
              </customer>
              <album albumid="3">
                <title>Shaft</title>
                <published_year>1972</published_year>
                <comment>he's the man</comment>
                <artist artistid="2">
                  <name>Isaac Hayes</name>
                  <birth_year>1942</birth_year>
                  <birth_place>Tennessee</birth_place>
                  <genre>Soul</genre>
                </artist>
              </album>
            </sale>
          </sales>
        </employee>
        <employee employeeid="3">
          <employeename>Steve Hack</employeename>
          <sales>
            <sale saleid="5">
              <timestamp>2005-07-10 13:03:00</timestamp>
              <customer customerid="5">
                <first_name>Will</first_name>
                <last_name>Rippy</last_name>
                <email>will.wippy@example.com</email>
              </customer>
              <album albumid="1">
                <title>New World Order</title>
                <published_year>1990</published_year>
                <comment>the best ...</comment>
                <artist artistid="1">
                  <name>Curtis Mayfield</name>
                  <birth_year>1920</birth_year>
                  <birth_place>Chicago</birth_place>
                  <genre>Soul</genre>
                </artist>
              </album>
            </sale>
            <sale saleid="18">
              <timestamp>2005-07-10 14:03:52</timestamp>
              <customer customerid="6">
                <first_name>Tim</first_name>
                <last_name>Raw</last_name>
                <email>tim.raw@example.com</email>
              </customer>
              <album albumid="3">
                <title>Shaft</title>
                <published_year>1972</published_year>
                <comment>he's the man</comment>
                <artist artistid="2">
                  <name>Isaac Hayes</name>
                  <birth_year>1942</birth_year>
                  <birth_place>Tennessee</birth_place>
                  <genre>Soul</genre>
                </artist>
              </album>
            </sale>
          </sales>
        </employee>
      </employees>
    </department>
    <department departmentid="2">
      <department_sales>0</department_sales>
      <department_employees>3</department_employees>
      <departmentname>Marketing</departmentname>
      <department_head department_head_employeeid="4">
        <department_head_employeename>Joan Kerr</department_head_employeename>
      </department_head>
      <employees>
        <employee employeeid="4">
          <employeename>Joan Kerr</employeename>
          <sales />
        </employee>
        <employee employeeid="5">
          <employeename>Marcus Roth</employeename>
          <sales />
        </employee>
        <employee employeeid="6">
          <employeename>Jack Mack</employeename>
          <sales />
        </employee>
      </employees>
    </department>
  </store>
  <store storeid="2">
    <store_sales>10</store_sales>
    <store_employees>6</store_employees>
    <manager manager_employeeid="2">
      <manager_employeename>Susi Weintraub</manager_employeename>
    </manager>
    <address>
      <country>US</country>
      <state>NY</state>
      <city>Larchmont</city>
      <street>Palmer Ave 71</street>
      <phone>456 7890</phone>
    </address>
    <department departmentid="3">
      <department_sales>10</department_sales>
      <department_employees>3</department_employees>
      <departmentname>Sales</departmentname>
      <department_head department_head_employeeid="7">
        <department_head_employeename>Rita Doktor</department_head_employeename>
      </department_head>
      <employees>
        <employee employeeid="7">
          <employeename>Rita Doktor</employeename>
          <sales>
            <sale saleid="2">
              <timestamp>2005-06-05 12:56:00</timestamp>
              <customer customerid="2">
                <first_name>John</first_name>
                <last_name>Doe</last_name>
                <email>john.doe@example.com</email>
              </customer>
              <album albumid="1">
                <title>New World Order</title>
                <published_year>1990</published_year>
                <comment>the best ...</comment>
                <artist artistid="1">
                  <name>Curtis Mayfield</name>
                  <birth_year>1920</birth_year>
                  <birth_place>Chicago</birth_place>
                  <genre>Soul</genre>
                </artist>
              </album>
            </sale>
            <sale saleid="8">
              <timestamp>2005-07-10 16:03:00</timestamp>
              <customer customerid="8">
                <first_name>Ed</first_name>
                <last_name>Burton</last_name>
                <email>ed.burton@example.com</email>
              </customer>
              <album albumid="1">
                <title>New World Order</title>
                <published_year>1990</published_year>
                <comment>the best ...</comment>
                <artist artistid="1">
                  <name>Curtis Mayfield</name>
                  <birth_year>1920</birth_year>
                  <birth_place>Chicago</birth_place>
                  <genre>Soul</genre>
                </artist>
              </album>
            </sale>
            <sale saleid="11">
              <timestamp>2005-05-25 16:23:00</timestamp>
              <customer customerid="1">
                <first_name>Jane</first_name>
                <last_name>Doe</last_name>
                <email>jane.doe@example.com</email>
              </customer>
              <album albumid="2">
                <title>Curtis</title>
                <published_year>1970</published_year>
                <comment>that man ...</comment>
                <artist artistid="1">
                  <name>Curtis Mayfield</name>
                  <birth_year>1920</birth_year>
                  <birth_place>Chicago</birth_place>
                  <genre>Soul</genre>
                </artist>
              </album>
            </sale>
            <sale saleid="14">
              <timestamp>2005-07-10 15:09:00</timestamp>
              <customer customerid="7">
                <first_name>Nick</first_name>
                <last_name>Fallow</last_name>
                <email>nick.fallow@example.com</email>
              </customer>
              <album albumid="2">
                <title>Curtis</title>
                <published_year>1970</published_year>
                <comment>that man ...</comment>
                <artist artistid="1">
                  <name>Curtis Mayfield</name>
                  <birth_year>1920</birth_year>
                  <birth_place>Chicago</birth_place>
                  <genre>Soul</genre>
                </artist>
              </album>
            </sale>
          </sales>
        </employee>
        <employee employeeid="8">
          <employeename>David Til</employeename>
          <sales>
            <sale saleid="4">
              <timestamp>2005-07-10 10:03:00</timestamp>
              <customer customerid="4">
                <first_name>Victoria</first_name>
                <last_name>Alt</last_name>
                <email>victory.alt@example.com</email>
              </customer>
              <album albumid="1">
                <title>New World Order</title>
                <published_year>1990</published_year>
                <comment>the best ...</comment>
                <artist artistid="1">
                  <name>Curtis Mayfield</name>
                  <birth_year>1920</birth_year>
                  <birth_place>Chicago</birth_place>
                  <genre>Soul</genre>
                </artist>
              </album>
            </sale>
            <sale saleid="10">
              <timestamp>2005-07-10 19:03:00</timestamp>
              <customer customerid="10">
                <first_name>Maria</first_name>
                <last_name>Gonzales</last_name>
                <email>maria.gonzales@example.com</email>
              </customer>
              <album albumid="1">
                <title>New World Order</title>
                <published_year>1990</published_year>
                <comment>the best ...</comment>
                <artist artistid="1">
                  <name>Curtis Mayfield</name>
                  <birth_year>1920</birth_year>
                  <birth_place>Chicago</birth_place>
                  <genre>Soul</genre>
                </artist>
              </album>
            </sale>
            <sale saleid="12">
              <timestamp>2005-07-10 11:56:00</timestamp>
              <customer customerid="3">
                <first_name>Susan</first_name>
                <last_name>Green</last_name>
                <email>susan.green@example.com</email>
              </customer>
              <album albumid="2">
                <title>Curtis</title>
                <published_year>1970</published_year>
                <comment>that man ...</comment>
                <artist artistid="1">
                  <name>Curtis Mayfield</name>
                  <birth_year>1920</birth_year>
                  <birth_place>Chicago</birth_place>
                  <genre>Soul</genre>
                </artist>
              </album>
            </sale>
            <sale saleid="15">
              <timestamp>2005-07-10 18:49:00</timestamp>
              <customer customerid="9">
                <first_name>Jack</first_name>
                <last_name>Woo</last_name>
                <email>jack.woo@example.com</email>
              </customer>
              <album albumid="2">
                <title>Curtis</title>
                <published_year>1970</published_year>
                <comment>that man ...</comment>
                <artist artistid="1">
                  <name>Curtis Mayfield</name>
                  <birth_year>1920</birth_year>
                  <birth_place>Chicago</birth_place>
                  <genre>Soul</genre>
                </artist>
              </album>
            </sale>
          </sales>
        </employee>
        <employee employeeid="9">
          <employeename>Pia Eist</employeename>
          <sales>
            <sale saleid="6">
              <timestamp>2005-07-10 14:03:00</timestamp>
              <customer customerid="6">
                <first_name>Tim</first_name>
                <last_name>Raw</last_name>
                <email>tim.raw@example.com</email>
              </customer>
              <album albumid="1">
                <title>New World Order</title>
                <published_year>1990</published_year>
                <comment>the best ...</comment>
                <artist artistid="1">
                  <name>Curtis Mayfield</name>
                  <birth_year>1920</birth_year>
                  <birth_place>Chicago</birth_place>
                  <genre>Soul</genre>
                </artist>
              </album>
            </sale>
            <sale saleid="13">
              <timestamp>2005-07-10 13:12:00</timestamp>
              <customer customerid="5">
                <first_name>Will</first_name>
                <last_name>Rippy</last_name>
                <email>will.wippy@example.com</email>
              </customer>
              <album albumid="2">
                <title>Curtis</title>
                <published_year>1970</published_year>
                <comment>that man ...</comment>
                <artist artistid="1">
                  <name>Curtis Mayfield</name>
                  <birth_year>1920</birth_year>
                  <birth_place>Chicago</birth_place>
                  <genre>Soul</genre>
                </artist>
              </album>
            </sale>
          </sales>
        </employee>
      </employees>
    </department>
    <department departmentid="4">
      <department_sales>0</department_sales>
      <department_employees>3</department_employees>
      <departmentname>Marketing</departmentname>
      <department_head department_head_employeeid="10">
        <department_head_employeename>Hanna Poll</department_head_employeename>
      </department_head>
      <employees>
        <employee employeeid="10">
          <employeename>Hanna Poll</employeename>
          <sales />
        </employee>
        <employee employeeid="11">
          <employeename>Jim Wells</employeename>
          <sales />
        </employee>
        <employee employeeid="12">
          <employeename>Sandra Wilson</employeename>
          <sales />
        </employee>
      </employees>
    </department>
  </store>
</music_company>
     ]]>
     </programlisting>
     </para>
    </refsect3>
    <refsect3 id="{@id case06_debug_php}">
     <title>case06_debug.php</title>
     <para>
     case06_debug.php:
     <programlisting role="php">
     <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));

require_once 'Log.php';
$debugLogger = &Log::factory('file', 'case06.log', 'XML_Query2XML');
$query2xml->enableDebugLog($debugLogger);

$query2xml->startProfiling();


$dom = $query2xml->getXML(
    "SELECT
         s.*,
         manager.employeeid AS manager_employeeid,
         manager.employeename AS manager_employeename,
         d.*,
         department_head.employeeid AS department_head_employeeid,
         department_head.employeename AS department_head_employeename,
         e.*,
         sa.*,
         c.*,
         al.*,
         ar.*,
         (SELECT COUNT(*) FROM sale WHERE sale.store_id = s.storeid) AS store_sales,
         (SELECT
            COUNT(*)
          FROM
            sale, employee, employee_department
          WHERE
            sale.employee_id = employee.employeeid
            AND
            employee_department.employee_id = employee.employeeid
            AND
            employee_department.department_id = d.departmentid
         ) AS department_sales,
         (SELECT
            COUNT(*)
          FROM
            employee, employee_department, department
          WHERE
            employee_department.employee_id = employee.employeeid
            AND
            employee_department.department_id = department.departmentid
            AND
            department.store_id = s.storeid
         ) AS store_employees,
         (SELECT
            COUNT(*)
          FROM
            employee, employee_department
          WHERE
            employee_department.employee_id = employee.employeeid
            AND
            employee_department.department_id = d.departmentid
         ) AS department_employees
     FROM
         store s
          LEFT JOIN employee manager ON s.manager = manager.employeeid
         LEFT JOIN department d ON d.store_id = s.storeid
          LEFT JOIN employee department_head ON department_head.employeeid = d.department_head
          LEFT JOIN employee_department ed ON ed.department_id = d.departmentid
           LEFT JOIN employee e ON e.employeeid = ed.employee_id
            LEFT JOIN sale sa ON sa.employee_id = e.employeeid
             LEFT JOIN customer c ON c.customerid = sa.customer_id
             LEFT JOIN album al ON al.albumid = sa.album_id
              LEFT JOIN artist ar ON ar.artistid = al.artist_id",
    array(
        'rootTag' => 'music_company',
        'rowTag' => 'store',
        'idColumn' => 'storeid',
        'attributes' => array(
            'storeid'
        ),
        'elements' => array(
            'store_sales',
            'store_employees',
            'manager' => array(
                'idColumn' => 'manager_employeeid',
                'attributes' => array(
                    'manager_employeeid'
                ),
                'elements' => array(
                    'manager_employeename'
                )
            ),
            'address' => array(
                'elements' => array(
                    'country',
                    'state' => '!return Helper::getStatePostalCode($record["state"]);',
                    'city',
                    'street',
                    'phone'
                )
            ),
            'department' => array(
                'idColumn' => 'departmentid',
                'attributes' => array(
                    'departmentid'
                ),
                'elements' => array(
                    'department_sales',
                    'department_employees',
                    'departmentname',
                    'department_head' => array(
                        'idColumn' => 'department_head_employeeid',
                        'attributes' => array(
                            'department_head_employeeid'
                        ),
                        'elements' => array(
                            'department_head_employeename'
                        )
                    ),
                    'employees' => array(
                        'rootTag' => 'employees',
                        'rowTag' => 'employee',
                        'idColumn' => 'employeeid',
                        'attributes' => array(
                            'employeeid'
                        ),
                        'elements' => array(
                            'employeename',
                            'sales' => array(
                                'rootTag' => 'sales',
                                'rowTag' => 'sale',
                                'idColumn' => 'saleid',
                                'attributes' => array(
                                    'saleid'
                                ),
                                'elements' => array(
                                    'timestamp',
                                    'customer' => array(
                                        'idColumn' => 'customerid',
                                        'attributes' => array(
                                            'customerid'
                                        ),
                                        'elements' => array(
                                            'first_name',
                                            'last_name',
                                            'email'
                                        )
                                    ),
                                    'album' => array(
                                        'idColumn' => 'albumid',
                                        'attributes' => array(
                                            'albumid'
                                        ),
                                        'elements' => array(
                                            'title',
                                            'published_year',
                                            'comment' => '?!return Helper::summarize($record["comment"], 12);',
                                            'artist' => array(
                                                'idColumn' => 'artistid',
                                                'attributes' => array(
                                                    'artistid'
                                                ),
                                                'elements' => array(
                                                    'name',
                                                    'birth_year',
                                                    'birth_place',
                                                    'genre'
                                                )
                                            )
                                        ) // album elements
                                    ) //album array
                                ) //sales elements
                            ) //sales array
                        ) //employees elements
                    ) //employees array
                ) //department elements
            ) // department array
        ) //root elements
    ) //root
); //getXML method call

$root = $dom->firstChild;
$root->setAttribute('date_generated', date("Y-m-d\TH:i:s", 1124801570));

header('Content-Type: application/xml');

$dom->formatOutput = true;
print $dom->saveXML();

require_once 'File.php';
$fp = new File();
$fp->write('case06.profile', $query2xml->getProfile(), FILE_MODE_WRITE);


/**Static class that provides validation and parsing methods for
* generating XML.
*
* It is static so that we can easyly call its methods from inside
* Query2XML using eval'd code.
*/
class Helper
{
    /**Associative array of US postal state codes*/
    public static $statePostalCodes = array(
        'ALABAMA' => 'AL', 'ALASKA' => 'AK', 'AMERICAN SAMOA' => 'AS', 'ARIZONA' => 'AZ', 'ARKANSAS' => 'AR', 'CALIFORNIA' => 'CA',
        'COLORADO' => 'CO', 'CONNECTICUT' => 'CT', 'DELAWARE' => 'DE', 'DISTRICT OF COLUMBIA' => 'DC', 'FEDERATED STATES OF MICRONESIA' => 'FM',
        'FLORIDA' => 'FL', 'GEORGIA' => 'GA', 'GUAM' => 'GU', 'HAWAII' => 'HI', 'IDAHO' => 'ID', 'ILLINOIS' => 'IL', 'INDIANA' => 'IN',
        'IOWA' => 'IA', 'KANSAS' => 'KS', 'KENTUCKY' => 'KY', 'LOUISIANA' => 'LA', 'MAINE' => 'ME', 'MARSHALL ISLANDS' => 'MH', 'MARYLAND' => 'MD',
        'MASSACHUSETTS' => 'MA', 'MICHIGAN' => 'MI', 'MINNESOTA' => 'MN', 'MISSISSIPPI' => 'MS', 'MISSOURI' => 'MO', 'MONTANA' => 'MT',
        'NEBRASKA' => 'NE', 'NEVADA' => 'NV', 'NEW HAMPSHIRE' => 'NH', 'NEW JERSEY' => 'NJ', 'NEW JESEY' => 'NJ', 'NEW MEXICO' => 'NM', 'NEW YORK' => 'NY',
        'NORTH CAROLINA' => 'NC', 'NORTH DAKOTA' => 'ND', 'NORTHERN MARIANA ISLANDS' => 'MP', 'OHIO' => 'OH', 'OKLAHOMA' => 'OK', 'OREGON' => 'OR',
        'PALAU' => 'PW', 'PENNSYLVANIA' => 'PA', 'PUERTO RICO' => 'PR', 'RHODE ISLAND' => 'RI', 'SOUTH CAROLINA' => 'SC', 'SOUTH DAKOTA' => 'SD',
        'TENNESSEE' => 'TN', 'TEXAS' => 'TX', 'UTAH' => 'UT', 'VERMONT' => 'VT', 'VIRGIN ISLANDS' => 'VI', 'VIRGINIA' => 'VA', 'WASHINGTON' => 'WA',
        'WEST VIRGINIA' => 'WV', 'WISCONSIN' => 'WI', 'WYOMING' => 'WY'
    );
            
    /**Translates a US state name into its two-letter postal code.
    * If the translation fails, $state is returned unchanged
    * @param $state The state's name
    */
    public static function getStatePostalCode($state)
    {
        $s = str_replace("  ", " ", trim(strtoupper($state)));
        if (isset(self::$statePostalCodes[$s])) {
            return self::$statePostalCodes[$s];
        } else {
            return $state;
        }
    }
      
    function summarize($str, $limit=50, $appendString=' ...')
    {
        if (strlen($str) > $limit) {
            $str = substr($str, 0, $limit - strlen($appendString)) . $appendString;
        }
        return $str;
    }
}
?>
     ]]>
     </programlisting>
     The lines 5-7 do the debugging, line 9 and 186-188 the profiling. This will create
     case06.log and case06.profile.
     </para>
    </refsect3>
    <refsect3 id="{@id case06_log}">
     <title>case06.log</title>
     <para>
     The format of a debug log file is documented at {@tutorial XML_Query2XML.pkg#debugging}.
     Our debug log contains just a single query:
     <![CDATA[
Feb 11 17:39:46 XML_Query2XML [info] QUERY: SELECT
         s.*,
         manager.employeeid AS manager_employeeid,
         manager.employeename AS manager_employeename,
         d.*,
         department_head.employeeid AS department_head_employeeid,
         department_head.employeename AS department_head_employeename,
         e.*,
         sa.*,
         c.*,
         al.*,
         ar.*,
         (SELECT COUNT(*) FROM sale WHERE sale.store_id = s.storeid) AS store_sales,
         (SELECT
            COUNT(*)
          FROM
            sale, employee, employee_department
          WHERE
            sale.employee_id = employee.employeeid
            AND
            employee_department.employee_id = employee.employeeid
            AND
            employee_department.department_id = d.departmentid
         ) AS department_sales,
         (SELECT
            COUNT(*)
          FROM
            employee, employee_department, department
          WHERE
            employee_department.employee_id = employee.employeeid
            AND
            employee_department.department_id = department.departmentid
            AND
            department.store_id = s.storeid
         ) AS store_employees,
         (SELECT
            COUNT(*)
          FROM
            employee, employee_department
          WHERE
            employee_department.employee_id = employee.employeeid
            AND
            employee_department.department_id = d.departmentid
         ) AS department_employees
     FROM
         store s
          LEFT JOIN employee manager ON s.manager = manager.employeeid
         LEFT JOIN department d ON d.store_id = s.storeid
          LEFT JOIN employee department_head ON department_head.employeeid = d.department_head
          LEFT JOIN employee_department ed ON ed.department_id = d.departmentid
           LEFT JOIN employee e ON e.employeeid = ed.employee_id
            LEFT JOIN sale sa ON sa.employee_id = e.employeeid
             LEFT JOIN customer c ON c.customerid = sa.customer_id
             LEFT JOIN album al ON al.albumid = sa.album_id
              LEFT JOIN artist ar ON ar.artistid = al.artist_id
Feb 11 17:39:46 XML_Query2XML [info] DONE
     ]]>
     </para>
    </refsect3>
    <refsect3 id="{@id case06_profile}">
     <title>case06.profile</title>
     <para>
     The format of the output is documented under
     {@tutorial XML_Query2XML.pkg#profiling.getprofile}:
     <![CDATA[
FROM_DB FROM_CACHE CACHED AVG_DURATION DURATION_SUM SQL
1       0          false  0.0172939300 0.0172939300 SELECT
         s.*,
         manager.employeeid AS manager_employeeid,
         manager.employeename AS manager_employeename,
         d.*,
         department_head.employeeid AS department_head_employeeid,
         department_head.employeename AS department_head_employeename,
         e.*,
         sa.*,
         c.*,
         al.*,
         ar.*,
         (SELECT COUNT(*) FROM sale WHERE sale.store_id = s.storeid) AS store_sales,
         (SELECT
            COUNT(*)
          FROM
            sale, employee, employee_department
          WHERE
            sale.employee_id = employee.employeeid
            AND
            employee_department.employee_id = employee.employeeid
            AND
            employee_department.department_id = d.departmentid
         ) AS department_sales,
         (SELECT
            COUNT(*)
          FROM
            employee, employee_department, department
          WHERE
            employee_department.employee_id = employee.employeeid
            AND
            employee_department.department_id = department.departmentid
            AND
            department.store_id = s.storeid
         ) AS store_employees,
         (SELECT
            COUNT(*)
          FROM
            employee, employee_department
          WHERE
            employee_department.employee_id = employee.employeeid
            AND
            employee_department.department_id = d.departmentid
         ) AS department_employees
     FROM
         store s
          LEFT JOIN employee manager ON s.manager = manager.employeeid
         LEFT JOIN department d ON d.store_id = s.storeid
          LEFT JOIN employee department_head ON department_head.employeeid = d.department_head
          LEFT JOIN employee_department ed ON ed.department_id = d.departmentid
           LEFT JOIN employee e ON e.employeeid = ed.employee_id
            LEFT JOIN sale sa ON sa.employee_id = e.employeeid
             LEFT JOIN customer c ON c.customerid = sa.customer_id
             LEFT JOIN album al ON al.albumid = sa.album_id
              LEFT JOIN artist ar ON ar.artistid = al.artist_id

TOTAL_DURATION: 0.29014992713928
DB_DURATION:    0.1554069519043
     ]]>
     </para>
    </refsect3>
   </refsect2>
   <refsect2 id="{@id case07}">
    <title>Case 07: Case 03 revisited: Simplifications with Asterisk Shortcuts</title>
    <para>
     As documented under {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_elements.asterisk_shortcut}
     an asterisk can be used to treat all columns found in the result set the same.
    </para>
    <refsect3 id="{@id case07_php}">
     <title>case07.php</title>
     <para>
     case07.php looks like this:
     <programlisting role="php">
     <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
    "SELECT
        *
     FROM
        artist",
    array(
        'rootTag' => 'music_library',
        'rowTag' => 'artist',
        'idColumn' => 'artistid',
        'elements' => array(
            '*',
            'albums' => array(
                'sql' => array(
                    'data' => array(
                        'artistid'
                    ),
                    'query' => 'SELECT * FROM album WHERE artist_id = ?'
                ),
                'sql_options' => array(
                    'uncached'      => true,
                    'single_record' => false,
                    'merge'         => false,
                    'merge_master'  => false
                ),
                'rootTag' => 'albums',
                'rowTag' => 'album',
                'idColumn' => 'albumid',
                'elements' => array(
                    '*',
                    'artist_id' => '?:'
                )
            )
        )
    )
);

header('Content-Type: application/xml');

$dom->formatOutput = true;
print $dom->saveXML();
?>
      ]]>
      </programlisting>
       As in {@tutorial XML_Query2XML.pkg#casestudies.case03} we use two separate
       queries for the artist and the album tables. All columns of the artist
       table are child elements of the artist tags. The columns of the album
       table are all below the album tags - with one exception: the artist_id
       column is excluded as it only contains redundant information.
     </para>
    </refsect3>
    <refsect3 id="{@id case07_xml}">
     <title>case07.xml</title>
     <para>
     The resulting XML data is identical with {@tutorial XML_Query2XML.pkg#casestudies.case03.case03_xml}:
     <programlisting role="tutorial">
     <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<music_library>
  <artist>
    <artistid>1</artistid>
    <name>Curtis Mayfield</name>
    <birth_year>1920</birth_year>
    <birth_place>Chicago</birth_place>
    <genre>Soul</genre>
    <albums>
      <album>
        <albumid>1</albumid>
        <title>New World Order</title>
        <published_year>1990</published_year>
        <comment>the best ever!</comment>
      </album>
      <album>
        <albumid>2</albumid>
        <title>Curtis</title>
        <published_year>1970</published_year>
        <comment>that man's got somthin' to say</comment>
      </album>
    </albums>
  </artist>
  <artist>
    <artistid>2</artistid>
    <name>Isaac Hayes</name>
    <birth_year>1942</birth_year>
    <birth_place>Tennessee</birth_place>
    <genre>Soul</genre>
    <albums>
      <album>
        <albumid>3</albumid>
        <title>Shaft</title>
        <published_year>1972</published_year>
        <comment>he's the man</comment>
      </album>
    </albums>
  </artist>
  <artist>
    <artistid>3</artistid>
    <name>Ray Charles</name>
    <birth_year>1930</birth_year>
    <birth_place>Mississippi</birth_place>
    <genre>Country and Soul</genre>
    <albums />
  </artist>
</music_library>
     ]]>
     </programlisting>
     </para>
    </refsect3>
    <refsect3 id="{@id case07_debug_php}">
     <title>case07_debug.php</title>
     <para>
     case07_debug.php is very similar to {@tutorial XML_Query2XML.pkg#casestudies.case03.case03_debug_php}:
     <programlisting role="php">
     <![CDATA[
<?php
require_once 'XML/Query2XML.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));

require_once 'Log.php';
$debugLogger = &Log::factory('file', 'case07.log', 'Query2XML');
$query2xml->enableDebugLog($debugLogger);

$query2xml->startProfiling();


$dom = $query2xml->getXML(
    "SELECT
        *
     FROM
        artist",
    array(
        'rootTag' => 'music_library',
        'rowTag' => 'artist',
        'idColumn' => 'artistid',
        'elements' => array(
            '*',
            'albums' => array(
                'sql' => array(
                    'data' => array(
                        'artistid'
                    ),
                    'query' => 'SELECT * FROM album WHERE artist_id = ?'
                ),
                'sql_options' => array(
                    'uncached'      => true,
                    'single_record' => false,
                    'merge'         => false,
                    'merge_master'  => false
                ),
                'rootTag' => 'albums',
                'rowTag' => 'album',
                'idColumn' => 'albumid',
                'elements' => array(
                    '*',
                    'artist_id' => '?:'
                )
            )
        )
    )
);

header('Content-Type: application/xml');

$dom->formatOutput = true;
print $dom->saveXML();

require_once 'File.php';
$fp = new File();
$fp->write('case07.profile', $query2xml->getProfile(), FILE_MODE_WRITE);
?>
     ]]>
     </programlisting>
     The lines 6-8 do the debugging, line 10 and 56-58 the profiling. This will create
     case07.log and case07.profile.
     </para>
    </refsect3>
    <refsect3 id="{@id case07_log}">
     <title>case07.log</title>
     <para>
     The format of a debug log file is documented at {@tutorial XML_Query2XML.pkg#debugging}.
     Our debug log now contains 4 queries:
     <![CDATA[
Apr 17 00:54:36 Query2XML [info] QUERY: SELECT
        *
     FROM
        artist
Apr 17 00:54:36 Query2XML [info] DONE
Apr 17 00:54:36 Query2XML [info] QUERY: SELECT * FROM album WHERE artist_id = ?
Apr 17 00:54:36 Query2XML [info] DONE
Apr 17 00:54:36 Query2XML [info] QUERY: SELECT * FROM album WHERE artist_id = ?
Apr 17 00:54:36 Query2XML [info] DONE
Apr 17 00:54:36 Query2XML [info] QUERY: SELECT * FROM album WHERE artist_id = ?
Apr 17 00:54:36 Query2XML [info] DONE
     ]]>
     </para>
     The debug log shows what we expected: the first SELECT over the artist table runs once
     and the SELECT over the album table runs three times (once for every record found in
     the artist table). As the log shows no 'CACHING' entries we also know that no cashing
     was performed (remember: we set the sql option uncached to true).
    </refsect3>
    <refsect3 id="{@id case07_profile}">
     <title>case07.profile</title>
     <para>
     Profiling is essential for performance tuning. The format of the output is documented under
     {@tutorial XML_Query2XML.pkg#profiling.getprofile}. Our profile looks like this:
     <![CDATA[
FROM_DB FROM_CACHE CACHED AVG_DURATION DURATION_SUM SQL
1       0          false  0.0018889904 0.0018889904 SELECT
        *
     FROM
        artist
3       0          false  0.0021993319 0.0065979957 SELECT * FROM album WHERE artist_id = ?

TOTAL_DURATION: 0.052389144897461
DB_DURATION:    0.016173124313354
     ]]>
     </para>
    </refsect3>
   </refsect2>
   <refsect2 id="{@id case08}">
    <title>Case 08: Case 06 revisited: Making use of Mappers</title>
    <para>
     Make sure you are familiar with {@tutorial XML_Query2XML.pkg#casestudies.case06}
     before proceeding. Case 08 is different from Case 06 in the following aspects:
     <itemizedlist>
      <listitem>
       All tags and attributes directly related to columns of the table "store" shall be uppercase;
       we'll directly use the PHP function strtoupper() and the 'FUNCTION' syntax for this purpose.
      </listitem>
      <listitem>
       All tags and attributes directly related to columns of the table "department" shall use
       a naming convention like "oneTwoThree" instead of "one_two_three";
       we'll use Mappers::departmentMapper() and the 'CLASS::STATIC_METHOD' syntax for this purpose.
      </listitem>
      <listitem>
       All tags and attributes directly related to columns of the table "employee" shall use
       a naming convention like "OneTwoThree" instead of "one_two_three";
       we'll use Mappers::employeeMapper() and the array('CLASS', 'STATIC_METHOD') syntax for this purpose.
      </listitem>
      <listitem>
       All tags and attributes directly related to columns of the table "sale" shall use
       a naming convention like "ONETWOTHREE" instead of "one_two_three";
       we'll use the non-static Mappers::saleMapper() and the array($instance, 'METHOD') syntax for this purpose.
      </listitem>
      <listitem>
       All tags and attributes directly related to columns of the table "customer" shall use
       the column names as they are defined in the database;
       we'll set the mapper option to false for this purpose.
      </listitem>
      <listitem>
       All tags and attributes directly related to columns of the table "album" shall use
       the ISO 9075-mapper; we'll use XML_Query2XML_ISO9075Mapper::map() and the 'CLASS::STATIC_METHOD'
       syntax for this purpose.
      </listitem>
      <listitem>
       All tags and attributes directly related to columns of the table "artist" shall use
       a naming convention like "onetwothree" instead of "one_two_three";
       we'll the function mapArtist as the mapper and the 'FUNCTION' syntax.
      </listitem>
     </itemizedlist>
     This certainly is not a very realistic scenario but it was chosen to demonstrate the
     different syntaxes for specifying a mapper function and how to use multiple
     mappers. This case also demonstrates that all XML names explicitly specified are
     not subject to any special mapping! For example the tag names "music_company" and
     "store" are left untouched because they are explicitly specified using the options
     "rootTag" and "rowTag". An other case is the tag "manager" which also stays untouched.
     This is because the array key ("manager" in this case) of a complex element specification
     is used for {@tutorial XML_Query2XML.pkg#query2xml_getxml.options_rowtag the option "rowTag"}
     per default. XML_Query2XML just does not pretend to be smart than you, the programmer. If you don't
     like the tag name "manager", use another array key for the complex element specification or
     use the "rowTag" option within the complex element specification.
    </para>
    <refsect3 id="{@id case08_php}">
     <title>case08.php</title>
     <para>
     case08.php looks like this:
     <programlisting role="php">
     <![CDATA[
<?php
class Mappers
{
    public static function departmentMapper($str)
    {
        //maps 'one_two_three' to 'oneTwoThree'
        return preg_replace("/(_)([a-z])/e", "strtoupper('\\2')", $str);
    }
    
    public static function employeeMapper($str)
    {
        //maps 'one_two_three' to 'OneTwoThree'
        return ucfirst(preg_replace("/(_)([a-z])/e", "strtoupper('\\2')", $str));
    }
    
    public function saleMapper($str)
    {
        //maps 'one_two_three' to 'ONETWOTHREE'
        return strtoupper(str_replace('_', '', $str));
    }
}

function mapArtist($str)
{
    //maps 'one_two_three' to 'onetwothree'
    return strtolower(str_replace('_', '', $str));
}

$myMappers = new Mappers();

require_once 'XML/Query2XML.php';
require_once 'XML/Query2XML/ISO9075Mapper.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));
$dom = $query2xml->getXML(
    "SELECT
         s.*,
         manager.employeeid AS manager_employeeid,
         manager.employeename AS manager_employeename,
         d.*,
         department_head.employeeid AS department_head_employeeid,
         department_head.employeename AS department_head_employeename,
         e.*,
         sa.*,
         c.*,
         al.*,
         ar.*,
         (SELECT COUNT(*) FROM sale WHERE sale.store_id = s.storeid) AS store_sales,
         (SELECT
            COUNT(*)
          FROM
            sale, employee, employee_department
          WHERE
            sale.employee_id = employee.employeeid
            AND
            employee_department.employee_id = employee.employeeid
            AND
            employee_department.department_id = d.departmentid
         ) AS department_sales,
         (SELECT
            COUNT(*)
          FROM
            employee, employee_department, department
          WHERE
            employee_department.employee_id = employee.employeeid
            AND
            employee_department.department_id = department.departmentid
            AND
            department.store_id = s.storeid
         ) AS store_employees,
         (SELECT
            COUNT(*)
          FROM
            employee, employee_department
          WHERE
            employee_department.employee_id = employee.employeeid
            AND
            employee_department.department_id = d.departmentid
         ) AS department_employees
     FROM
         store s
          LEFT JOIN employee manager ON s.manager = manager.employeeid
         LEFT JOIN department d ON d.store_id = s.storeid
          LEFT JOIN employee department_head ON department_head.employeeid = d.department_head
          LEFT JOIN employee_department ed ON ed.department_id = d.departmentid
           LEFT JOIN employee e ON e.employeeid = ed.employee_id
            LEFT JOIN sale sa ON sa.employee_id = e.employeeid
             LEFT JOIN customer c ON c.customerid = sa.customer_id
             LEFT JOIN album al ON al.albumid = sa.album_id
              LEFT JOIN artist ar ON ar.artistid = al.artist_id",
    array(
        'rootTag' => 'music_company',
        'rowTag' => 'store',
        'idColumn' => 'storeid',
        'mapper' => 'strtoupper',
        'attributes' => array(
            'storeid'
        ),
        'elements' => array(
            'store_sales',
            'store_employees',
            'manager' => array(
                'idColumn' => 'manager_employeeid',
                'attributes' => array(
                    'manager_employeeid'
                ),
                'elements' => array(
                    'manager_employeename'
                )
            ),
            'address' => array(
                'elements' => array(
                    'country',
                    'state' => '#Helper::getStatePostalCode()',
                    'city',
                    'street',
                    'phone'
                )
            ),
            'department' => array(
                'idColumn' => 'departmentid',
                'mapper' => 'Mappers::departmentMapper',
                'attributes' => array(
                    'departmentid'
                ),
                'elements' => array(
                    'department_sales',
                    'department_employees',
                    'departmentname',
                    'department_head' => array(
                        'idColumn' => 'department_head_employeeid',
                        'attributes' => array(
                            'department_head_employeeid'
                        ),
                        'elements' => array(
                            'department_head_employeename'
                        )
                    ),
                    'employees' => array(
                        'rootTag' => 'employees',
                        'rowTag' => 'employee',
                        'idColumn' => 'employeeid',
                        'mapper' => array('Mappers', 'employeeMapper'),
                        'attributes' => array(
                            'employeeid'
                        ),
                        'elements' => array(
                            'employeename',
                            'sales' => array(
                                'rootTag' => 'sales',
                                'rowTag' => 'sale',
                                'idColumn' => 'saleid',
                                'mapper' => array($myMappers, 'saleMapper'),
                                'attributes' => array(
                                    'saleid'
                                ),
                                'elements' => array(
                                    'timestamp',
                                    'customer' => array(
                                        'idColumn' => 'customerid',
                                        'mapper' => false,
                                        'attributes' => array(
                                            'customerid'
                                        ),
                                        'elements' => array(
                                            'first_name',
                                            'last_name',
                                            'email'
                                        )
                                    ),
                                    'album' => array(
                                        'idColumn' => 'albumid',
                                        'mapper' => 'XML_Query2XML_ISO9075Mapper::map',
                                        'attributes' => array(
                                            'albumid'
                                        ),
                                        'elements' => array(
                                            'title',
                                            'published_year',
                                            'comment' => '?#Helper::summarizeComment(12)',
                                            'artist' => array(
                                                'idColumn' => 'artistid',
                                                'mapper' => 'mapArtist',
                                                'attributes' => array(
                                                    'artistid'
                                                ),
                                                'elements' => array(
                                                    'name',
                                                    'birth_year',
                                                    'birth_place',
                                                    'genre'
                                                )
                                            )
                                        ) // album elements
                                    ) //album array
                                ) //sales elements
                            ) //sales array
                        ) //employees elements
                    ) //employees array
                ) //department elements
            ) // department array
        ) //root elements
    ) //root
); //getXML method call

$root = $dom->firstChild;
$root->setAttribute('date_generated', date("Y-m-d\TH:i:s", 1124801570));

header('Content-Type: application/xml');

$dom->formatOutput = true;
print $dom->saveXML();



/**Static class that provides validation and parsing methods for
* generating XML.
*
* It is static so that we can easyly call its methods from inside
* Query2XML using eval'd code.
*/
class Helper
{
    /**Associative array of US postal state codes*/
    public static $statePostalCodes = array(
        'ALABAMA' => 'AL', 'ALASKA' => 'AK', 'AMERICAN SAMOA' => 'AS', 'ARIZONA' => 'AZ', 'ARKANSAS' => 'AR', 'CALIFORNIA' => 'CA',
        'COLORADO' => 'CO', 'CONNECTICUT' => 'CT', 'DELAWARE' => 'DE', 'DISTRICT OF COLUMBIA' => 'DC', 'FEDERATED STATES OF MICRONESIA' => 'FM',
        'FLORIDA' => 'FL', 'GEORGIA' => 'GA', 'GUAM' => 'GU', 'HAWAII' => 'HI', 'IDAHO' => 'ID', 'ILLINOIS' => 'IL', 'INDIANA' => 'IN',
        'IOWA' => 'IA', 'KANSAS' => 'KS', 'KENTUCKY' => 'KY', 'LOUISIANA' => 'LA', 'MAINE' => 'ME', 'MARSHALL ISLANDS' => 'MH', 'MARYLAND' => 'MD',
        'MASSACHUSETTS' => 'MA', 'MICHIGAN' => 'MI', 'MINNESOTA' => 'MN', 'MISSISSIPPI' => 'MS', 'MISSOURI' => 'MO', 'MONTANA' => 'MT',
        'NEBRASKA' => 'NE', 'NEVADA' => 'NV', 'NEW HAMPSHIRE' => 'NH', 'NEW JERSEY' => 'NJ', 'NEW JESEY' => 'NJ', 'NEW MEXICO' => 'NM', 'NEW YORK' => 'NY',
        'NORTH CAROLINA' => 'NC', 'NORTH DAKOTA' => 'ND', 'NORTHERN MARIANA ISLANDS' => 'MP', 'OHIO' => 'OH', 'OKLAHOMA' => 'OK', 'OREGON' => 'OR',
        'PALAU' => 'PW', 'PENNSYLVANIA' => 'PA', 'PUERTO RICO' => 'PR', 'RHODE ISLAND' => 'RI', 'SOUTH CAROLINA' => 'SC', 'SOUTH DAKOTA' => 'SD',
        'TENNESSEE' => 'TN', 'TEXAS' => 'TX', 'UTAH' => 'UT', 'VERMONT' => 'VT', 'VIRGIN ISLANDS' => 'VI', 'VIRGINIA' => 'VA', 'WASHINGTON' => 'WA',
        'WEST VIRGINIA' => 'WV', 'WISCONSIN' => 'WI', 'WYOMING' => 'WY'
    );
            
    /**Translates a US state name into its two-letter postal code.
    * If the translation fails, $state is returned unchanged
    * @param $record The record
    */
    public static function getStatePostalCode($record)
    {
        $state = $record["state"];
        $s = str_replace("  ", " ", trim(strtoupper($state)));
        if (isset(self::$statePostalCodes[$s])) {
            return self::$statePostalCodes[$s];
        } else {
            return $state;
        }
    }
      
    function summarize($str, $limit=50, $appendString=' ...')
    {
        if (strlen($str) > $limit) {
            $str = substr($str, 0, $limit - strlen($appendString)) . $appendString;
        }
        return $str;
    }
    
    
    function summarizeComment($record, $limit)
    {
        return self::summarize($record["comment"], $limit);
    }
}
?>
     ]]>
     </programlisting>
     </para>
    </refsect3>
    <refsect3 id="{@id case08_xml}">
     <title>case08.xml</title>
     <para>
     The resulting XML data looks like this:
     <programlisting role="tutorial">
     <![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<music_company date_generated="2005-08-23T14:52:50">
    <store STOREID="1">
        <STORE_SALES>10</STORE_SALES>
        <STORE_EMPLOYEES>6</STORE_EMPLOYEES>
        <manager MANAGER_EMPLOYEEID="1">
            <MANAGER_EMPLOYEENAME>Michael Jones</MANAGER_EMPLOYEENAME>
        </manager>
        <address>
            <COUNTRY>US</COUNTRY>
            <STATE>NY</STATE>
            <CITY>New York</CITY>
            <STREET>Broadway &amp; 72nd Str</STREET>
            <PHONE>123 456 7890</PHONE>
        </address>
        <department departmentid="1">
            <departmentSales>10</departmentSales>
            <departmentEmployees>3</departmentEmployees>
            <departmentname>Sales</departmentname>
            <department_head departmentHeadEmployeeid="1">
                <departmentHeadEmployeename>Michael Jones</departmentHeadEmployeename>
            </department_head>
            <employees>
                <employee Employeeid="1">
                    <Employeename>Michael Jones</Employeename>
                    <sales>
                        <sale SALEID="1">
                            <TIMESTAMP>2005-05-25 16:32:00</TIMESTAMP>
                            <customer customerid="1">
                                <first_name>Jane</first_name>
                                <last_name>Doe</last_name>
                                <email>jane.doe@example.com</email>
                            </customer>
                            <album albumid="1">
                                <title>New World Order</title>
                                <published_year>1990</published_year>
                                <comment>the best ...</comment>
                                <artist artistid="1">
                                    <name>Curtis Mayfield</name>
                                    <birthyear>1920</birthyear>
                                    <birthplace>Chicago</birthplace>
                                    <genre>Soul</genre>
                                </artist>
                            </album>
                        </sale>
                        <sale SALEID="7">
                            <TIMESTAMP>2005-07-10 15:03:00</TIMESTAMP>
                            <customer customerid="7">
                                <first_name>Nick</first_name>
                                <last_name>Fallow</last_name>
                                <email>nick.fallow@example.com</email>
                            </customer>
                            <album albumid="1">
                                <title>New World Order</title>
                                <published_year>1990</published_year>
                                <comment>the best ...</comment>
                                <artist artistid="1">
                                    <name>Curtis Mayfield</name>
                                    <birthyear>1920</birthyear>
                                    <birthplace>Chicago</birthplace>
                                    <genre>Soul</genre>
                                </artist>
                            </album>
                        </sale>
                        <sale SALEID="16">
                            <TIMESTAMP>2005-06-05 12:56:12</TIMESTAMP>
                            <customer customerid="2">
                                <first_name>John</first_name>
                                <last_name>Doe</last_name>
                                <email>john.doe@example.com</email>
                            </customer>
                            <album albumid="3">
                                <title>Shaft</title>
                                <published_year>1972</published_year>
                                <comment>he's the man</comment>
                                <artist artistid="2">
                                    <name>Isaac Hayes</name>
                                    <birthyear>1942</birthyear>
                                    <birthplace>Tennessee</birthplace>
                                    <genre>Soul</genre>
                                </artist>
                            </album>
                        </sale>
                        <sale SALEID="19">
                            <TIMESTAMP>2005-07-10 16:03:01</TIMESTAMP>
                            <customer customerid="8">
                                <first_name>Ed</first_name>
                                <last_name>Burton</last_name>
                                <email>ed.burton@example.com</email>
                            </customer>
                            <album albumid="3">
                                <title>Shaft</title>
                                <published_year>1972</published_year>
                                <comment>he's the man</comment>
                                <artist artistid="2">
                                    <name>Isaac Hayes</name>
                                    <birthyear>1942</birthyear>
                                    <birthplace>Tennessee</birthplace>
                                    <genre>Soul</genre>
                                </artist>
                            </album>
                        </sale>
                    </sales>
                </employee>
                <employee Employeeid="2">
                    <Employeename>Susi Weintraub</Employeename>
                    <sales>
                        <sale SALEID="3">
                            <TIMESTAMP>2005-07-10 11:03:00</TIMESTAMP>
                            <customer customerid="3">
                                <first_name>Susan</first_name>
                                <last_name>Green</last_name>
                                <email>susan.green@example.com</email>
                            </customer>
                            <album albumid="1">
                                <title>New World Order</title>
                                <published_year>1990</published_year>
                                <comment>the best ...</comment>
                                <artist artistid="1">
                                    <name>Curtis Mayfield</name>
                                    <birthyear>1920</birthyear>
                                    <birthplace>Chicago</birthplace>
                                    <genre>Soul</genre>
                                </artist>
                            </album>
                        </sale>
                        <sale SALEID="9">
                            <TIMESTAMP>2005-07-10 18:03:00</TIMESTAMP>
                            <customer customerid="9">
                                <first_name>Jack</first_name>
                                <last_name>Woo</last_name>
                                <email>jack.woo@example.com</email>
                            </customer>
                            <album albumid="1">
                                <title>New World Order</title>
                                <published_year>1990</published_year>
                                <comment>the best ...</comment>
                                <artist artistid="1">
                                    <name>Curtis Mayfield</name>
                                    <birthyear>1920</birthyear>
                                    <birthplace>Chicago</birthplace>
                                    <genre>Soul</genre>
                                </artist>
                            </album>
                        </sale>
                        <sale SALEID="17">
                            <TIMESTAMP>2005-07-10 10:03:32</TIMESTAMP>
                            <customer customerid="4">
                                <first_name>Victoria</first_name>
                                <last_name>Alt</last_name>
                                <email>victory.alt@example.com</email>
                            </customer>
                            <album albumid="3">
                                <title>Shaft</title>
                                <published_year>1972</published_year>
                                <comment>he's the man</comment>
                                <artist artistid="2">
                                    <name>Isaac Hayes</name>
                                    <birthyear>1942</birthyear>
                                    <birthplace>Tennessee</birthplace>
                                    <genre>Soul</genre>
                                </artist>
                            </album>
                        </sale>
                        <sale SALEID="20">
                            <TIMESTAMP>2005-07-10 19:03:50</TIMESTAMP>
                            <customer customerid="10">
                                <first_name>Maria</first_name>
                                <last_name>Gonzales</last_name>
                                <email>maria.gonzales@example.com</email>
                            </customer>
                            <album albumid="3">
                                <title>Shaft</title>
                                <published_year>1972</published_year>
                                <comment>he's the man</comment>
                                <artist artistid="2">
                                    <name>Isaac Hayes</name>
                                    <birthyear>1942</birthyear>
                                    <birthplace>Tennessee</birthplace>
                                    <genre>Soul</genre>
                                </artist>
                            </album>
                        </sale>
                    </sales>
                </employee>
                <employee Employeeid="3">
                    <Employeename>Steve Hack</Employeename>
                    <sales>
                        <sale SALEID="5">
                            <TIMESTAMP>2005-07-10 13:03:00</TIMESTAMP>
                            <customer customerid="5">
                                <first_name>Will</first_name>
                                <last_name>Rippy</last_name>
                                <email>will.wippy@example.com</email>
                            </customer>
                            <album albumid="1">
                                <title>New World Order</title>
                                <published_year>1990</published_year>
                                <comment>the best ...</comment>
                                <artist artistid="1">
                                    <name>Curtis Mayfield</name>
                                    <birthyear>1920</birthyear>
                                    <birthplace>Chicago</birthplace>
                                    <genre>Soul</genre>
                                </artist>
                            </album>
                        </sale>
                        <sale SALEID="18">
                            <TIMESTAMP>2005-07-10 14:03:52</TIMESTAMP>
                            <customer customerid="6">
                                <first_name>Tim</first_name>
                                <last_name>Raw</last_name>
                                <email>tim.raw@example.com</email>
                            </customer>
                            <album albumid="3">
                                <title>Shaft</title>
                                <published_year>1972</published_year>
                                <comment>he's the man</comment>
                                <artist artistid="2">
                                    <name>Isaac Hayes</name>
                                    <birthyear>1942</birthyear>
                                    <birthplace>Tennessee</birthplace>
                                    <genre>Soul</genre>
                                </artist>
                            </album>
                        </sale>
                    </sales>
                </employee>
            </employees>
        </department>
        <department departmentid="2">
            <departmentSales>0</departmentSales>
            <departmentEmployees>3</departmentEmployees>
            <departmentname>Marketing</departmentname>
            <department_head departmentHeadEmployeeid="4">
                <departmentHeadEmployeename>Joan Kerr</departmentHeadEmployeename>
            </department_head>
            <employees>
                <employee Employeeid="4">
                    <Employeename>Joan Kerr</Employeename>
                    <sales />
                </employee>
                <employee Employeeid="5">
                    <Employeename>Marcus Roth</Employeename>
                    <sales />
                </employee>
                <employee Employeeid="6">
                    <Employeename>Jack Mack</Employeename>
                    <sales />
                </employee>
            </employees>
        </department>
    </store>
    <store STOREID="2">
        <STORE_SALES>10</STORE_SALES>
        <STORE_EMPLOYEES>6</STORE_EMPLOYEES>
        <manager MANAGER_EMPLOYEEID="2">
            <MANAGER_EMPLOYEENAME>Susi Weintraub</MANAGER_EMPLOYEENAME>
        </manager>
        <address>
            <COUNTRY>US</COUNTRY>
            <STATE>NY</STATE>
            <CITY>Larchmont</CITY>
            <STREET>Palmer Ave 71</STREET>
            <PHONE>456 7890</PHONE>
        </address>
        <department departmentid="3">
            <departmentSales>10</departmentSales>
            <departmentEmployees>3</departmentEmployees>
            <departmentname>Sales</departmentname>
            <department_head departmentHeadEmployeeid="7">
                <departmentHeadEmployeename>Rita Doktor</departmentHeadEmployeename>
            </department_head>
            <employees>
                <employee Employeeid="7">
                    <Employeename>Rita Doktor</Employeename>
                    <sales>
                        <sale SALEID="2">
                            <TIMESTAMP>2005-06-05 12:56:00</TIMESTAMP>
                            <customer customerid="2">
                                <first_name>John</first_name>
                                <last_name>Doe</last_name>
                                <email>john.doe@example.com</email>
                            </customer>
                            <album albumid="1">
                                <title>New World Order</title>
                                <published_year>1990</published_year>
                                <comment>the best ...</comment>
                                <artist artistid="1">
                                    <name>Curtis Mayfield</name>
                                    <birthyear>1920</birthyear>
                                    <birthplace>Chicago</birthplace>
                                    <genre>Soul</genre>
                                </artist>
                            </album>
                        </sale>
                        <sale SALEID="8">
                            <TIMESTAMP>2005-07-10 16:03:00</TIMESTAMP>
                            <customer customerid="8">
                                <first_name>Ed</first_name>
                                <last_name>Burton</last_name>
                                <email>ed.burton@example.com</email>
                            </customer>
                            <album albumid="1">
                                <title>New World Order</title>
                                <published_year>1990</published_year>
                                <comment>the best ...</comment>
                                <artist artistid="1">
                                    <name>Curtis Mayfield</name>
                                    <birthyear>1920</birthyear>
                                    <birthplace>Chicago</birthplace>
                                    <genre>Soul</genre>
                                </artist>
                            </album>
                        </sale>
                        <sale SALEID="11">
                            <TIMESTAMP>2005-05-25 16:23:00</TIMESTAMP>
                            <customer customerid="1">
                                <first_name>Jane</first_name>
                                <last_name>Doe</last_name>
                                <email>jane.doe@example.com</email>
                            </customer>
                            <album albumid="2">
                                <title>Curtis</title>
                                <published_year>1970</published_year>
                                <comment>that man ...</comment>
                                <artist artistid="1">
                                    <name>Curtis Mayfield</name>
                                    <birthyear>1920</birthyear>
                                    <birthplace>Chicago</birthplace>
                                    <genre>Soul</genre>
                                </artist>
                            </album>
                        </sale>
                        <sale SALEID="14">
                            <TIMESTAMP>2005-07-10 15:09:00</TIMESTAMP>
                            <customer customerid="7">
                                <first_name>Nick</first_name>
                                <last_name>Fallow</last_name>
                                <email>nick.fallow@example.com</email>
                            </customer>
                            <album albumid="2">
                                <title>Curtis</title>
                                <published_year>1970</published_year>
                                <comment>that man ...</comment>
                                <artist artistid="1">
                                    <name>Curtis Mayfield</name>
                                    <birthyear>1920</birthyear>
                                    <birthplace>Chicago</birthplace>
                                    <genre>Soul</genre>
                                </artist>
                            </album>
                        </sale>
                    </sales>
                </employee>
                <employee Employeeid="8">
                    <Employeename>David Til</Employeename>
                    <sales>
                        <sale SALEID="4">
                            <TIMESTAMP>2005-07-10 10:03:00</TIMESTAMP>
                            <customer customerid="4">
                                <first_name>Victoria</first_name>
                                <last_name>Alt</last_name>
                                <email>victory.alt@example.com</email>
                            </customer>
                            <album albumid="1">
                                <title>New World Order</title>
                                <published_year>1990</published_year>
                                <comment>the best ...</comment>
                                <artist artistid="1">
                                    <name>Curtis Mayfield</name>
                                    <birthyear>1920</birthyear>
                                    <birthplace>Chicago</birthplace>
                                    <genre>Soul</genre>
                                </artist>
                            </album>
                        </sale>
                        <sale SALEID="10">
                            <TIMESTAMP>2005-07-10 19:03:00</TIMESTAMP>
                            <customer customerid="10">
                                <first_name>Maria</first_name>
                                <last_name>Gonzales</last_name>
                                <email>maria.gonzales@example.com</email>
                            </customer>
                            <album albumid="1">
                                <title>New World Order</title>
                                <published_year>1990</published_year>
                                <comment>the best ...</comment>
                                <artist artistid="1">
                                    <name>Curtis Mayfield</name>
                                    <birthyear>1920</birthyear>
                                    <birthplace>Chicago</birthplace>
                                    <genre>Soul</genre>
                                </artist>
                            </album>
                        </sale>
                        <sale SALEID="12">
                            <TIMESTAMP>2005-07-10 11:56:00</TIMESTAMP>
                            <customer customerid="3">
                                <first_name>Susan</first_name>
                                <last_name>Green</last_name>
                                <email>susan.green@example.com</email>
                            </customer>
                            <album albumid="2">
                                <title>Curtis</title>
                                <published_year>1970</published_year>
                                <comment>that man ...</comment>
                                <artist artistid="1">
                                    <name>Curtis Mayfield</name>
                                    <birthyear>1920</birthyear>
                                    <birthplace>Chicago</birthplace>
                                    <genre>Soul</genre>
                                </artist>
                            </album>
                        </sale>
                        <sale SALEID="15">
                            <TIMESTAMP>2005-07-10 18:49:00</TIMESTAMP>
                            <customer customerid="9">
                                <first_name>Jack</first_name>
                                <last_name>Woo</last_name>
                                <email>jack.woo@example.com</email>
                            </customer>
                            <album albumid="2">
                                <title>Curtis</title>
                                <published_year>1970</published_year>
                                <comment>that man ...</comment>
                                <artist artistid="1">
                                    <name>Curtis Mayfield</name>
                                    <birthyear>1920</birthyear>
                                    <birthplace>Chicago</birthplace>
                                    <genre>Soul</genre>
                                </artist>
                            </album>
                        </sale>
                    </sales>
                </employee>
                <employee Employeeid="9">
                    <Employeename>Pia Eist</Employeename>
                    <sales>
                        <sale SALEID="6">
                            <TIMESTAMP>2005-07-10 14:03:00</TIMESTAMP>
                            <customer customerid="6">
                                <first_name>Tim</first_name>
                                <last_name>Raw</last_name>
                                <email>tim.raw@example.com</email>
                            </customer>
                            <album albumid="1">
                                <title>New World Order</title>
                                <published_year>1990</published_year>
                                <comment>the best ...</comment>
                                <artist artistid="1">
                                    <name>Curtis Mayfield</name>
                                    <birthyear>1920</birthyear>
                                    <birthplace>Chicago</birthplace>
                                    <genre>Soul</genre>
                                </artist>
                            </album>
                        </sale>
                        <sale SALEID="13">
                            <TIMESTAMP>2005-07-10 13:12:00</TIMESTAMP>
                            <customer customerid="5">
                                <first_name>Will</first_name>
                                <last_name>Rippy</last_name>
                                <email>will.wippy@example.com</email>
                            </customer>
                            <album albumid="2">
                                <title>Curtis</title>
                                <published_year>1970</published_year>
                                <comment>that man ...</comment>
                                <artist artistid="1">
                                    <name>Curtis Mayfield</name>
                                    <birthyear>1920</birthyear>
                                    <birthplace>Chicago</birthplace>
                                    <genre>Soul</genre>
                                </artist>
                            </album>
                        </sale>
                    </sales>
                </employee>
            </employees>
        </department>
        <department departmentid="4">
            <departmentSales>0</departmentSales>
            <departmentEmployees>3</departmentEmployees>
            <departmentname>Marketing</departmentname>
            <department_head departmentHeadEmployeeid="10">
                <departmentHeadEmployeename>Hanna Poll</departmentHeadEmployeename>
            </department_head>
            <employees>
                <employee Employeeid="10">
                    <Employeename>Hanna Poll</Employeename>
                    <sales />
                </employee>
                <employee Employeeid="11">
                    <Employeename>Jim Wells</Employeename>
                    <sales />
                </employee>
                <employee Employeeid="12">
                    <Employeename>Sandra Wilson</Employeename>
                    <sales />
                </employee>
            </employees>
        </department>
    </store>
</music_company>
     ]]>
     </programlisting>
     </para>
    </refsect3>
    <refsect3 id="{@id case08_debug_php}">
     <title>case08_debug.php</title>
     <para>
     case08_debug.php:
     <programlisting role="php">
     <![CDATA[
<?php
class Mappers
{
    public static function departmentMapper($str)
    {
        //maps 'one_two_three' to 'oneTwoThree'
        return preg_replace("/(_)([a-z])/e", "strtoupper('\\2')", $str);
    }
    
    public static function employeeMapper($str)
    {
        //maps 'one_two_three' to 'OneTwoThree'
        return ucfirst(preg_replace("/(_)([a-z])/e", "strtoupper('\\2')", $str));
    }
    
    public function saleMapper($str)
    {
        //maps 'one_two_three' to 'ONETWOTHREE'
        return strtoupper(str_replace('_', '', $str));
    }
}

function mapArtist($str)
{
    //maps 'one_two_three' to 'onetwothree'
    return strtolower(str_replace('_', '', $str));
}

$myMappers = new Mappers();

require_once 'XML/Query2XML.php';
require_once 'XML/Query2XML/ISO9075Mapper.php';
require_once 'MDB2.php';
$query2xml = XML_Query2XML::factory(MDB2::factory('mysql://root@localhost/Query2XML_Tests'));

require_once 'Log.php';
$debugLogger = &Log::factory('file', 'case08.log', 'XML_Query2XML');
$query2xml->enableDebugLog($debugLogger);

$query2xml->startProfiling();


$dom = $query2xml->getXML(
    "SELECT
         s.*,
         manager.employeeid AS manager_employeeid,
         manager.employeename AS manager_employeename,
         d.*,
         department_head.employeeid AS department_head_employeeid,
         department_head.employeename AS department_head_employeename,
         e.*,
         sa.*,
         c.*,
         al.*,
         ar.*,
         (SELECT COUNT(*) FROM sale WHERE sale.store_id = s.storeid) AS store_sales,
         (SELECT
            COUNT(*)
          FROM
            sale, employee, employee_department
          WHERE
            sale.employee_id = employee.employeeid
            AND
            employee_department.employee_id = employee.employeeid
            AND
            employee_department.department_id = d.departmentid
         ) AS department_sales,
         (SELECT
            COUNT(*)
          FROM
            employee, employee_department, department
          WHERE
            employee_department.employee_id = employee.employeeid
            AND
            employee_department.department_id = department.departmentid
            AND
            department.store_id = s.storeid
         ) AS store_employees,
         (SELECT
            COUNT(*)
          FROM
            employee, employee_department
          WHERE
            employee_department.employee_id = employee.employeeid
            AND
            employee_department.department_id = d.departmentid
         ) AS department_employees
     FROM
         store s
          LEFT JOIN employee manager ON s.manager = manager.employeeid
         LEFT JOIN department d ON d.store_id = s.storeid
          LEFT JOIN employee department_head ON department_head.employeeid = d.department_head
          LEFT JOIN employee_department ed ON ed.department_id = d.departmentid
           LEFT JOIN employee e ON e.employeeid = ed.employee_id
            LEFT JOIN sale sa ON sa.employee_id = e.employeeid
             LEFT JOIN customer c ON c.customerid = sa.customer_id
             LEFT JOIN album al ON al.albumid = sa.album_id
              LEFT JOIN artist ar ON ar.artistid = al.artist_id",
    array(
        'rootTag' => 'music_company',
        'rowTag' => 'store',
        'idColumn' => 'storeid',
        'mapper' => 'strtoupper',
        'attributes' => array(
            'storeid'
        ),
        'elements' => array(
            'store_sales',
            'store_employees',
            'manager' => array(
                'idColumn' => 'manager_employeeid',
                'attributes' => array(
                    'manager_employeeid'
                ),
                'elements' => array(
                    'manager_employeename'
                )
            ),
            'address' => array(
                'elements' => array(
                    'country',
                    'state' => '!return Helper::getStatePostalCode($record["state"]);',
                    'city',
                    'street',
                    'phone'
                )
            ),
            'department' => array(
                'idColumn' => 'departmentid',
                'mapper' => 'Mappers::departmentMapper',
                'attributes' => array(
                    'departmentid'
                ),
                'elements' => array(
                    'department_sales',
                    'department_employees',
                    'departmentname',
                    'department_head' => array(
                        'idColumn' => 'department_head_employeeid',
                        'attributes' => array(
                            'department_head_employeeid'
                        ),
                        'elements' => array(
                            'department_head_employeename'
                        )
                    ),
                    'employees' => array(
                        'rootTag' => 'employees',
                        'rowTag' => 'employee',
                        'idColumn' => 'employeeid',
                        'mapper' => array('Mappers', 'employeeMapper'),
                        'attributes' => array(
                            'employeeid'
                        ),
                        'elements' => array(
                            'employeename',
                            'sales' => array(
                                'rootTag' => 'sales',
                                'rowTag' => 'sale',
                                'idColumn' => 'saleid',
                                'mapper' => array($myMappers, 'saleMapper'),
                                'attributes' => array(
                                    'saleid'
                                ),
                                'elements' => array(
                                    'timestamp',
                                    'customer' => array(
                                        'idColumn' => 'customerid',
                                        'mapper' => false,
                                        'attributes' => array(
                                            'customerid'
                                        ),
                                        'elements' => array(
                                            'first_name',
                                            'last_name',
                                            'email'
                                        )
                                    ),
                                    'album' => array(
                                        'idColumn' => 'albumid',
                                        'mapper' => 'XML_Query2XML_ISO9075Mapper::map',
                                        'attributes' => array(
                                            'albumid'
                                        ),
                                        'elements' => array(
                                            'title',
                                            'published_year',
                                            'comment' => '?!return Helper::summarize($record["comment"], 12);',
                                            'artist' => array(
                                                'idColumn' => 'artistid',
                                                'mapper' => 'mapArtist',
                                                'attributes' => array(
                                                    'artistid'
                                                ),
                                                'elements' => array(
                                                    'name',
                                                    'birth_year',
                                                    'birth_place',
                                                    'genre'
                                                )
                                            )
                                        ) // album elements
                                    ) //album array
                                ) //sales elements
                            ) //sales array
                        ) //employees elements
                    ) //employees array
                ) //department elements
            ) // department array
        ) //root elements
    ) //root
); //getXML method call

$root = $dom->firstChild;
$root->setAttribute('date_generated', date("Y-m-d\TH:i:s", 1124801570));

header('Content-Type: application/xml');

$dom->formatOutput = true;
print $dom->saveXML();

require_once 'File.php';
$fp = new File();
$fp->write('case08.profile', $query2xml->getProfile(), FILE_MODE_WRITE);


/**Static class that provides validation and parsing methods for
* generating XML.
*
* It is static so that we can easyly call its methods from inside
* Query2XML using eval'd code.
*/
class Helper
{
    /**Associative array of US postal state codes*/
    public static $statePostalCodes = array(
        'ALABAMA' => 'AL', 'ALASKA' => 'AK', 'AMERICAN SAMOA' => 'AS', 'ARIZONA' => 'AZ', 'ARKANSAS' => 'AR', 'CALIFORNIA' => 'CA',
        'COLORADO' => 'CO', 'CONNECTICUT' => 'CT', 'DELAWARE' => 'DE', 'DISTRICT OF COLUMBIA' => 'DC', 'FEDERATED STATES OF MICRONESIA' => 'FM',
        'FLORIDA' => 'FL', 'GEORGIA' => 'GA', 'GUAM' => 'GU', 'HAWAII' => 'HI', 'IDAHO' => 'ID', 'ILLINOIS' => 'IL', 'INDIANA' => 'IN',
        'IOWA' => 'IA', 'KANSAS' => 'KS', 'KENTUCKY' => 'KY', 'LOUISIANA' => 'LA', 'MAINE' => 'ME', 'MARSHALL ISLANDS' => 'MH', 'MARYLAND' => 'MD',
        'MASSACHUSETTS' => 'MA', 'MICHIGAN' => 'MI', 'MINNESOTA' => 'MN', 'MISSISSIPPI' => 'MS', 'MISSOURI' => 'MO', 'MONTANA' => 'MT',
        'NEBRASKA' => 'NE', 'NEVADA' => 'NV', 'NEW HAMPSHIRE' => 'NH', 'NEW JERSEY' => 'NJ', 'NEW JESEY' => 'NJ', 'NEW MEXICO' => 'NM', 'NEW YORK' => 'NY',
        'NORTH CAROLINA' => 'NC', 'NORTH DAKOTA' => 'ND', 'NORTHERN MARIANA ISLANDS' => 'MP', 'OHIO' => 'OH', 'OKLAHOMA' => 'OK', 'OREGON' => 'OR',
        'PALAU' => 'PW', 'PENNSYLVANIA' => 'PA', 'PUERTO RICO' => 'PR', 'RHODE ISLAND' => 'RI', 'SOUTH CAROLINA' => 'SC', 'SOUTH DAKOTA' => 'SD',
        'TENNESSEE' => 'TN', 'TEXAS' => 'TX', 'UTAH' => 'UT', 'VERMONT' => 'VT', 'VIRGIN ISLANDS' => 'VI', 'VIRGINIA' => 'VA', 'WASHINGTON' => 'WA',
        'WEST VIRGINIA' => 'WV', 'WISCONSIN' => 'WI', 'WYOMING' => 'WY'
    );
            
    /**Translates a US state name into its two-letter postal code.
    * If the translation fails, $state is returned unchanged
    * @param $state The state's name
    */
    public static function getStatePostalCode($state)
    {
        $s = str_replace("  ", " ", trim(strtoupper($state)));
        if (isset(self::$statePostalCodes[$s])) {
            return self::$statePostalCodes[$s];
        } else {
            return $state;
        }
    }
      
    function summarize($str, $limit=50, $appendString=' ...')
    {
        if (strlen($str) > $limit) {
            $str = substr($str, 0, $limit - strlen($appendString)) . $appendString;
        }
        return $str;
    }
}
?>
     ]]>
     </programlisting>
     The lines 36-38 do the debugging, line 40 and 224-226 the profiling. This will create
     case08.log and case08.profile.
     </para>
    </refsect3>
    <refsect3 id="{@id case08_log}">
     <title>case08.log</title>
     <para>
     The format of a debug log file is documented at {@tutorial XML_Query2XML.pkg#debugging}.
     Our debug log contains just a single query:
     <![CDATA[
Apr 20 13:33:47 XML_Query2XML [info] QUERY: SELECT
         s.*,
         manager.employeeid AS manager_employeeid,
         manager.employeename AS manager_employeename,
         d.*,
         department_head.employeeid AS department_head_employeeid,
         department_head.employeename AS department_head_employeename,
         e.*,
         sa.*,
         c.*,
         al.*,
         ar.*,
         (SELECT COUNT(*) FROM sale WHERE sale.store_id = s.storeid) AS store_sales,
         (SELECT
            COUNT(*)
          FROM
            sale, employee, employee_department
          WHERE
            sale.employee_id = employee.employeeid
            AND
            employee_department.employee_id = employee.employeeid
            AND
            employee_department.department_id = d.departmentid
         ) AS department_sales,
         (SELECT
            COUNT(*)
          FROM
            employee, employee_department, department
          WHERE
            employee_department.employee_id = employee.employeeid
            AND
            employee_department.department_id = department.departmentid
            AND
            department.store_id = s.storeid
         ) AS store_employees,
         (SELECT
            COUNT(*)
          FROM
            employee, employee_department
          WHERE
            employee_department.employee_id = employee.employeeid
            AND
            employee_department.department_id = d.departmentid
         ) AS department_employees
     FROM
         store s
          LEFT JOIN employee manager ON s.manager = manager.employeeid
         LEFT JOIN department d ON d.store_id = s.storeid
          LEFT JOIN employee department_head ON department_head.employeeid = d.department_head
          LEFT JOIN employee_department ed ON ed.department_id = d.departmentid
           LEFT JOIN employee e ON e.employeeid = ed.employee_id
            LEFT JOIN sale sa ON sa.employee_id = e.employeeid
             LEFT JOIN customer c ON c.customerid = sa.customer_id
             LEFT JOIN album al ON al.albumid = sa.album_id
              LEFT JOIN artist ar ON ar.artistid = al.artist_id
Apr 20 13:33:47 XML_Query2XML [info] DONE
     ]]>
     </para>
    </refsect3>
    <refsect3 id="{@id case08_profile}">
     <title>case08.profile</title>
     <para>
     The format of the output is documented under
     {@tutorial XML_Query2XML.pkg#profiling.getprofile}:
     <![CDATA[
FROM_DB FROM_CACHE CACHED AVG_DURATION DURATION_SUM SQL
1       0          false  0.0101430416 0.0101430416 SELECT
         s.*,
         manager.employeeid AS manager_employeeid,
         manager.employeename AS manager_employeename,
         d.*,
         department_head.employeeid AS department_head_employeeid,
         department_head.employeename AS department_head_employeename,
         e.*,
         sa.*,
         c.*,
         al.*,
         ar.*,
         (SELECT COUNT(*) FROM sale WHERE sale.store_id = s.storeid) AS store_sales,
         (SELECT
            COUNT(*)
          FROM
            sale, employee, employee_department
          WHERE
            sale.employee_id = employee.employeeid
            AND
            employee_department.employee_id = employee.employeeid
            AND
            employee_department.department_id = d.departmentid
         ) AS department_sales,
         (SELECT
            COUNT(*)
          FROM
            employee, employee_department, department
          WHERE
            employee_department.employee_id = employee.employeeid
            AND
            employee_department.department_id = department.departmentid
            AND
            department.store_id = s.storeid
         ) AS store_employees,
         (SELECT
            COUNT(*)
          FROM
            employee, employee_department
          WHERE
            employee_department.employee_id = employee.employeeid
            AND
            employee_department.department_id = d.departmentid
         ) AS department_employees
     FROM
         store s
          LEFT JOIN employee manager ON s.manager = manager.employeeid
         LEFT JOIN department d ON d.store_id = s.storeid
          LEFT JOIN employee department_head ON department_head.employeeid = d.department_head
          LEFT JOIN employee_department ed ON ed.department_id = d.departmentid
           LEFT JOIN employee e ON e.employeeid = ed.employee_id
            LEFT JOIN sale sa ON sa.employee_id = e.employeeid
             LEFT JOIN customer c ON c.customerid = sa.customer_id
             LEFT JOIN album al ON al.albumid = sa.album_id
              LEFT JOIN artist ar ON ar.artistid = al.artist_id

TOTAL_DURATION: 0.36341714859009
DB_DURATION:    0.20340394973755
     ]]>
     </para>
    </refsect3>
   </refsect2>
   <refsect2 id="{@id finalnotes}">
    <title>Final Notes on the case studies</title>
    <para>
     The files of all cases are installed in $PHP_PEAR_DOC_DIR/XML_Query2XML/cases/.
    </para>
   </refsect2>
  </refsect1>  

  <refsect1 id="{@id sqlddl}">
   <title>SQL DDL used in all examples</title>
   <para>
   	In all the examples a MySQL database created with the SQL DDL shown below is used.
   	You might also want to have a look at the
   	{@link http://query2xml.sourceforge.net/docs/Query2XML_Tests.jpg ER diagram}.
    <![CDATA[
CREATE DATABASE Query2XML_Tests;
USE Query2XML_Tests;


CREATE TABLE artist (
  artistid INT NOT NULL AUTO_INCREMENT,
  name VARCHAR(255),
  birth_year Int,
  birth_place VARCHAR(255),
  genre VARCHAR(255),
  UNIQUE (artistid),
  PRIMARY KEY (artistid)
);

CREATE TABLE customer (
  customerid INT NOT NULL AUTO_INCREMENT,
  first_name VARCHAR(255),
  last_name VARCHAR(255),
  email VARCHAR(255),
  UNIQUE (customerid),
  PRIMARY KEY (customerid)
);

CREATE TABLE album (
  albumid INT NOT NULL AUTO_INCREMENT,
  artist_id INT NOT NULL,
  title VARCHAR(255),
  published_year Int,
  comment VARCHAR(255),
  UNIQUE (albumid),
  PRIMARY KEY (albumid),
  FOREIGN KEY (artist_id) REFERENCES artist (artistid)
);

CREATE TABLE employee (
  employeeid INT NOT NULL AUTO_INCREMENT,
  employeename VARCHAR(255),
  UNIQUE (employeeid),
  PRIMARY KEY (employeeid)
);

CREATE TABLE store (
  storeid INT NOT NULL AUTO_INCREMENT,
  manager INT NOT NULL,
  country VARCHAR(255),
  state VARCHAR(255),
  city VARCHAR(255),
  street VARCHAR(255),
  phone VARCHAR(255),
  UNIQUE (storeid),
  PRIMARY KEY (storeid),
  FOREIGN KEY (manager) REFERENCES employee (employeeid)
);

CREATE TABLE department (
  departmentid INT NOT NULL AUTO_INCREMENT,
  store_id INT NOT NULL,
  department_head INT NOT NULL,
  departmentname VARCHAR(255),
  UNIQUE (departmentid),
  PRIMARY KEY (departmentid),
  FOREIGN KEY (department_head) REFERENCES employee (employeeid),
  FOREIGN KEY (store_id) REFERENCES store (storeid)
);

CREATE TABLE employee_department (
  employee_id INT NOT NULL,
  department_id INT NOT NULL,
  PRIMARY KEY (employee_id,department_id),
  FOREIGN KEY (employee_id) REFERENCES employee (employeeid),
  FOREIGN KEY (department_id) REFERENCES department (departmentid)
);

CREATE TABLE sale (
  saleid INT NOT NULL AUTO_INCREMENT,
  album_id INT NOT NULL,
  customer_id INT NOT NULL,
  employee_id INT NOT NULL,
  store_id INT NOT NULL,
  timestamp Timestamp(14),
  UNIQUE (saleid),
  PRIMARY KEY (saleid),
  FOREIGN KEY (employee_id) REFERENCES employee (employeeid),
  FOREIGN KEY (album_id) REFERENCES album (albumid),
  FOREIGN KEY (customer_id) REFERENCES customer (customerid),
  FOREIGN KEY (store_id) REFERENCES store (storeid)
);



INSERT INTO artist (artistid, name, birth_year, birth_place, genre) VALUES(1, 'Curtis Mayfield', 1920, 'Chicago', 'Soul');
INSERT INTO artist (artistid, name, birth_year, birth_place, genre) VALUES(2, 'Isaac Hayes', 1942, 'Tennessee', 'Soul');
INSERT INTO artist (artistid, name, birth_year, birth_place, genre) VALUES(3, 'Ray Charles', 1930, 'Mississippi', 'Country and Soul');

INSERT INTO album (albumid, artist_id, title, published_year, comment) VALUES(1, 1, 'New World Order', 1990, 'the best ever!');
INSERT INTO album (albumid, artist_id, title, published_year, comment) VALUES(2, 1, 'Curtis', 1970, 'that man\'s got somthin\' to say');
INSERT INTO album (albumid, artist_id, title, published_year, comment) VALUES(3, 2, 'Shaft', 1972, 'he\'s the man');

INSERT INTO customer (customerid, first_name, last_name, email) VALUES(1, 'Jane', 'Doe', 'jane.doe@example.com');
INSERT INTO customer (customerid, first_name, last_name, email) VALUES(2, 'John', 'Doe', 'john.doe@example.com');
INSERT INTO customer (customerid, first_name, last_name, email) VALUES(3, 'Susan', 'Green', 'susan.green@example.com');
INSERT INTO customer (customerid, first_name, last_name, email) VALUES(4, 'Victoria', 'Alt', 'victory.alt@example.com');
INSERT INTO customer (customerid, first_name, last_name, email) VALUES(5, 'Will', 'Rippy', 'will.wippy@example.com');
INSERT INTO customer (customerid, first_name, last_name, email) VALUES(6, 'Tim', 'Raw', 'tim.raw@example.com');
INSERT INTO customer (customerid, first_name, last_name, email) VALUES(7, 'Nick', 'Fallow', 'nick.fallow@example.com');
INSERT INTO customer (customerid, first_name, last_name, email) VALUES(8, 'Ed', 'Burton', 'ed.burton@example.com');
INSERT INTO customer (customerid, first_name, last_name, email) VALUES(9, 'Jack', 'Woo', 'jack.woo@example.com');
INSERT INTO customer (customerid, first_name, last_name, email) VALUES(10, 'Maria', 'Gonzales', 'maria.gonzales@example.com');

INSERT INTO employee (employeeid, employeename) VALUES(1, 'Michael Jones');
INSERT INTO employee (employeeid, employeename) VALUES(2, 'Susi Weintraub');
INSERT INTO employee (employeeid, employeename) VALUES(3, 'Steve Hack');
INSERT INTO employee (employeeid, employeename) VALUES(4, 'Joan Kerr');
INSERT INTO employee (employeeid, employeename) VALUES(5, 'Marcus Roth');
INSERT INTO employee (employeeid, employeename) VALUES(6, 'Jack Mack');
INSERT INTO employee (employeeid, employeename) VALUES(7, 'Rita Doktor');
INSERT INTO employee (employeeid, employeename) VALUES(8, 'David Til');
INSERT INTO employee (employeeid, employeename) VALUES(9, 'Pia Eist');
INSERT INTO employee (employeeid, employeename) VALUES(10, 'Hanna Poll');
INSERT INTO employee (employeeid, employeename) VALUES(11, 'Jim Wells');
INSERT INTO employee (employeeid, employeename) VALUES(12, 'Sandra Wilson');

INSERT INTO store (storeid, manager, country, state, city, street, phone) VALUES(1, 1, 'US', 'New York', 'New York', 'Broadway & 72nd Str', '123 456 7890');
INSERT INTO store (storeid, manager, country, state, city, street, phone) VALUES(2, 2, 'US', 'New York', 'Larchmont', 'Palmer Ave 71', '456 7890');

INSERT INTO department (departmentid, store_id, department_head, departmentname) VALUES(1, 1, 1, 'Sales');
INSERT INTO department (departmentid, store_id, department_head, departmentname) VALUES(2, 1, 4, 'Marketing');
INSERT INTO department (departmentid, store_id, department_head, departmentname) VALUES(3, 2, 7, 'Sales');
INSERT INTO department (departmentid, store_id, department_head, departmentname) VALUES(4, 2, 10, 'Marketing');

INSERT INTO employee_department (employee_id, department_id) VALUES(1, 1);
INSERT INTO employee_department (employee_id, department_id) VALUES(2, 1);
INSERT INTO employee_department (employee_id, department_id) VALUES(3, 1);
INSERT INTO employee_department (employee_id, department_id) VALUES(4, 2);
INSERT INTO employee_department (employee_id, department_id) VALUES(5, 2);
INSERT INTO employee_department (employee_id, department_id) VALUES(6, 2);
INSERT INTO employee_department (employee_id, department_id) VALUES(7, 3);
INSERT INTO employee_department (employee_id, department_id) VALUES(8, 3);
INSERT INTO employee_department (employee_id, department_id) VALUES(9, 3);
INSERT INTO employee_department (employee_id, department_id) VALUES(10, 4);
INSERT INTO employee_department (employee_id, department_id) VALUES(11, 4);
INSERT INTO employee_department (employee_id, department_id) VALUES(12, 4);

INSERT INTO sale (saleid, customer_id, album_id, employee_id, store_id, timestamp) VALUES (1,  1,  1, 1, 1, '2005-05-25 16:32:00');
INSERT INTO sale (saleid, customer_id, album_id, employee_id, store_id, timestamp) VALUES (2,  2,  1, 7, 2, '2005-06-05 12:56:00');
INSERT INTO sale (saleid, customer_id, album_id, employee_id, store_id, timestamp) VALUES (3,  3,  1, 2, 1, '2005-07-10 11:03:00');
INSERT INTO sale (saleid, customer_id, album_id, employee_id, store_id, timestamp) VALUES (4,  4,  1, 8, 2, '2005-07-10 10:03:00');
INSERT INTO sale (saleid, customer_id, album_id, employee_id, store_id, timestamp) VALUES (5,  5,  1, 3, 1, '2005-07-10 13:03:00');
INSERT INTO sale (saleid, customer_id, album_id, employee_id, store_id, timestamp) VALUES (6,  6,  1, 9, 2, '2005-07-10 14:03:00');
INSERT INTO sale (saleid, customer_id, album_id, employee_id, store_id, timestamp) VALUES (7,  7,  1, 1, 1, '2005-07-10 15:03:00');
INSERT INTO sale (saleid, customer_id, album_id, employee_id, store_id, timestamp) VALUES (8,  8,  1, 7, 2, '2005-07-10 16:03:00');
INSERT INTO sale (saleid, customer_id, album_id, employee_id, store_id, timestamp) VALUES (9,  9,  1, 2, 1, '2005-07-10 18:03:00');
INSERT INTO sale (saleid, customer_id, album_id, employee_id, store_id, timestamp) VALUES (10, 10, 1, 8, 2, '2005-07-10 19:03:00');
INSERT INTO sale (saleid, customer_id, album_id, employee_id, store_id, timestamp) VALUES (11, 1,  2, 7, 2, '2005-05-25 16:23:00');
INSERT INTO sale (saleid, customer_id, album_id, employee_id, store_id, timestamp) VALUES (12, 3,  2, 8, 2, '2005-07-10 11:56:00');
INSERT INTO sale (saleid, customer_id, album_id, employee_id, store_id, timestamp) VALUES (13, 5,  2, 9, 2, '2005-07-10 13:12:00');
INSERT INTO sale (saleid, customer_id, album_id, employee_id, store_id, timestamp) VALUES (14, 7,  2, 7, 2, '2005-07-10 15:09:00');
INSERT INTO sale (saleid, customer_id, album_id, employee_id, store_id, timestamp) VALUES (15, 9,  2, 8, 2, '2005-07-10 18:49:00');
INSERT INTO sale (saleid, customer_id, album_id, employee_id, store_id, timestamp) VALUES (16, 2,  3, 1, 1, '2005-06-05 12:56:12');
INSERT INTO sale (saleid, customer_id, album_id, employee_id, store_id, timestamp) VALUES (17, 4,  3, 2, 1, '2005-07-10 10:03:32');
INSERT INTO sale (saleid, customer_id, album_id, employee_id, store_id, timestamp) VALUES (18, 6,  3, 3, 1, '2005-07-10 14:03:52');
INSERT INTO sale (saleid, customer_id, album_id, employee_id, store_id, timestamp) VALUES (19, 8,  3, 1, 1, '2005-07-10 16:03:01');
INSERT INTO sale (saleid, customer_id, album_id, employee_id, store_id, timestamp) VALUES (20, 10, 3, 2, 1, '2005-07-10 19:03:50');
   ]]>
  </para>
 </refsect1>
 
 <refsect1 id="{@id copyright_notice}">
  <title>Copyright Notice</title>
  <para>
  	<emphasis>LICENSE:</emphasis> This source file is subject to version 2.1 of the LGPL that is bundled with this package in the file LICENSE.
  </para>
  <para>
    <emphasis>COPYRIGHT:</emphasis>
    <![CDATA[
Empowered Media
http://www.empoweredmedia.com
481 Eighth Avenue Suite 1530
New York, NY 10001
    ]]>
  </para>
 </refsect1>
</refentry>